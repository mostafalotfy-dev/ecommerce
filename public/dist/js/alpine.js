/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/alpine.js":
/*!********************************!*\
  !*** ./resources/js/alpine.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\ndocument.addEventListener(\"alpine:init\", function () {\n  Alpine.store(\"search\", {\n    searchInput: \"\",\n    result: [],\n    loading: false,\n    page_number: 1,\n    value: \"\",\n    controller: null,\n    clear: function clear() {\n      if (this.searchInput.length === 0) {\n        this.get();\n      }\n    },\n    send: function send(id) {\n      var formData = new FormData();\n      formData.append(\"key\", id);\n      formData.append(\"value\", this.value);\n      fetch(\"http://\" + location.host + \"/api/ajax/language\", {\n        method: \"post\",\n        body: formData,\n        headers: {\n          \"Accept\": \"application/json\"\n        }\n      });\n    },\n    get: function get() {\n      var _this$controller,\n        _this = this;\n      fetch(\"http://\".concat(location.host, \"/api/ajax/language/\").concat(encodeURIComponent(this.searchInput.replace(/\\//g, \"-\")), \"?page= \").concat(this.page_number), {\n        signal: (_this$controller = this.controller) === null || _this$controller === void 0 ? void 0 : _this$controller.signal\n      }).then(function (r) {\n        return r.json();\n      }).then(function (_ref) {\n        var data = _ref.data;\n        _this.result = data;\n        if (_this.controller) {\n          _this.controller.abort();\n        }\n        _this.controller = new AbortController();\n      })[\"catch\"](function (e) {\n        console.log(e.message);\n      })[\"finally\"](function () {\n        _this.loading = false;\n      });\n    },\n    \"delete\": function _delete(id) {\n      var _this2 = this;\n      fetch(location.protocol + \"/api/ajax/language/\" + id, {\n        method: \"delete\"\n      }).then(function (r) {\n        return r.json();\n      }).then(function (r) {\n        return _this2.result = r.data.data;\n      });\n    },\n    nextPage: function nextPage() {\n      this.page_number++;\n      if (this.page_number > this.length) this.page_number = this.length;\n      this.loading = true;\n      this.get();\n    },\n    prevPage: function prevPage() {\n      this.page_number--;\n      if (this.page_number < 1) this.page_number = 1;\n      this.loading = true;\n      this.get();\n    }\n  });\n  Alpine.data(\"sweetalert\", function () {\n    return {\n      show: function show(obj) {\n        Swal.fire({\n          title: obj.title,\n          text: obj.text,\n          icon: obj.icon,\n          confirmButtonText: obj.confirmButtonText\n        });\n      }\n    };\n  });\n  Alpine.store(\"permission\", {\n    permissions: [],\n    searchInput: \"\",\n    currentPage: 1,\n    errors: null,\n    role_name_en: \"\",\n    role_name_ar: \"\",\n    paginate: function paginate() {\n      var _this3 = this;\n      fetch(\"http://\".concat(location.host, \"/api/ajax/permissions/\").concat(encodeURIComponent(this.searchInput), \"?page=\").concat(this.currentPage), {\n        headers: {\n          \"Accept\": \"application/json\"\n        }\n      }).then(function (r) {\n        return r.json();\n      }).then(function (_ref2) {\n        var permissions = _ref2.permissions;\n        _this3.permissions = permissions;\n      });\n    },\n    add: function add() {\n      var _this4 = this;\n      var formData = new FormData(document.getElementById(\"role-form\"));\n      fetch(\"http://\".concat(location.host, \"/api/ajax/permissions\"), {\n        method: \"post\",\n        body: formData,\n        headers: {\n          \"Accept\": \"application/json\"\n        }\n      }).then(function (r) {\n        return r.json();\n      }).then(function (r) {\n        if (r.hasOwnProperty(\"errors\")) {\n          _this4.errors = r.message;\n        } else if (r.hasOwnProperty(\"redirect_to\")) {\n          location = r.redirect_to;\n        } else {\n          console.log(r);\n        }\n      });\n    },\n    update: function update() {\n      var form = document.getElementById(\"role-form\");\n      fetch(form.getAttribute(\"action\"), {\n        method: \"put\",\n        body: new FormData(form),\n        headers: {\n          \"Accept\": \"application/json\"\n        }\n      }).then(function (r) {\n        return r.json();\n      }).then(function (r) {\n        console.log(r);\n      });\n    }\n  });\n  Alpine.data(\"cod\", function () {\n    return {\n      update: function update(id, status, name) {\n        fetch(\"http://\".concat(location.host, \"/api/ajax/cod/\").concat(status, \"/\").concat(id)).then(function () {\n          return location.reload();\n        });\n      }\n    };\n  });\n  Alpine.data(\"status\", function () {\n    return {\n      update: function update(id, status, name) {\n        var formData = new FormData();\n        formData.append(\"id\", id);\n        formData.append(\"status\", status);\n        formData.append(\"_method\", \"put\");\n        fetch(\"http://\".concat(location.host, \"/api/ajax/update/\").concat(name, \"/status\"), {\n          method: \"post\",\n          body: formData,\n          headers: {\n            \"Accept\": \"application/json\"\n          }\n        }).then(function (r) {\n          return location.reload();\n        });\n      }\n    };\n  });\n  Alpine.data(\"crud\", function () {\n    return {\n      message: null,\n      currentPage: 1,\n      errors: null,\n      send: function send(id) {\n        var _this5 = this;\n        this.errors = null;\n        var form = document.getElementById(id);\n        fetch(form.action, {\n          method: form.getAttribute(\"method\"),\n          body: new FormData(form),\n          headers: {\n            \"Accept\": \"application/json\"\n          }\n        }).then(function (r) {\n          return r.json();\n        }).then(function (r) {\n          if (r.hasOwnProperty(\"errors\")) {\n            _this5.message = r.message;\n            _this5.errors = r.errors;\n          } else if (r.hasOwnProperty(\"redirect_to\")) {\n            Swal.fire(r.message).then(function () {\n              location = r.redirect_to;\n            });\n          }\n        });\n      }\n    };\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/alpine.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/alpine.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;