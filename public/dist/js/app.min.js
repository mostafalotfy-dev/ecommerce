/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/alpinejs/dist/module.esm.js":
/*!**************************************************!*\
  !*** ./node_modules/alpinejs/dist/module.esm.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ module_default)\n/* harmony export */ });\n// packages/alpinejs/src/scheduler.js\nvar flushPending = false;\nvar flushing = false;\nvar queue = [];\nvar lastFlushedIndex = -1;\nfunction scheduler(callback) {\n  queueJob(callback);\n}\nfunction queueJob(job) {\n  if (!queue.includes(job))\n    queue.push(job);\n  queueFlush();\n}\nfunction dequeueJob(job) {\n  let index = queue.indexOf(job);\n  if (index !== -1 && index > lastFlushedIndex)\n    queue.splice(index, 1);\n}\nfunction queueFlush() {\n  if (!flushing && !flushPending) {\n    flushPending = true;\n    queueMicrotask(flushJobs);\n  }\n}\nfunction flushJobs() {\n  flushPending = false;\n  flushing = true;\n  for (let i = 0; i < queue.length; i++) {\n    queue[i]();\n    lastFlushedIndex = i;\n  }\n  queue.length = 0;\n  lastFlushedIndex = -1;\n  flushing = false;\n}\n\n// packages/alpinejs/src/reactivity.js\nvar reactive;\nvar effect;\nvar release;\nvar raw;\nvar shouldSchedule = true;\nfunction disableEffectScheduling(callback) {\n  shouldSchedule = false;\n  callback();\n  shouldSchedule = true;\n}\nfunction setReactivityEngine(engine) {\n  reactive = engine.reactive;\n  release = engine.release;\n  effect = (callback) => engine.effect(callback, {scheduler: (task) => {\n    if (shouldSchedule) {\n      scheduler(task);\n    } else {\n      task();\n    }\n  }});\n  raw = engine.raw;\n}\nfunction overrideEffect(override) {\n  effect = override;\n}\nfunction elementBoundEffect(el) {\n  let cleanup2 = () => {\n  };\n  let wrappedEffect = (callback) => {\n    let effectReference = effect(callback);\n    if (!el._x_effects) {\n      el._x_effects = new Set();\n      el._x_runEffects = () => {\n        el._x_effects.forEach((i) => i());\n      };\n    }\n    el._x_effects.add(effectReference);\n    cleanup2 = () => {\n      if (effectReference === void 0)\n        return;\n      el._x_effects.delete(effectReference);\n      release(effectReference);\n    };\n    return effectReference;\n  };\n  return [wrappedEffect, () => {\n    cleanup2();\n  }];\n}\n\n// packages/alpinejs/src/mutation.js\nvar onAttributeAddeds = [];\nvar onElRemoveds = [];\nvar onElAddeds = [];\nfunction onElAdded(callback) {\n  onElAddeds.push(callback);\n}\nfunction onElRemoved(el, callback) {\n  if (typeof callback === \"function\") {\n    if (!el._x_cleanups)\n      el._x_cleanups = [];\n    el._x_cleanups.push(callback);\n  } else {\n    callback = el;\n    onElRemoveds.push(callback);\n  }\n}\nfunction onAttributesAdded(callback) {\n  onAttributeAddeds.push(callback);\n}\nfunction onAttributeRemoved(el, name, callback) {\n  if (!el._x_attributeCleanups)\n    el._x_attributeCleanups = {};\n  if (!el._x_attributeCleanups[name])\n    el._x_attributeCleanups[name] = [];\n  el._x_attributeCleanups[name].push(callback);\n}\nfunction cleanupAttributes(el, names) {\n  if (!el._x_attributeCleanups)\n    return;\n  Object.entries(el._x_attributeCleanups).forEach(([name, value]) => {\n    if (names === void 0 || names.includes(name)) {\n      value.forEach((i) => i());\n      delete el._x_attributeCleanups[name];\n    }\n  });\n}\nvar observer = new MutationObserver(onMutate);\nvar currentlyObserving = false;\nfunction startObservingMutations() {\n  observer.observe(document, {subtree: true, childList: true, attributes: true, attributeOldValue: true});\n  currentlyObserving = true;\n}\nfunction stopObservingMutations() {\n  flushObserver();\n  observer.disconnect();\n  currentlyObserving = false;\n}\nvar recordQueue = [];\nvar willProcessRecordQueue = false;\nfunction flushObserver() {\n  recordQueue = recordQueue.concat(observer.takeRecords());\n  if (recordQueue.length && !willProcessRecordQueue) {\n    willProcessRecordQueue = true;\n    queueMicrotask(() => {\n      processRecordQueue();\n      willProcessRecordQueue = false;\n    });\n  }\n}\nfunction processRecordQueue() {\n  onMutate(recordQueue);\n  recordQueue.length = 0;\n}\nfunction mutateDom(callback) {\n  if (!currentlyObserving)\n    return callback();\n  stopObservingMutations();\n  let result = callback();\n  startObservingMutations();\n  return result;\n}\nvar isCollecting = false;\nvar deferredMutations = [];\nfunction deferMutations() {\n  isCollecting = true;\n}\nfunction flushAndStopDeferringMutations() {\n  isCollecting = false;\n  onMutate(deferredMutations);\n  deferredMutations = [];\n}\nfunction onMutate(mutations) {\n  if (isCollecting) {\n    deferredMutations = deferredMutations.concat(mutations);\n    return;\n  }\n  let addedNodes = [];\n  let removedNodes = [];\n  let addedAttributes = new Map();\n  let removedAttributes = new Map();\n  for (let i = 0; i < mutations.length; i++) {\n    if (mutations[i].target._x_ignoreMutationObserver)\n      continue;\n    if (mutations[i].type === \"childList\") {\n      mutations[i].addedNodes.forEach((node) => node.nodeType === 1 && addedNodes.push(node));\n      mutations[i].removedNodes.forEach((node) => node.nodeType === 1 && removedNodes.push(node));\n    }\n    if (mutations[i].type === \"attributes\") {\n      let el = mutations[i].target;\n      let name = mutations[i].attributeName;\n      let oldValue = mutations[i].oldValue;\n      let add2 = () => {\n        if (!addedAttributes.has(el))\n          addedAttributes.set(el, []);\n        addedAttributes.get(el).push({name, value: el.getAttribute(name)});\n      };\n      let remove = () => {\n        if (!removedAttributes.has(el))\n          removedAttributes.set(el, []);\n        removedAttributes.get(el).push(name);\n      };\n      if (el.hasAttribute(name) && oldValue === null) {\n        add2();\n      } else if (el.hasAttribute(name)) {\n        remove();\n        add2();\n      } else {\n        remove();\n      }\n    }\n  }\n  removedAttributes.forEach((attrs, el) => {\n    cleanupAttributes(el, attrs);\n  });\n  addedAttributes.forEach((attrs, el) => {\n    onAttributeAddeds.forEach((i) => i(el, attrs));\n  });\n  for (let node of removedNodes) {\n    if (addedNodes.includes(node))\n      continue;\n    onElRemoveds.forEach((i) => i(node));\n    if (node._x_cleanups) {\n      while (node._x_cleanups.length)\n        node._x_cleanups.pop()();\n    }\n  }\n  addedNodes.forEach((node) => {\n    node._x_ignoreSelf = true;\n    node._x_ignore = true;\n  });\n  for (let node of addedNodes) {\n    if (removedNodes.includes(node))\n      continue;\n    if (!node.isConnected)\n      continue;\n    delete node._x_ignoreSelf;\n    delete node._x_ignore;\n    onElAddeds.forEach((i) => i(node));\n    node._x_ignore = true;\n    node._x_ignoreSelf = true;\n  }\n  addedNodes.forEach((node) => {\n    delete node._x_ignoreSelf;\n    delete node._x_ignore;\n  });\n  addedNodes = null;\n  removedNodes = null;\n  addedAttributes = null;\n  removedAttributes = null;\n}\n\n// packages/alpinejs/src/scope.js\nfunction scope(node) {\n  return mergeProxies(closestDataStack(node));\n}\nfunction addScopeToNode(node, data2, referenceNode) {\n  node._x_dataStack = [data2, ...closestDataStack(referenceNode || node)];\n  return () => {\n    node._x_dataStack = node._x_dataStack.filter((i) => i !== data2);\n  };\n}\nfunction closestDataStack(node) {\n  if (node._x_dataStack)\n    return node._x_dataStack;\n  if (typeof ShadowRoot === \"function\" && node instanceof ShadowRoot) {\n    return closestDataStack(node.host);\n  }\n  if (!node.parentNode) {\n    return [];\n  }\n  return closestDataStack(node.parentNode);\n}\nfunction mergeProxies(objects) {\n  let thisProxy = new Proxy({}, {\n    ownKeys: () => {\n      return Array.from(new Set(objects.flatMap((i) => Object.keys(i))));\n    },\n    has: (target, name) => {\n      return objects.some((obj) => obj.hasOwnProperty(name));\n    },\n    get: (target, name) => {\n      return (objects.find((obj) => {\n        if (obj.hasOwnProperty(name)) {\n          let descriptor = Object.getOwnPropertyDescriptor(obj, name);\n          if (descriptor.get && descriptor.get._x_alreadyBound || descriptor.set && descriptor.set._x_alreadyBound) {\n            return true;\n          }\n          if ((descriptor.get || descriptor.set) && descriptor.enumerable) {\n            let getter = descriptor.get;\n            let setter = descriptor.set;\n            let property = descriptor;\n            getter = getter && getter.bind(thisProxy);\n            setter = setter && setter.bind(thisProxy);\n            if (getter)\n              getter._x_alreadyBound = true;\n            if (setter)\n              setter._x_alreadyBound = true;\n            Object.defineProperty(obj, name, {\n              ...property,\n              get: getter,\n              set: setter\n            });\n          }\n          return true;\n        }\n        return false;\n      }) || {})[name];\n    },\n    set: (target, name, value) => {\n      let closestObjectWithKey = objects.find((obj) => obj.hasOwnProperty(name));\n      if (closestObjectWithKey) {\n        closestObjectWithKey[name] = value;\n      } else {\n        objects[objects.length - 1][name] = value;\n      }\n      return true;\n    }\n  });\n  return thisProxy;\n}\n\n// packages/alpinejs/src/interceptor.js\nfunction initInterceptors(data2) {\n  let isObject2 = (val) => typeof val === \"object\" && !Array.isArray(val) && val !== null;\n  let recurse = (obj, basePath = \"\") => {\n    Object.entries(Object.getOwnPropertyDescriptors(obj)).forEach(([key, {value, enumerable}]) => {\n      if (enumerable === false || value === void 0)\n        return;\n      let path = basePath === \"\" ? key : `${basePath}.${key}`;\n      if (typeof value === \"object\" && value !== null && value._x_interceptor) {\n        obj[key] = value.initialize(data2, path, key);\n      } else {\n        if (isObject2(value) && value !== obj && !(value instanceof Element)) {\n          recurse(value, path);\n        }\n      }\n    });\n  };\n  return recurse(data2);\n}\nfunction interceptor(callback, mutateObj = () => {\n}) {\n  let obj = {\n    initialValue: void 0,\n    _x_interceptor: true,\n    initialize(data2, path, key) {\n      return callback(this.initialValue, () => get(data2, path), (value) => set(data2, path, value), path, key);\n    }\n  };\n  mutateObj(obj);\n  return (initialValue) => {\n    if (typeof initialValue === \"object\" && initialValue !== null && initialValue._x_interceptor) {\n      let initialize = obj.initialize.bind(obj);\n      obj.initialize = (data2, path, key) => {\n        let innerValue = initialValue.initialize(data2, path, key);\n        obj.initialValue = innerValue;\n        return initialize(data2, path, key);\n      };\n    } else {\n      obj.initialValue = initialValue;\n    }\n    return obj;\n  };\n}\nfunction get(obj, path) {\n  return path.split(\".\").reduce((carry, segment) => carry[segment], obj);\n}\nfunction set(obj, path, value) {\n  if (typeof path === \"string\")\n    path = path.split(\".\");\n  if (path.length === 1)\n    obj[path[0]] = value;\n  else if (path.length === 0)\n    throw error;\n  else {\n    if (obj[path[0]])\n      return set(obj[path[0]], path.slice(1), value);\n    else {\n      obj[path[0]] = {};\n      return set(obj[path[0]], path.slice(1), value);\n    }\n  }\n}\n\n// packages/alpinejs/src/magics.js\nvar magics = {};\nfunction magic(name, callback) {\n  magics[name] = callback;\n}\nfunction injectMagics(obj, el) {\n  Object.entries(magics).forEach(([name, callback]) => {\n    let memoizedUtilities = null;\n    function getUtilities() {\n      if (memoizedUtilities) {\n        return memoizedUtilities;\n      } else {\n        let [utilities, cleanup2] = getElementBoundUtilities(el);\n        memoizedUtilities = {interceptor, ...utilities};\n        onElRemoved(el, cleanup2);\n        return memoizedUtilities;\n      }\n    }\n    Object.defineProperty(obj, `$${name}`, {\n      get() {\n        return callback(el, getUtilities());\n      },\n      enumerable: false\n    });\n  });\n  return obj;\n}\n\n// packages/alpinejs/src/utils/error.js\nfunction tryCatch(el, expression, callback, ...args) {\n  try {\n    return callback(...args);\n  } catch (e) {\n    handleError(e, el, expression);\n  }\n}\nfunction handleError(error2, el, expression = void 0) {\n  Object.assign(error2, {el, expression});\n  console.warn(`Alpine Expression Error: ${error2.message}\n\n${expression ? 'Expression: \"' + expression + '\"\\n\\n' : \"\"}`, el);\n  setTimeout(() => {\n    throw error2;\n  }, 0);\n}\n\n// packages/alpinejs/src/evaluator.js\nvar shouldAutoEvaluateFunctions = true;\nfunction dontAutoEvaluateFunctions(callback) {\n  let cache = shouldAutoEvaluateFunctions;\n  shouldAutoEvaluateFunctions = false;\n  let result = callback();\n  shouldAutoEvaluateFunctions = cache;\n  return result;\n}\nfunction evaluate(el, expression, extras = {}) {\n  let result;\n  evaluateLater(el, expression)((value) => result = value, extras);\n  return result;\n}\nfunction evaluateLater(...args) {\n  return theEvaluatorFunction(...args);\n}\nvar theEvaluatorFunction = normalEvaluator;\nfunction setEvaluator(newEvaluator) {\n  theEvaluatorFunction = newEvaluator;\n}\nfunction normalEvaluator(el, expression) {\n  let overriddenMagics = {};\n  injectMagics(overriddenMagics, el);\n  let dataStack = [overriddenMagics, ...closestDataStack(el)];\n  let evaluator = typeof expression === \"function\" ? generateEvaluatorFromFunction(dataStack, expression) : generateEvaluatorFromString(dataStack, expression, el);\n  return tryCatch.bind(null, el, expression, evaluator);\n}\nfunction generateEvaluatorFromFunction(dataStack, func) {\n  return (receiver = () => {\n  }, {scope: scope2 = {}, params = []} = {}) => {\n    let result = func.apply(mergeProxies([scope2, ...dataStack]), params);\n    runIfTypeOfFunction(receiver, result);\n  };\n}\nvar evaluatorMemo = {};\nfunction generateFunctionFromString(expression, el) {\n  if (evaluatorMemo[expression]) {\n    return evaluatorMemo[expression];\n  }\n  let AsyncFunction = Object.getPrototypeOf(async function() {\n  }).constructor;\n  let rightSideSafeExpression = /^[\\n\\s]*if.*\\(.*\\)/.test(expression) || /^(let|const)\\s/.test(expression) ? `(async()=>{ ${expression} })()` : expression;\n  const safeAsyncFunction = () => {\n    try {\n      return new AsyncFunction([\"__self\", \"scope\"], `with (scope) { __self.result = ${rightSideSafeExpression} }; __self.finished = true; return __self.result;`);\n    } catch (error2) {\n      handleError(error2, el, expression);\n      return Promise.resolve();\n    }\n  };\n  let func = safeAsyncFunction();\n  evaluatorMemo[expression] = func;\n  return func;\n}\nfunction generateEvaluatorFromString(dataStack, expression, el) {\n  let func = generateFunctionFromString(expression, el);\n  return (receiver = () => {\n  }, {scope: scope2 = {}, params = []} = {}) => {\n    func.result = void 0;\n    func.finished = false;\n    let completeScope = mergeProxies([scope2, ...dataStack]);\n    if (typeof func === \"function\") {\n      let promise = func(func, completeScope).catch((error2) => handleError(error2, el, expression));\n      if (func.finished) {\n        runIfTypeOfFunction(receiver, func.result, completeScope, params, el);\n        func.result = void 0;\n      } else {\n        promise.then((result) => {\n          runIfTypeOfFunction(receiver, result, completeScope, params, el);\n        }).catch((error2) => handleError(error2, el, expression)).finally(() => func.result = void 0);\n      }\n    }\n  };\n}\nfunction runIfTypeOfFunction(receiver, value, scope2, params, el) {\n  if (shouldAutoEvaluateFunctions && typeof value === \"function\") {\n    let result = value.apply(scope2, params);\n    if (result instanceof Promise) {\n      result.then((i) => runIfTypeOfFunction(receiver, i, scope2, params)).catch((error2) => handleError(error2, el, value));\n    } else {\n      receiver(result);\n    }\n  } else if (typeof value === \"object\" && value instanceof Promise) {\n    value.then((i) => receiver(i));\n  } else {\n    receiver(value);\n  }\n}\n\n// packages/alpinejs/src/directives.js\nvar prefixAsString = \"x-\";\nfunction prefix(subject = \"\") {\n  return prefixAsString + subject;\n}\nfunction setPrefix(newPrefix) {\n  prefixAsString = newPrefix;\n}\nvar directiveHandlers = {};\nfunction directive(name, callback) {\n  directiveHandlers[name] = callback;\n  return {\n    before(directive2) {\n      if (!directiveHandlers[directive2]) {\n        console.warn(\"Cannot find directive `${directive}`. `${name}` will use the default order of execution\");\n        return;\n      }\n      const pos = directiveOrder.indexOf(directive2);\n      directiveOrder.splice(pos >= 0 ? pos : directiveOrder.indexOf(\"DEFAULT\"), 0, name);\n    }\n  };\n}\nfunction directives(el, attributes, originalAttributeOverride) {\n  attributes = Array.from(attributes);\n  if (el._x_virtualDirectives) {\n    let vAttributes = Object.entries(el._x_virtualDirectives).map(([name, value]) => ({name, value}));\n    let staticAttributes = attributesOnly(vAttributes);\n    vAttributes = vAttributes.map((attribute) => {\n      if (staticAttributes.find((attr) => attr.name === attribute.name)) {\n        return {\n          name: `x-bind:${attribute.name}`,\n          value: `\"${attribute.value}\"`\n        };\n      }\n      return attribute;\n    });\n    attributes = attributes.concat(vAttributes);\n  }\n  let transformedAttributeMap = {};\n  let directives2 = attributes.map(toTransformedAttributes((newName, oldName) => transformedAttributeMap[newName] = oldName)).filter(outNonAlpineAttributes).map(toParsedDirectives(transformedAttributeMap, originalAttributeOverride)).sort(byPriority);\n  return directives2.map((directive2) => {\n    return getDirectiveHandler(el, directive2);\n  });\n}\nfunction attributesOnly(attributes) {\n  return Array.from(attributes).map(toTransformedAttributes()).filter((attr) => !outNonAlpineAttributes(attr));\n}\nvar isDeferringHandlers = false;\nvar directiveHandlerStacks = new Map();\nvar currentHandlerStackKey = Symbol();\nfunction deferHandlingDirectives(callback) {\n  isDeferringHandlers = true;\n  let key = Symbol();\n  currentHandlerStackKey = key;\n  directiveHandlerStacks.set(key, []);\n  let flushHandlers = () => {\n    while (directiveHandlerStacks.get(key).length)\n      directiveHandlerStacks.get(key).shift()();\n    directiveHandlerStacks.delete(key);\n  };\n  let stopDeferring = () => {\n    isDeferringHandlers = false;\n    flushHandlers();\n  };\n  callback(flushHandlers);\n  stopDeferring();\n}\nfunction getElementBoundUtilities(el) {\n  let cleanups = [];\n  let cleanup2 = (callback) => cleanups.push(callback);\n  let [effect3, cleanupEffect] = elementBoundEffect(el);\n  cleanups.push(cleanupEffect);\n  let utilities = {\n    Alpine: alpine_default,\n    effect: effect3,\n    cleanup: cleanup2,\n    evaluateLater: evaluateLater.bind(evaluateLater, el),\n    evaluate: evaluate.bind(evaluate, el)\n  };\n  let doCleanup = () => cleanups.forEach((i) => i());\n  return [utilities, doCleanup];\n}\nfunction getDirectiveHandler(el, directive2) {\n  let noop = () => {\n  };\n  let handler4 = directiveHandlers[directive2.type] || noop;\n  let [utilities, cleanup2] = getElementBoundUtilities(el);\n  onAttributeRemoved(el, directive2.original, cleanup2);\n  let fullHandler = () => {\n    if (el._x_ignore || el._x_ignoreSelf)\n      return;\n    handler4.inline && handler4.inline(el, directive2, utilities);\n    handler4 = handler4.bind(handler4, el, directive2, utilities);\n    isDeferringHandlers ? directiveHandlerStacks.get(currentHandlerStackKey).push(handler4) : handler4();\n  };\n  fullHandler.runCleanups = cleanup2;\n  return fullHandler;\n}\nvar startingWith = (subject, replacement) => ({name, value}) => {\n  if (name.startsWith(subject))\n    name = name.replace(subject, replacement);\n  return {name, value};\n};\nvar into = (i) => i;\nfunction toTransformedAttributes(callback = () => {\n}) {\n  return ({name, value}) => {\n    let {name: newName, value: newValue} = attributeTransformers.reduce((carry, transform) => {\n      return transform(carry);\n    }, {name, value});\n    if (newName !== name)\n      callback(newName, name);\n    return {name: newName, value: newValue};\n  };\n}\nvar attributeTransformers = [];\nfunction mapAttributes(callback) {\n  attributeTransformers.push(callback);\n}\nfunction outNonAlpineAttributes({name}) {\n  return alpineAttributeRegex().test(name);\n}\nvar alpineAttributeRegex = () => new RegExp(`^${prefixAsString}([^:^.]+)\\\\b`);\nfunction toParsedDirectives(transformedAttributeMap, originalAttributeOverride) {\n  return ({name, value}) => {\n    let typeMatch = name.match(alpineAttributeRegex());\n    let valueMatch = name.match(/:([a-zA-Z0-9\\-:]+)/);\n    let modifiers = name.match(/\\.[^.\\]]+(?=[^\\]]*$)/g) || [];\n    let original = originalAttributeOverride || transformedAttributeMap[name] || name;\n    return {\n      type: typeMatch ? typeMatch[1] : null,\n      value: valueMatch ? valueMatch[1] : null,\n      modifiers: modifiers.map((i) => i.replace(\".\", \"\")),\n      expression: value,\n      original\n    };\n  };\n}\nvar DEFAULT = \"DEFAULT\";\nvar directiveOrder = [\n  \"ignore\",\n  \"ref\",\n  \"data\",\n  \"id\",\n  \"bind\",\n  \"init\",\n  \"for\",\n  \"model\",\n  \"modelable\",\n  \"transition\",\n  \"show\",\n  \"if\",\n  DEFAULT,\n  \"teleport\"\n];\nfunction byPriority(a, b) {\n  let typeA = directiveOrder.indexOf(a.type) === -1 ? DEFAULT : a.type;\n  let typeB = directiveOrder.indexOf(b.type) === -1 ? DEFAULT : b.type;\n  return directiveOrder.indexOf(typeA) - directiveOrder.indexOf(typeB);\n}\n\n// packages/alpinejs/src/utils/dispatch.js\nfunction dispatch(el, name, detail = {}) {\n  el.dispatchEvent(new CustomEvent(name, {\n    detail,\n    bubbles: true,\n    composed: true,\n    cancelable: true\n  }));\n}\n\n// packages/alpinejs/src/utils/walk.js\nfunction walk(el, callback) {\n  if (typeof ShadowRoot === \"function\" && el instanceof ShadowRoot) {\n    Array.from(el.children).forEach((el2) => walk(el2, callback));\n    return;\n  }\n  let skip = false;\n  callback(el, () => skip = true);\n  if (skip)\n    return;\n  let node = el.firstElementChild;\n  while (node) {\n    walk(node, callback, false);\n    node = node.nextElementSibling;\n  }\n}\n\n// packages/alpinejs/src/utils/warn.js\nfunction warn(message, ...args) {\n  console.warn(`Alpine Warning: ${message}`, ...args);\n}\n\n// packages/alpinejs/src/lifecycle.js\nvar started = false;\nfunction start() {\n  if (started)\n    warn(\"Alpine has already been initialized on this page. Calling Alpine.start() more than once can cause problems.\");\n  started = true;\n  if (!document.body)\n    warn(\"Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?\");\n  dispatch(document, \"alpine:init\");\n  dispatch(document, \"alpine:initializing\");\n  startObservingMutations();\n  onElAdded((el) => initTree(el, walk));\n  onElRemoved((el) => destroyTree(el));\n  onAttributesAdded((el, attrs) => {\n    directives(el, attrs).forEach((handle) => handle());\n  });\n  let outNestedComponents = (el) => !closestRoot(el.parentElement, true);\n  Array.from(document.querySelectorAll(allSelectors())).filter(outNestedComponents).forEach((el) => {\n    initTree(el);\n  });\n  dispatch(document, \"alpine:initialized\");\n}\nvar rootSelectorCallbacks = [];\nvar initSelectorCallbacks = [];\nfunction rootSelectors() {\n  return rootSelectorCallbacks.map((fn) => fn());\n}\nfunction allSelectors() {\n  return rootSelectorCallbacks.concat(initSelectorCallbacks).map((fn) => fn());\n}\nfunction addRootSelector(selectorCallback) {\n  rootSelectorCallbacks.push(selectorCallback);\n}\nfunction addInitSelector(selectorCallback) {\n  initSelectorCallbacks.push(selectorCallback);\n}\nfunction closestRoot(el, includeInitSelectors = false) {\n  return findClosest(el, (element) => {\n    const selectors = includeInitSelectors ? allSelectors() : rootSelectors();\n    if (selectors.some((selector) => element.matches(selector)))\n      return true;\n  });\n}\nfunction findClosest(el, callback) {\n  if (!el)\n    return;\n  if (callback(el))\n    return el;\n  if (el._x_teleportBack)\n    el = el._x_teleportBack;\n  if (!el.parentElement)\n    return;\n  return findClosest(el.parentElement, callback);\n}\nfunction isRoot(el) {\n  return rootSelectors().some((selector) => el.matches(selector));\n}\nvar initInterceptors2 = [];\nfunction interceptInit(callback) {\n  initInterceptors2.push(callback);\n}\nfunction initTree(el, walker = walk, intercept = () => {\n}) {\n  deferHandlingDirectives(() => {\n    walker(el, (el2, skip) => {\n      intercept(el2, skip);\n      initInterceptors2.forEach((i) => i(el2, skip));\n      directives(el2, el2.attributes).forEach((handle) => handle());\n      el2._x_ignore && skip();\n    });\n  });\n}\nfunction destroyTree(root) {\n  walk(root, (el) => cleanupAttributes(el));\n}\n\n// packages/alpinejs/src/nextTick.js\nvar tickStack = [];\nvar isHolding = false;\nfunction nextTick(callback = () => {\n}) {\n  queueMicrotask(() => {\n    isHolding || setTimeout(() => {\n      releaseNextTicks();\n    });\n  });\n  return new Promise((res) => {\n    tickStack.push(() => {\n      callback();\n      res();\n    });\n  });\n}\nfunction releaseNextTicks() {\n  isHolding = false;\n  while (tickStack.length)\n    tickStack.shift()();\n}\nfunction holdNextTicks() {\n  isHolding = true;\n}\n\n// packages/alpinejs/src/utils/classes.js\nfunction setClasses(el, value) {\n  if (Array.isArray(value)) {\n    return setClassesFromString(el, value.join(\" \"));\n  } else if (typeof value === \"object\" && value !== null) {\n    return setClassesFromObject(el, value);\n  } else if (typeof value === \"function\") {\n    return setClasses(el, value());\n  }\n  return setClassesFromString(el, value);\n}\nfunction setClassesFromString(el, classString) {\n  let split = (classString2) => classString2.split(\" \").filter(Boolean);\n  let missingClasses = (classString2) => classString2.split(\" \").filter((i) => !el.classList.contains(i)).filter(Boolean);\n  let addClassesAndReturnUndo = (classes) => {\n    el.classList.add(...classes);\n    return () => {\n      el.classList.remove(...classes);\n    };\n  };\n  classString = classString === true ? classString = \"\" : classString || \"\";\n  return addClassesAndReturnUndo(missingClasses(classString));\n}\nfunction setClassesFromObject(el, classObject) {\n  let split = (classString) => classString.split(\" \").filter(Boolean);\n  let forAdd = Object.entries(classObject).flatMap(([classString, bool]) => bool ? split(classString) : false).filter(Boolean);\n  let forRemove = Object.entries(classObject).flatMap(([classString, bool]) => !bool ? split(classString) : false).filter(Boolean);\n  let added = [];\n  let removed = [];\n  forRemove.forEach((i) => {\n    if (el.classList.contains(i)) {\n      el.classList.remove(i);\n      removed.push(i);\n    }\n  });\n  forAdd.forEach((i) => {\n    if (!el.classList.contains(i)) {\n      el.classList.add(i);\n      added.push(i);\n    }\n  });\n  return () => {\n    removed.forEach((i) => el.classList.add(i));\n    added.forEach((i) => el.classList.remove(i));\n  };\n}\n\n// packages/alpinejs/src/utils/styles.js\nfunction setStyles(el, value) {\n  if (typeof value === \"object\" && value !== null) {\n    return setStylesFromObject(el, value);\n  }\n  return setStylesFromString(el, value);\n}\nfunction setStylesFromObject(el, value) {\n  let previousStyles = {};\n  Object.entries(value).forEach(([key, value2]) => {\n    previousStyles[key] = el.style[key];\n    if (!key.startsWith(\"--\")) {\n      key = kebabCase(key);\n    }\n    el.style.setProperty(key, value2);\n  });\n  setTimeout(() => {\n    if (el.style.length === 0) {\n      el.removeAttribute(\"style\");\n    }\n  });\n  return () => {\n    setStyles(el, previousStyles);\n  };\n}\nfunction setStylesFromString(el, value) {\n  let cache = el.getAttribute(\"style\", value);\n  el.setAttribute(\"style\", value);\n  return () => {\n    el.setAttribute(\"style\", cache || \"\");\n  };\n}\nfunction kebabCase(subject) {\n  return subject.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\n\n// packages/alpinejs/src/utils/once.js\nfunction once(callback, fallback = () => {\n}) {\n  let called = false;\n  return function() {\n    if (!called) {\n      called = true;\n      callback.apply(this, arguments);\n    } else {\n      fallback.apply(this, arguments);\n    }\n  };\n}\n\n// packages/alpinejs/src/directives/x-transition.js\ndirective(\"transition\", (el, {value, modifiers, expression}, {evaluate: evaluate2}) => {\n  if (typeof expression === \"function\")\n    expression = evaluate2(expression);\n  if (expression === false)\n    return;\n  if (!expression || typeof expression === \"boolean\") {\n    registerTransitionsFromHelper(el, modifiers, value);\n  } else {\n    registerTransitionsFromClassString(el, expression, value);\n  }\n});\nfunction registerTransitionsFromClassString(el, classString, stage) {\n  registerTransitionObject(el, setClasses, \"\");\n  let directiveStorageMap = {\n    enter: (classes) => {\n      el._x_transition.enter.during = classes;\n    },\n    \"enter-start\": (classes) => {\n      el._x_transition.enter.start = classes;\n    },\n    \"enter-end\": (classes) => {\n      el._x_transition.enter.end = classes;\n    },\n    leave: (classes) => {\n      el._x_transition.leave.during = classes;\n    },\n    \"leave-start\": (classes) => {\n      el._x_transition.leave.start = classes;\n    },\n    \"leave-end\": (classes) => {\n      el._x_transition.leave.end = classes;\n    }\n  };\n  directiveStorageMap[stage](classString);\n}\nfunction registerTransitionsFromHelper(el, modifiers, stage) {\n  registerTransitionObject(el, setStyles);\n  let doesntSpecify = !modifiers.includes(\"in\") && !modifiers.includes(\"out\") && !stage;\n  let transitioningIn = doesntSpecify || modifiers.includes(\"in\") || [\"enter\"].includes(stage);\n  let transitioningOut = doesntSpecify || modifiers.includes(\"out\") || [\"leave\"].includes(stage);\n  if (modifiers.includes(\"in\") && !doesntSpecify) {\n    modifiers = modifiers.filter((i, index) => index < modifiers.indexOf(\"out\"));\n  }\n  if (modifiers.includes(\"out\") && !doesntSpecify) {\n    modifiers = modifiers.filter((i, index) => index > modifiers.indexOf(\"out\"));\n  }\n  let wantsAll = !modifiers.includes(\"opacity\") && !modifiers.includes(\"scale\");\n  let wantsOpacity = wantsAll || modifiers.includes(\"opacity\");\n  let wantsScale = wantsAll || modifiers.includes(\"scale\");\n  let opacityValue = wantsOpacity ? 0 : 1;\n  let scaleValue = wantsScale ? modifierValue(modifiers, \"scale\", 95) / 100 : 1;\n  let delay = modifierValue(modifiers, \"delay\", 0) / 1e3;\n  let origin = modifierValue(modifiers, \"origin\", \"center\");\n  let property = \"opacity, transform\";\n  let durationIn = modifierValue(modifiers, \"duration\", 150) / 1e3;\n  let durationOut = modifierValue(modifiers, \"duration\", 75) / 1e3;\n  let easing = `cubic-bezier(0.4, 0.0, 0.2, 1)`;\n  if (transitioningIn) {\n    el._x_transition.enter.during = {\n      transformOrigin: origin,\n      transitionDelay: `${delay}s`,\n      transitionProperty: property,\n      transitionDuration: `${durationIn}s`,\n      transitionTimingFunction: easing\n    };\n    el._x_transition.enter.start = {\n      opacity: opacityValue,\n      transform: `scale(${scaleValue})`\n    };\n    el._x_transition.enter.end = {\n      opacity: 1,\n      transform: `scale(1)`\n    };\n  }\n  if (transitioningOut) {\n    el._x_transition.leave.during = {\n      transformOrigin: origin,\n      transitionDelay: `${delay}s`,\n      transitionProperty: property,\n      transitionDuration: `${durationOut}s`,\n      transitionTimingFunction: easing\n    };\n    el._x_transition.leave.start = {\n      opacity: 1,\n      transform: `scale(1)`\n    };\n    el._x_transition.leave.end = {\n      opacity: opacityValue,\n      transform: `scale(${scaleValue})`\n    };\n  }\n}\nfunction registerTransitionObject(el, setFunction, defaultValue = {}) {\n  if (!el._x_transition)\n    el._x_transition = {\n      enter: {during: defaultValue, start: defaultValue, end: defaultValue},\n      leave: {during: defaultValue, start: defaultValue, end: defaultValue},\n      in(before = () => {\n      }, after = () => {\n      }) {\n        transition(el, setFunction, {\n          during: this.enter.during,\n          start: this.enter.start,\n          end: this.enter.end\n        }, before, after);\n      },\n      out(before = () => {\n      }, after = () => {\n      }) {\n        transition(el, setFunction, {\n          during: this.leave.during,\n          start: this.leave.start,\n          end: this.leave.end\n        }, before, after);\n      }\n    };\n}\nwindow.Element.prototype._x_toggleAndCascadeWithTransitions = function(el, value, show, hide) {\n  const nextTick2 = document.visibilityState === \"visible\" ? requestAnimationFrame : setTimeout;\n  let clickAwayCompatibleShow = () => nextTick2(show);\n  if (value) {\n    if (el._x_transition && (el._x_transition.enter || el._x_transition.leave)) {\n      el._x_transition.enter && (Object.entries(el._x_transition.enter.during).length || Object.entries(el._x_transition.enter.start).length || Object.entries(el._x_transition.enter.end).length) ? el._x_transition.in(show) : clickAwayCompatibleShow();\n    } else {\n      el._x_transition ? el._x_transition.in(show) : clickAwayCompatibleShow();\n    }\n    return;\n  }\n  el._x_hidePromise = el._x_transition ? new Promise((resolve, reject) => {\n    el._x_transition.out(() => {\n    }, () => resolve(hide));\n    el._x_transitioning.beforeCancel(() => reject({isFromCancelledTransition: true}));\n  }) : Promise.resolve(hide);\n  queueMicrotask(() => {\n    let closest = closestHide(el);\n    if (closest) {\n      if (!closest._x_hideChildren)\n        closest._x_hideChildren = [];\n      closest._x_hideChildren.push(el);\n    } else {\n      nextTick2(() => {\n        let hideAfterChildren = (el2) => {\n          let carry = Promise.all([\n            el2._x_hidePromise,\n            ...(el2._x_hideChildren || []).map(hideAfterChildren)\n          ]).then(([i]) => i());\n          delete el2._x_hidePromise;\n          delete el2._x_hideChildren;\n          return carry;\n        };\n        hideAfterChildren(el).catch((e) => {\n          if (!e.isFromCancelledTransition)\n            throw e;\n        });\n      });\n    }\n  });\n};\nfunction closestHide(el) {\n  let parent = el.parentNode;\n  if (!parent)\n    return;\n  return parent._x_hidePromise ? parent : closestHide(parent);\n}\nfunction transition(el, setFunction, {during, start: start2, end} = {}, before = () => {\n}, after = () => {\n}) {\n  if (el._x_transitioning)\n    el._x_transitioning.cancel();\n  if (Object.keys(during).length === 0 && Object.keys(start2).length === 0 && Object.keys(end).length === 0) {\n    before();\n    after();\n    return;\n  }\n  let undoStart, undoDuring, undoEnd;\n  performTransition(el, {\n    start() {\n      undoStart = setFunction(el, start2);\n    },\n    during() {\n      undoDuring = setFunction(el, during);\n    },\n    before,\n    end() {\n      undoStart();\n      undoEnd = setFunction(el, end);\n    },\n    after,\n    cleanup() {\n      undoDuring();\n      undoEnd();\n    }\n  });\n}\nfunction performTransition(el, stages) {\n  let interrupted, reachedBefore, reachedEnd;\n  let finish = once(() => {\n    mutateDom(() => {\n      interrupted = true;\n      if (!reachedBefore)\n        stages.before();\n      if (!reachedEnd) {\n        stages.end();\n        releaseNextTicks();\n      }\n      stages.after();\n      if (el.isConnected)\n        stages.cleanup();\n      delete el._x_transitioning;\n    });\n  });\n  el._x_transitioning = {\n    beforeCancels: [],\n    beforeCancel(callback) {\n      this.beforeCancels.push(callback);\n    },\n    cancel: once(function() {\n      while (this.beforeCancels.length) {\n        this.beforeCancels.shift()();\n      }\n      ;\n      finish();\n    }),\n    finish\n  };\n  mutateDom(() => {\n    stages.start();\n    stages.during();\n  });\n  holdNextTicks();\n  requestAnimationFrame(() => {\n    if (interrupted)\n      return;\n    let duration = Number(getComputedStyle(el).transitionDuration.replace(/,.*/, \"\").replace(\"s\", \"\")) * 1e3;\n    let delay = Number(getComputedStyle(el).transitionDelay.replace(/,.*/, \"\").replace(\"s\", \"\")) * 1e3;\n    if (duration === 0)\n      duration = Number(getComputedStyle(el).animationDuration.replace(\"s\", \"\")) * 1e3;\n    mutateDom(() => {\n      stages.before();\n    });\n    reachedBefore = true;\n    requestAnimationFrame(() => {\n      if (interrupted)\n        return;\n      mutateDom(() => {\n        stages.end();\n      });\n      releaseNextTicks();\n      setTimeout(el._x_transitioning.finish, duration + delay);\n      reachedEnd = true;\n    });\n  });\n}\nfunction modifierValue(modifiers, key, fallback) {\n  if (modifiers.indexOf(key) === -1)\n    return fallback;\n  const rawValue = modifiers[modifiers.indexOf(key) + 1];\n  if (!rawValue)\n    return fallback;\n  if (key === \"scale\") {\n    if (isNaN(rawValue))\n      return fallback;\n  }\n  if (key === \"duration\" || key === \"delay\") {\n    let match = rawValue.match(/([0-9]+)ms/);\n    if (match)\n      return match[1];\n  }\n  if (key === \"origin\") {\n    if ([\"top\", \"right\", \"left\", \"center\", \"bottom\"].includes(modifiers[modifiers.indexOf(key) + 2])) {\n      return [rawValue, modifiers[modifiers.indexOf(key) + 2]].join(\" \");\n    }\n  }\n  return rawValue;\n}\n\n// packages/alpinejs/src/clone.js\nvar isCloning = false;\nfunction skipDuringClone(callback, fallback = () => {\n}) {\n  return (...args) => isCloning ? fallback(...args) : callback(...args);\n}\nfunction onlyDuringClone(callback) {\n  return (...args) => isCloning && callback(...args);\n}\nfunction clone(oldEl, newEl) {\n  if (!newEl._x_dataStack)\n    newEl._x_dataStack = oldEl._x_dataStack;\n  isCloning = true;\n  dontRegisterReactiveSideEffects(() => {\n    cloneTree(newEl);\n  });\n  isCloning = false;\n}\nfunction cloneTree(el) {\n  let hasRunThroughFirstEl = false;\n  let shallowWalker = (el2, callback) => {\n    walk(el2, (el3, skip) => {\n      if (hasRunThroughFirstEl && isRoot(el3))\n        return skip();\n      hasRunThroughFirstEl = true;\n      callback(el3, skip);\n    });\n  };\n  initTree(el, shallowWalker);\n}\nfunction dontRegisterReactiveSideEffects(callback) {\n  let cache = effect;\n  overrideEffect((callback2, el) => {\n    let storedEffect = cache(callback2);\n    release(storedEffect);\n    return () => {\n    };\n  });\n  callback();\n  overrideEffect(cache);\n}\n\n// packages/alpinejs/src/utils/bind.js\nfunction bind(el, name, value, modifiers = []) {\n  if (!el._x_bindings)\n    el._x_bindings = reactive({});\n  el._x_bindings[name] = value;\n  name = modifiers.includes(\"camel\") ? camelCase(name) : name;\n  switch (name) {\n    case \"value\":\n      bindInputValue(el, value);\n      break;\n    case \"style\":\n      bindStyles(el, value);\n      break;\n    case \"class\":\n      bindClasses(el, value);\n      break;\n    case \"selected\":\n    case \"checked\":\n      bindAttributeAndProperty(el, name, value);\n      break;\n    default:\n      bindAttribute(el, name, value);\n      break;\n  }\n}\nfunction bindInputValue(el, value) {\n  if (el.type === \"radio\") {\n    if (el.attributes.value === void 0) {\n      el.value = value;\n    }\n    if (window.fromModel) {\n      el.checked = checkedAttrLooseCompare(el.value, value);\n    }\n  } else if (el.type === \"checkbox\") {\n    if (Number.isInteger(value)) {\n      el.value = value;\n    } else if (!Number.isInteger(value) && !Array.isArray(value) && typeof value !== \"boolean\" && ![null, void 0].includes(value)) {\n      el.value = String(value);\n    } else {\n      if (Array.isArray(value)) {\n        el.checked = value.some((val) => checkedAttrLooseCompare(val, el.value));\n      } else {\n        el.checked = !!value;\n      }\n    }\n  } else if (el.tagName === \"SELECT\") {\n    updateSelect(el, value);\n  } else {\n    if (el.value === value)\n      return;\n    el.value = value;\n  }\n}\nfunction bindClasses(el, value) {\n  if (el._x_undoAddedClasses)\n    el._x_undoAddedClasses();\n  el._x_undoAddedClasses = setClasses(el, value);\n}\nfunction bindStyles(el, value) {\n  if (el._x_undoAddedStyles)\n    el._x_undoAddedStyles();\n  el._x_undoAddedStyles = setStyles(el, value);\n}\nfunction bindAttributeAndProperty(el, name, value) {\n  bindAttribute(el, name, value);\n  setPropertyIfChanged(el, name, value);\n}\nfunction bindAttribute(el, name, value) {\n  if ([null, void 0, false].includes(value) && attributeShouldntBePreservedIfFalsy(name)) {\n    el.removeAttribute(name);\n  } else {\n    if (isBooleanAttr(name))\n      value = name;\n    setIfChanged(el, name, value);\n  }\n}\nfunction setIfChanged(el, attrName, value) {\n  if (el.getAttribute(attrName) != value) {\n    el.setAttribute(attrName, value);\n  }\n}\nfunction setPropertyIfChanged(el, propName, value) {\n  if (el[propName] !== value) {\n    el[propName] = value;\n  }\n}\nfunction updateSelect(el, value) {\n  const arrayWrappedValue = [].concat(value).map((value2) => {\n    return value2 + \"\";\n  });\n  Array.from(el.options).forEach((option) => {\n    option.selected = arrayWrappedValue.includes(option.value);\n  });\n}\nfunction camelCase(subject) {\n  return subject.toLowerCase().replace(/-(\\w)/g, (match, char) => char.toUpperCase());\n}\nfunction checkedAttrLooseCompare(valueA, valueB) {\n  return valueA == valueB;\n}\nfunction isBooleanAttr(attrName) {\n  const booleanAttributes = [\n    \"disabled\",\n    \"checked\",\n    \"required\",\n    \"readonly\",\n    \"hidden\",\n    \"open\",\n    \"selected\",\n    \"autofocus\",\n    \"itemscope\",\n    \"multiple\",\n    \"novalidate\",\n    \"allowfullscreen\",\n    \"allowpaymentrequest\",\n    \"formnovalidate\",\n    \"autoplay\",\n    \"controls\",\n    \"loop\",\n    \"muted\",\n    \"playsinline\",\n    \"default\",\n    \"ismap\",\n    \"reversed\",\n    \"async\",\n    \"defer\",\n    \"nomodule\"\n  ];\n  return booleanAttributes.includes(attrName);\n}\nfunction attributeShouldntBePreservedIfFalsy(name) {\n  return ![\"aria-pressed\", \"aria-checked\", \"aria-expanded\", \"aria-selected\"].includes(name);\n}\nfunction getBinding(el, name, fallback) {\n  if (el._x_bindings && el._x_bindings[name] !== void 0)\n    return el._x_bindings[name];\n  return getAttributeBinding(el, name, fallback);\n}\nfunction extractProp(el, name, fallback, extract = true) {\n  if (el._x_bindings && el._x_bindings[name] !== void 0)\n    return el._x_bindings[name];\n  if (el._x_inlineBindings && el._x_inlineBindings[name] !== void 0) {\n    let binding = el._x_inlineBindings[name];\n    binding.extract = extract;\n    return dontAutoEvaluateFunctions(() => {\n      return evaluate(el, binding.expression);\n    });\n  }\n  return getAttributeBinding(el, name, fallback);\n}\nfunction getAttributeBinding(el, name, fallback) {\n  let attr = el.getAttribute(name);\n  if (attr === null)\n    return typeof fallback === \"function\" ? fallback() : fallback;\n  if (attr === \"\")\n    return true;\n  if (isBooleanAttr(name)) {\n    return !![name, \"true\"].includes(attr);\n  }\n  return attr;\n}\n\n// packages/alpinejs/src/utils/debounce.js\nfunction debounce(func, wait) {\n  var timeout;\n  return function() {\n    var context = this, args = arguments;\n    var later = function() {\n      timeout = null;\n      func.apply(context, args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n\n// packages/alpinejs/src/utils/throttle.js\nfunction throttle(func, limit) {\n  let inThrottle;\n  return function() {\n    let context = this, args = arguments;\n    if (!inThrottle) {\n      func.apply(context, args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n}\n\n// packages/alpinejs/src/plugin.js\nfunction plugin(callback) {\n  let callbacks = Array.isArray(callback) ? callback : [callback];\n  callbacks.forEach((i) => i(alpine_default));\n}\n\n// packages/alpinejs/src/store.js\nvar stores = {};\nvar isReactive = false;\nfunction store(name, value) {\n  if (!isReactive) {\n    stores = reactive(stores);\n    isReactive = true;\n  }\n  if (value === void 0) {\n    return stores[name];\n  }\n  stores[name] = value;\n  if (typeof value === \"object\" && value !== null && value.hasOwnProperty(\"init\") && typeof value.init === \"function\") {\n    stores[name].init();\n  }\n  initInterceptors(stores[name]);\n}\nfunction getStores() {\n  return stores;\n}\n\n// packages/alpinejs/src/binds.js\nvar binds = {};\nfunction bind2(name, bindings) {\n  let getBindings = typeof bindings !== \"function\" ? () => bindings : bindings;\n  if (name instanceof Element) {\n    applyBindingsObject(name, getBindings());\n  } else {\n    binds[name] = getBindings;\n  }\n}\nfunction injectBindingProviders(obj) {\n  Object.entries(binds).forEach(([name, callback]) => {\n    Object.defineProperty(obj, name, {\n      get() {\n        return (...args) => {\n          return callback(...args);\n        };\n      }\n    });\n  });\n  return obj;\n}\nfunction applyBindingsObject(el, obj, original) {\n  let cleanupRunners = [];\n  while (cleanupRunners.length)\n    cleanupRunners.pop()();\n  let attributes = Object.entries(obj).map(([name, value]) => ({name, value}));\n  let staticAttributes = attributesOnly(attributes);\n  attributes = attributes.map((attribute) => {\n    if (staticAttributes.find((attr) => attr.name === attribute.name)) {\n      return {\n        name: `x-bind:${attribute.name}`,\n        value: `\"${attribute.value}\"`\n      };\n    }\n    return attribute;\n  });\n  directives(el, attributes, original).map((handle) => {\n    cleanupRunners.push(handle.runCleanups);\n    handle();\n  });\n}\n\n// packages/alpinejs/src/datas.js\nvar datas = {};\nfunction data(name, callback) {\n  datas[name] = callback;\n}\nfunction injectDataProviders(obj, context) {\n  Object.entries(datas).forEach(([name, callback]) => {\n    Object.defineProperty(obj, name, {\n      get() {\n        return (...args) => {\n          return callback.bind(context)(...args);\n        };\n      },\n      enumerable: false\n    });\n  });\n  return obj;\n}\n\n// packages/alpinejs/src/alpine.js\nvar Alpine = {\n  get reactive() {\n    return reactive;\n  },\n  get release() {\n    return release;\n  },\n  get effect() {\n    return effect;\n  },\n  get raw() {\n    return raw;\n  },\n  version: \"3.12.3\",\n  flushAndStopDeferringMutations,\n  dontAutoEvaluateFunctions,\n  disableEffectScheduling,\n  startObservingMutations,\n  stopObservingMutations,\n  setReactivityEngine,\n  closestDataStack,\n  skipDuringClone,\n  onlyDuringClone,\n  addRootSelector,\n  addInitSelector,\n  addScopeToNode,\n  deferMutations,\n  mapAttributes,\n  evaluateLater,\n  interceptInit,\n  setEvaluator,\n  mergeProxies,\n  extractProp,\n  findClosest,\n  closestRoot,\n  destroyTree,\n  interceptor,\n  transition,\n  setStyles,\n  mutateDom,\n  directive,\n  throttle,\n  debounce,\n  evaluate,\n  initTree,\n  nextTick,\n  prefixed: prefix,\n  prefix: setPrefix,\n  plugin,\n  magic,\n  store,\n  start,\n  clone,\n  bound: getBinding,\n  $data: scope,\n  walk,\n  data,\n  bind: bind2\n};\nvar alpine_default = Alpine;\n\n// node_modules/@vue/shared/dist/shared.esm-bundler.js\nfunction makeMap(str, expectsLowerCase) {\n  const map = Object.create(null);\n  const list = str.split(\",\");\n  for (let i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase ? (val) => !!map[val.toLowerCase()] : (val) => !!map[val];\n}\nvar PatchFlagNames = {\n  [1]: `TEXT`,\n  [2]: `CLASS`,\n  [4]: `STYLE`,\n  [8]: `PROPS`,\n  [16]: `FULL_PROPS`,\n  [32]: `HYDRATE_EVENTS`,\n  [64]: `STABLE_FRAGMENT`,\n  [128]: `KEYED_FRAGMENT`,\n  [256]: `UNKEYED_FRAGMENT`,\n  [512]: `NEED_PATCH`,\n  [1024]: `DYNAMIC_SLOTS`,\n  [2048]: `DEV_ROOT_FRAGMENT`,\n  [-1]: `HOISTED`,\n  [-2]: `BAIL`\n};\nvar slotFlagsText = {\n  [1]: \"STABLE\",\n  [2]: \"DYNAMIC\",\n  [3]: \"FORWARDED\"\n};\nvar specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;\nvar isBooleanAttr2 = /* @__PURE__ */ makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`);\nvar EMPTY_OBJ =  true ? Object.freeze({}) : 0;\nvar EMPTY_ARR =  true ? Object.freeze([]) : 0;\nvar extend = Object.assign;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar hasOwn = (val, key) => hasOwnProperty.call(val, key);\nvar isArray = Array.isArray;\nvar isMap = (val) => toTypeString(val) === \"[object Map]\";\nvar isString = (val) => typeof val === \"string\";\nvar isSymbol = (val) => typeof val === \"symbol\";\nvar isObject = (val) => val !== null && typeof val === \"object\";\nvar objectToString = Object.prototype.toString;\nvar toTypeString = (value) => objectToString.call(value);\nvar toRawType = (value) => {\n  return toTypeString(value).slice(8, -1);\n};\nvar isIntegerKey = (key) => isString(key) && key !== \"NaN\" && key[0] !== \"-\" && \"\" + parseInt(key, 10) === key;\nvar cacheStringFunction = (fn) => {\n  const cache = Object.create(null);\n  return (str) => {\n    const hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n};\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cacheStringFunction((str) => {\n  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : \"\");\n});\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, \"-$1\").toLowerCase());\nvar capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));\nvar toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize(str)}` : ``);\nvar hasChanged = (value, oldValue) => value !== oldValue && (value === value || oldValue === oldValue);\n\n// node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\nvar targetMap = new WeakMap();\nvar effectStack = [];\nvar activeEffect;\nvar ITERATE_KEY = Symbol( true ? \"iterate\" : 0);\nvar MAP_KEY_ITERATE_KEY = Symbol( true ? \"Map key iterate\" : 0);\nfunction isEffect(fn) {\n  return fn && fn._isEffect === true;\n}\nfunction effect2(fn, options = EMPTY_OBJ) {\n  if (isEffect(fn)) {\n    fn = fn.raw;\n  }\n  const effect3 = createReactiveEffect(fn, options);\n  if (!options.lazy) {\n    effect3();\n  }\n  return effect3;\n}\nfunction stop(effect3) {\n  if (effect3.active) {\n    cleanup(effect3);\n    if (effect3.options.onStop) {\n      effect3.options.onStop();\n    }\n    effect3.active = false;\n  }\n}\nvar uid = 0;\nfunction createReactiveEffect(fn, options) {\n  const effect3 = function reactiveEffect() {\n    if (!effect3.active) {\n      return fn();\n    }\n    if (!effectStack.includes(effect3)) {\n      cleanup(effect3);\n      try {\n        enableTracking();\n        effectStack.push(effect3);\n        activeEffect = effect3;\n        return fn();\n      } finally {\n        effectStack.pop();\n        resetTracking();\n        activeEffect = effectStack[effectStack.length - 1];\n      }\n    }\n  };\n  effect3.id = uid++;\n  effect3.allowRecurse = !!options.allowRecurse;\n  effect3._isEffect = true;\n  effect3.active = true;\n  effect3.raw = fn;\n  effect3.deps = [];\n  effect3.options = options;\n  return effect3;\n}\nfunction cleanup(effect3) {\n  const {deps} = effect3;\n  if (deps.length) {\n    for (let i = 0; i < deps.length; i++) {\n      deps[i].delete(effect3);\n    }\n    deps.length = 0;\n  }\n}\nvar shouldTrack = true;\nvar trackStack = [];\nfunction pauseTracking() {\n  trackStack.push(shouldTrack);\n  shouldTrack = false;\n}\nfunction enableTracking() {\n  trackStack.push(shouldTrack);\n  shouldTrack = true;\n}\nfunction resetTracking() {\n  const last = trackStack.pop();\n  shouldTrack = last === void 0 ? true : last;\n}\nfunction track(target, type, key) {\n  if (!shouldTrack || activeEffect === void 0) {\n    return;\n  }\n  let depsMap = targetMap.get(target);\n  if (!depsMap) {\n    targetMap.set(target, depsMap = new Map());\n  }\n  let dep = depsMap.get(key);\n  if (!dep) {\n    depsMap.set(key, dep = new Set());\n  }\n  if (!dep.has(activeEffect)) {\n    dep.add(activeEffect);\n    activeEffect.deps.push(dep);\n    if (activeEffect.options.onTrack) {\n      activeEffect.options.onTrack({\n        effect: activeEffect,\n        target,\n        type,\n        key\n      });\n    }\n  }\n}\nfunction trigger(target, type, key, newValue, oldValue, oldTarget) {\n  const depsMap = targetMap.get(target);\n  if (!depsMap) {\n    return;\n  }\n  const effects = new Set();\n  const add2 = (effectsToAdd) => {\n    if (effectsToAdd) {\n      effectsToAdd.forEach((effect3) => {\n        if (effect3 !== activeEffect || effect3.allowRecurse) {\n          effects.add(effect3);\n        }\n      });\n    }\n  };\n  if (type === \"clear\") {\n    depsMap.forEach(add2);\n  } else if (key === \"length\" && isArray(target)) {\n    depsMap.forEach((dep, key2) => {\n      if (key2 === \"length\" || key2 >= newValue) {\n        add2(dep);\n      }\n    });\n  } else {\n    if (key !== void 0) {\n      add2(depsMap.get(key));\n    }\n    switch (type) {\n      case \"add\":\n        if (!isArray(target)) {\n          add2(depsMap.get(ITERATE_KEY));\n          if (isMap(target)) {\n            add2(depsMap.get(MAP_KEY_ITERATE_KEY));\n          }\n        } else if (isIntegerKey(key)) {\n          add2(depsMap.get(\"length\"));\n        }\n        break;\n      case \"delete\":\n        if (!isArray(target)) {\n          add2(depsMap.get(ITERATE_KEY));\n          if (isMap(target)) {\n            add2(depsMap.get(MAP_KEY_ITERATE_KEY));\n          }\n        }\n        break;\n      case \"set\":\n        if (isMap(target)) {\n          add2(depsMap.get(ITERATE_KEY));\n        }\n        break;\n    }\n  }\n  const run = (effect3) => {\n    if (effect3.options.onTrigger) {\n      effect3.options.onTrigger({\n        effect: effect3,\n        target,\n        key,\n        type,\n        newValue,\n        oldValue,\n        oldTarget\n      });\n    }\n    if (effect3.options.scheduler) {\n      effect3.options.scheduler(effect3);\n    } else {\n      effect3();\n    }\n  };\n  effects.forEach(run);\n}\nvar isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);\nvar builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map((key) => Symbol[key]).filter(isSymbol));\nvar get2 = /* @__PURE__ */ createGetter();\nvar shallowGet = /* @__PURE__ */ createGetter(false, true);\nvar readonlyGet = /* @__PURE__ */ createGetter(true);\nvar shallowReadonlyGet = /* @__PURE__ */ createGetter(true, true);\nvar arrayInstrumentations = {};\n[\"includes\", \"indexOf\", \"lastIndexOf\"].forEach((key) => {\n  const method = Array.prototype[key];\n  arrayInstrumentations[key] = function(...args) {\n    const arr = toRaw(this);\n    for (let i = 0, l = this.length; i < l; i++) {\n      track(arr, \"get\", i + \"\");\n    }\n    const res = method.apply(arr, args);\n    if (res === -1 || res === false) {\n      return method.apply(arr, args.map(toRaw));\n    } else {\n      return res;\n    }\n  };\n});\n[\"push\", \"pop\", \"shift\", \"unshift\", \"splice\"].forEach((key) => {\n  const method = Array.prototype[key];\n  arrayInstrumentations[key] = function(...args) {\n    pauseTracking();\n    const res = method.apply(this, args);\n    resetTracking();\n    return res;\n  };\n});\nfunction createGetter(isReadonly = false, shallow = false) {\n  return function get3(target, key, receiver) {\n    if (key === \"__v_isReactive\") {\n      return !isReadonly;\n    } else if (key === \"__v_isReadonly\") {\n      return isReadonly;\n    } else if (key === \"__v_raw\" && receiver === (isReadonly ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {\n      return target;\n    }\n    const targetIsArray = isArray(target);\n    if (!isReadonly && targetIsArray && hasOwn(arrayInstrumentations, key)) {\n      return Reflect.get(arrayInstrumentations, key, receiver);\n    }\n    const res = Reflect.get(target, key, receiver);\n    if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {\n      return res;\n    }\n    if (!isReadonly) {\n      track(target, \"get\", key);\n    }\n    if (shallow) {\n      return res;\n    }\n    if (isRef(res)) {\n      const shouldUnwrap = !targetIsArray || !isIntegerKey(key);\n      return shouldUnwrap ? res.value : res;\n    }\n    if (isObject(res)) {\n      return isReadonly ? readonly(res) : reactive2(res);\n    }\n    return res;\n  };\n}\nvar set2 = /* @__PURE__ */ createSetter();\nvar shallowSet = /* @__PURE__ */ createSetter(true);\nfunction createSetter(shallow = false) {\n  return function set3(target, key, value, receiver) {\n    let oldValue = target[key];\n    if (!shallow) {\n      value = toRaw(value);\n      oldValue = toRaw(oldValue);\n      if (!isArray(target) && isRef(oldValue) && !isRef(value)) {\n        oldValue.value = value;\n        return true;\n      }\n    }\n    const hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);\n    const result = Reflect.set(target, key, value, receiver);\n    if (target === toRaw(receiver)) {\n      if (!hadKey) {\n        trigger(target, \"add\", key, value);\n      } else if (hasChanged(value, oldValue)) {\n        trigger(target, \"set\", key, value, oldValue);\n      }\n    }\n    return result;\n  };\n}\nfunction deleteProperty(target, key) {\n  const hadKey = hasOwn(target, key);\n  const oldValue = target[key];\n  const result = Reflect.deleteProperty(target, key);\n  if (result && hadKey) {\n    trigger(target, \"delete\", key, void 0, oldValue);\n  }\n  return result;\n}\nfunction has(target, key) {\n  const result = Reflect.has(target, key);\n  if (!isSymbol(key) || !builtInSymbols.has(key)) {\n    track(target, \"has\", key);\n  }\n  return result;\n}\nfunction ownKeys(target) {\n  track(target, \"iterate\", isArray(target) ? \"length\" : ITERATE_KEY);\n  return Reflect.ownKeys(target);\n}\nvar mutableHandlers = {\n  get: get2,\n  set: set2,\n  deleteProperty,\n  has,\n  ownKeys\n};\nvar readonlyHandlers = {\n  get: readonlyGet,\n  set(target, key) {\n    if (true) {\n      console.warn(`Set operation on key \"${String(key)}\" failed: target is readonly.`, target);\n    }\n    return true;\n  },\n  deleteProperty(target, key) {\n    if (true) {\n      console.warn(`Delete operation on key \"${String(key)}\" failed: target is readonly.`, target);\n    }\n    return true;\n  }\n};\nvar shallowReactiveHandlers = extend({}, mutableHandlers, {\n  get: shallowGet,\n  set: shallowSet\n});\nvar shallowReadonlyHandlers = extend({}, readonlyHandlers, {\n  get: shallowReadonlyGet\n});\nvar toReactive = (value) => isObject(value) ? reactive2(value) : value;\nvar toReadonly = (value) => isObject(value) ? readonly(value) : value;\nvar toShallow = (value) => value;\nvar getProto = (v) => Reflect.getPrototypeOf(v);\nfunction get$1(target, key, isReadonly = false, isShallow = false) {\n  target = target[\"__v_raw\"];\n  const rawTarget = toRaw(target);\n  const rawKey = toRaw(key);\n  if (key !== rawKey) {\n    !isReadonly && track(rawTarget, \"get\", key);\n  }\n  !isReadonly && track(rawTarget, \"get\", rawKey);\n  const {has: has2} = getProto(rawTarget);\n  const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\n  if (has2.call(rawTarget, key)) {\n    return wrap(target.get(key));\n  } else if (has2.call(rawTarget, rawKey)) {\n    return wrap(target.get(rawKey));\n  } else if (target !== rawTarget) {\n    target.get(key);\n  }\n}\nfunction has$1(key, isReadonly = false) {\n  const target = this[\"__v_raw\"];\n  const rawTarget = toRaw(target);\n  const rawKey = toRaw(key);\n  if (key !== rawKey) {\n    !isReadonly && track(rawTarget, \"has\", key);\n  }\n  !isReadonly && track(rawTarget, \"has\", rawKey);\n  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);\n}\nfunction size(target, isReadonly = false) {\n  target = target[\"__v_raw\"];\n  !isReadonly && track(toRaw(target), \"iterate\", ITERATE_KEY);\n  return Reflect.get(target, \"size\", target);\n}\nfunction add(value) {\n  value = toRaw(value);\n  const target = toRaw(this);\n  const proto = getProto(target);\n  const hadKey = proto.has.call(target, value);\n  if (!hadKey) {\n    target.add(value);\n    trigger(target, \"add\", value, value);\n  }\n  return this;\n}\nfunction set$1(key, value) {\n  value = toRaw(value);\n  const target = toRaw(this);\n  const {has: has2, get: get3} = getProto(target);\n  let hadKey = has2.call(target, key);\n  if (!hadKey) {\n    key = toRaw(key);\n    hadKey = has2.call(target, key);\n  } else if (true) {\n    checkIdentityKeys(target, has2, key);\n  }\n  const oldValue = get3.call(target, key);\n  target.set(key, value);\n  if (!hadKey) {\n    trigger(target, \"add\", key, value);\n  } else if (hasChanged(value, oldValue)) {\n    trigger(target, \"set\", key, value, oldValue);\n  }\n  return this;\n}\nfunction deleteEntry(key) {\n  const target = toRaw(this);\n  const {has: has2, get: get3} = getProto(target);\n  let hadKey = has2.call(target, key);\n  if (!hadKey) {\n    key = toRaw(key);\n    hadKey = has2.call(target, key);\n  } else if (true) {\n    checkIdentityKeys(target, has2, key);\n  }\n  const oldValue = get3 ? get3.call(target, key) : void 0;\n  const result = target.delete(key);\n  if (hadKey) {\n    trigger(target, \"delete\", key, void 0, oldValue);\n  }\n  return result;\n}\nfunction clear() {\n  const target = toRaw(this);\n  const hadItems = target.size !== 0;\n  const oldTarget =  true ? isMap(target) ? new Map(target) : new Set(target) : 0;\n  const result = target.clear();\n  if (hadItems) {\n    trigger(target, \"clear\", void 0, void 0, oldTarget);\n  }\n  return result;\n}\nfunction createForEach(isReadonly, isShallow) {\n  return function forEach(callback, thisArg) {\n    const observed = this;\n    const target = observed[\"__v_raw\"];\n    const rawTarget = toRaw(target);\n    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\n    !isReadonly && track(rawTarget, \"iterate\", ITERATE_KEY);\n    return target.forEach((value, key) => {\n      return callback.call(thisArg, wrap(value), wrap(key), observed);\n    });\n  };\n}\nfunction createIterableMethod(method, isReadonly, isShallow) {\n  return function(...args) {\n    const target = this[\"__v_raw\"];\n    const rawTarget = toRaw(target);\n    const targetIsMap = isMap(rawTarget);\n    const isPair = method === \"entries\" || method === Symbol.iterator && targetIsMap;\n    const isKeyOnly = method === \"keys\" && targetIsMap;\n    const innerIterator = target[method](...args);\n    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\n    !isReadonly && track(rawTarget, \"iterate\", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);\n    return {\n      next() {\n        const {value, done} = innerIterator.next();\n        return done ? {value, done} : {\n          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),\n          done\n        };\n      },\n      [Symbol.iterator]() {\n        return this;\n      }\n    };\n  };\n}\nfunction createReadonlyMethod(type) {\n  return function(...args) {\n    if (true) {\n      const key = args[0] ? `on key \"${args[0]}\" ` : ``;\n      console.warn(`${capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));\n    }\n    return type === \"delete\" ? false : this;\n  };\n}\nvar mutableInstrumentations = {\n  get(key) {\n    return get$1(this, key);\n  },\n  get size() {\n    return size(this);\n  },\n  has: has$1,\n  add,\n  set: set$1,\n  delete: deleteEntry,\n  clear,\n  forEach: createForEach(false, false)\n};\nvar shallowInstrumentations = {\n  get(key) {\n    return get$1(this, key, false, true);\n  },\n  get size() {\n    return size(this);\n  },\n  has: has$1,\n  add,\n  set: set$1,\n  delete: deleteEntry,\n  clear,\n  forEach: createForEach(false, true)\n};\nvar readonlyInstrumentations = {\n  get(key) {\n    return get$1(this, key, true);\n  },\n  get size() {\n    return size(this, true);\n  },\n  has(key) {\n    return has$1.call(this, key, true);\n  },\n  add: createReadonlyMethod(\"add\"),\n  set: createReadonlyMethod(\"set\"),\n  delete: createReadonlyMethod(\"delete\"),\n  clear: createReadonlyMethod(\"clear\"),\n  forEach: createForEach(true, false)\n};\nvar shallowReadonlyInstrumentations = {\n  get(key) {\n    return get$1(this, key, true, true);\n  },\n  get size() {\n    return size(this, true);\n  },\n  has(key) {\n    return has$1.call(this, key, true);\n  },\n  add: createReadonlyMethod(\"add\"),\n  set: createReadonlyMethod(\"set\"),\n  delete: createReadonlyMethod(\"delete\"),\n  clear: createReadonlyMethod(\"clear\"),\n  forEach: createForEach(true, true)\n};\nvar iteratorMethods = [\"keys\", \"values\", \"entries\", Symbol.iterator];\niteratorMethods.forEach((method) => {\n  mutableInstrumentations[method] = createIterableMethod(method, false, false);\n  readonlyInstrumentations[method] = createIterableMethod(method, true, false);\n  shallowInstrumentations[method] = createIterableMethod(method, false, true);\n  shallowReadonlyInstrumentations[method] = createIterableMethod(method, true, true);\n});\nfunction createInstrumentationGetter(isReadonly, shallow) {\n  const instrumentations = shallow ? isReadonly ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly ? readonlyInstrumentations : mutableInstrumentations;\n  return (target, key, receiver) => {\n    if (key === \"__v_isReactive\") {\n      return !isReadonly;\n    } else if (key === \"__v_isReadonly\") {\n      return isReadonly;\n    } else if (key === \"__v_raw\") {\n      return target;\n    }\n    return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);\n  };\n}\nvar mutableCollectionHandlers = {\n  get: createInstrumentationGetter(false, false)\n};\nvar shallowCollectionHandlers = {\n  get: createInstrumentationGetter(false, true)\n};\nvar readonlyCollectionHandlers = {\n  get: createInstrumentationGetter(true, false)\n};\nvar shallowReadonlyCollectionHandlers = {\n  get: createInstrumentationGetter(true, true)\n};\nfunction checkIdentityKeys(target, has2, key) {\n  const rawKey = toRaw(key);\n  if (rawKey !== key && has2.call(target, rawKey)) {\n    const type = toRawType(target);\n    console.warn(`Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`);\n  }\n}\nvar reactiveMap = new WeakMap();\nvar shallowReactiveMap = new WeakMap();\nvar readonlyMap = new WeakMap();\nvar shallowReadonlyMap = new WeakMap();\nfunction targetTypeMap(rawType) {\n  switch (rawType) {\n    case \"Object\":\n    case \"Array\":\n      return 1;\n    case \"Map\":\n    case \"Set\":\n    case \"WeakMap\":\n    case \"WeakSet\":\n      return 2;\n    default:\n      return 0;\n  }\n}\nfunction getTargetType(value) {\n  return value[\"__v_skip\"] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));\n}\nfunction reactive2(target) {\n  if (target && target[\"__v_isReadonly\"]) {\n    return target;\n  }\n  return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);\n}\nfunction readonly(target) {\n  return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);\n}\nfunction createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers, proxyMap) {\n  if (!isObject(target)) {\n    if (true) {\n      console.warn(`value cannot be made reactive: ${String(target)}`);\n    }\n    return target;\n  }\n  if (target[\"__v_raw\"] && !(isReadonly && target[\"__v_isReactive\"])) {\n    return target;\n  }\n  const existingProxy = proxyMap.get(target);\n  if (existingProxy) {\n    return existingProxy;\n  }\n  const targetType = getTargetType(target);\n  if (targetType === 0) {\n    return target;\n  }\n  const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);\n  proxyMap.set(target, proxy);\n  return proxy;\n}\nfunction toRaw(observed) {\n  return observed && toRaw(observed[\"__v_raw\"]) || observed;\n}\nfunction isRef(r) {\n  return Boolean(r && r.__v_isRef === true);\n}\n\n// packages/alpinejs/src/magics/$nextTick.js\nmagic(\"nextTick\", () => nextTick);\n\n// packages/alpinejs/src/magics/$dispatch.js\nmagic(\"dispatch\", (el) => dispatch.bind(dispatch, el));\n\n// packages/alpinejs/src/magics/$watch.js\nmagic(\"watch\", (el, {evaluateLater: evaluateLater2, effect: effect3}) => (key, callback) => {\n  let evaluate2 = evaluateLater2(key);\n  let firstTime = true;\n  let oldValue;\n  let effectReference = effect3(() => evaluate2((value) => {\n    JSON.stringify(value);\n    if (!firstTime) {\n      queueMicrotask(() => {\n        callback(value, oldValue);\n        oldValue = value;\n      });\n    } else {\n      oldValue = value;\n    }\n    firstTime = false;\n  }));\n  el._x_effects.delete(effectReference);\n});\n\n// packages/alpinejs/src/magics/$store.js\nmagic(\"store\", getStores);\n\n// packages/alpinejs/src/magics/$data.js\nmagic(\"data\", (el) => scope(el));\n\n// packages/alpinejs/src/magics/$root.js\nmagic(\"root\", (el) => closestRoot(el));\n\n// packages/alpinejs/src/magics/$refs.js\nmagic(\"refs\", (el) => {\n  if (el._x_refs_proxy)\n    return el._x_refs_proxy;\n  el._x_refs_proxy = mergeProxies(getArrayOfRefObject(el));\n  return el._x_refs_proxy;\n});\nfunction getArrayOfRefObject(el) {\n  let refObjects = [];\n  let currentEl = el;\n  while (currentEl) {\n    if (currentEl._x_refs)\n      refObjects.push(currentEl._x_refs);\n    currentEl = currentEl.parentNode;\n  }\n  return refObjects;\n}\n\n// packages/alpinejs/src/ids.js\nvar globalIdMemo = {};\nfunction findAndIncrementId(name) {\n  if (!globalIdMemo[name])\n    globalIdMemo[name] = 0;\n  return ++globalIdMemo[name];\n}\nfunction closestIdRoot(el, name) {\n  return findClosest(el, (element) => {\n    if (element._x_ids && element._x_ids[name])\n      return true;\n  });\n}\nfunction setIdRoot(el, name) {\n  if (!el._x_ids)\n    el._x_ids = {};\n  if (!el._x_ids[name])\n    el._x_ids[name] = findAndIncrementId(name);\n}\n\n// packages/alpinejs/src/magics/$id.js\nmagic(\"id\", (el) => (name, key = null) => {\n  let root = closestIdRoot(el, name);\n  let id = root ? root._x_ids[name] : findAndIncrementId(name);\n  return key ? `${name}-${id}-${key}` : `${name}-${id}`;\n});\n\n// packages/alpinejs/src/magics/$el.js\nmagic(\"el\", (el) => el);\n\n// packages/alpinejs/src/magics/index.js\nwarnMissingPluginMagic(\"Focus\", \"focus\", \"focus\");\nwarnMissingPluginMagic(\"Persist\", \"persist\", \"persist\");\nfunction warnMissingPluginMagic(name, magicName, slug) {\n  magic(magicName, (el) => warn(`You can't use [$${directiveName}] without first installing the \"${name}\" plugin here: https://alpinejs.dev/plugins/${slug}`, el));\n}\n\n// packages/alpinejs/src/entangle.js\nfunction entangle({get: outerGet, set: outerSet}, {get: innerGet, set: innerSet}) {\n  let firstRun = true;\n  let outerHash, innerHash, outerHashLatest, innerHashLatest;\n  let reference = effect(() => {\n    let outer, inner;\n    if (firstRun) {\n      outer = outerGet();\n      innerSet(outer);\n      inner = innerGet();\n      firstRun = false;\n    } else {\n      outer = outerGet();\n      inner = innerGet();\n      outerHashLatest = JSON.stringify(outer);\n      innerHashLatest = JSON.stringify(inner);\n      if (outerHashLatest !== outerHash) {\n        inner = innerGet();\n        innerSet(outer);\n        inner = outer;\n      } else {\n        outerSet(inner);\n        outer = inner;\n      }\n    }\n    outerHash = JSON.stringify(outer);\n    innerHash = JSON.stringify(inner);\n  });\n  return () => {\n    release(reference);\n  };\n}\n\n// packages/alpinejs/src/directives/x-modelable.js\ndirective(\"modelable\", (el, {expression}, {effect: effect3, evaluateLater: evaluateLater2, cleanup: cleanup2}) => {\n  let func = evaluateLater2(expression);\n  let innerGet = () => {\n    let result;\n    func((i) => result = i);\n    return result;\n  };\n  let evaluateInnerSet = evaluateLater2(`${expression} = __placeholder`);\n  let innerSet = (val) => evaluateInnerSet(() => {\n  }, {scope: {__placeholder: val}});\n  let initialValue = innerGet();\n  innerSet(initialValue);\n  queueMicrotask(() => {\n    if (!el._x_model)\n      return;\n    el._x_removeModelListeners[\"default\"]();\n    let outerGet = el._x_model.get;\n    let outerSet = el._x_model.set;\n    let releaseEntanglement = entangle({\n      get() {\n        return outerGet();\n      },\n      set(value) {\n        outerSet(value);\n      }\n    }, {\n      get() {\n        return innerGet();\n      },\n      set(value) {\n        innerSet(value);\n      }\n    });\n    cleanup2(releaseEntanglement);\n  });\n});\n\n// packages/alpinejs/src/directives/x-teleport.js\nvar teleportContainerDuringClone = document.createElement(\"div\");\ndirective(\"teleport\", (el, {modifiers, expression}, {cleanup: cleanup2}) => {\n  if (el.tagName.toLowerCase() !== \"template\")\n    warn(\"x-teleport can only be used on a <template> tag\", el);\n  let target = skipDuringClone(() => {\n    return document.querySelector(expression);\n  }, () => {\n    return teleportContainerDuringClone;\n  })();\n  if (!target)\n    warn(`Cannot find x-teleport element for selector: \"${expression}\"`);\n  let clone2 = el.content.cloneNode(true).firstElementChild;\n  el._x_teleport = clone2;\n  clone2._x_teleportBack = el;\n  if (el._x_forwardEvents) {\n    el._x_forwardEvents.forEach((eventName) => {\n      clone2.addEventListener(eventName, (e) => {\n        e.stopPropagation();\n        el.dispatchEvent(new e.constructor(e.type, e));\n      });\n    });\n  }\n  addScopeToNode(clone2, {}, el);\n  mutateDom(() => {\n    if (modifiers.includes(\"prepend\")) {\n      target.parentNode.insertBefore(clone2, target);\n    } else if (modifiers.includes(\"append\")) {\n      target.parentNode.insertBefore(clone2, target.nextSibling);\n    } else {\n      target.appendChild(clone2);\n    }\n    initTree(clone2);\n    clone2._x_ignore = true;\n  });\n  cleanup2(() => clone2.remove());\n});\n\n// packages/alpinejs/src/directives/x-ignore.js\nvar handler = () => {\n};\nhandler.inline = (el, {modifiers}, {cleanup: cleanup2}) => {\n  modifiers.includes(\"self\") ? el._x_ignoreSelf = true : el._x_ignore = true;\n  cleanup2(() => {\n    modifiers.includes(\"self\") ? delete el._x_ignoreSelf : delete el._x_ignore;\n  });\n};\ndirective(\"ignore\", handler);\n\n// packages/alpinejs/src/directives/x-effect.js\ndirective(\"effect\", (el, {expression}, {effect: effect3}) => effect3(evaluateLater(el, expression)));\n\n// packages/alpinejs/src/utils/on.js\nfunction on(el, event, modifiers, callback) {\n  let listenerTarget = el;\n  let handler4 = (e) => callback(e);\n  let options = {};\n  let wrapHandler = (callback2, wrapper) => (e) => wrapper(callback2, e);\n  if (modifiers.includes(\"dot\"))\n    event = dotSyntax(event);\n  if (modifiers.includes(\"camel\"))\n    event = camelCase2(event);\n  if (modifiers.includes(\"passive\"))\n    options.passive = true;\n  if (modifiers.includes(\"capture\"))\n    options.capture = true;\n  if (modifiers.includes(\"window\"))\n    listenerTarget = window;\n  if (modifiers.includes(\"document\"))\n    listenerTarget = document;\n  if (modifiers.includes(\"debounce\")) {\n    let nextModifier = modifiers[modifiers.indexOf(\"debounce\") + 1] || \"invalid-wait\";\n    let wait = isNumeric(nextModifier.split(\"ms\")[0]) ? Number(nextModifier.split(\"ms\")[0]) : 250;\n    handler4 = debounce(handler4, wait);\n  }\n  if (modifiers.includes(\"throttle\")) {\n    let nextModifier = modifiers[modifiers.indexOf(\"throttle\") + 1] || \"invalid-wait\";\n    let wait = isNumeric(nextModifier.split(\"ms\")[0]) ? Number(nextModifier.split(\"ms\")[0]) : 250;\n    handler4 = throttle(handler4, wait);\n  }\n  if (modifiers.includes(\"prevent\"))\n    handler4 = wrapHandler(handler4, (next, e) => {\n      e.preventDefault();\n      next(e);\n    });\n  if (modifiers.includes(\"stop\"))\n    handler4 = wrapHandler(handler4, (next, e) => {\n      e.stopPropagation();\n      next(e);\n    });\n  if (modifiers.includes(\"self\"))\n    handler4 = wrapHandler(handler4, (next, e) => {\n      e.target === el && next(e);\n    });\n  if (modifiers.includes(\"away\") || modifiers.includes(\"outside\")) {\n    listenerTarget = document;\n    handler4 = wrapHandler(handler4, (next, e) => {\n      if (el.contains(e.target))\n        return;\n      if (e.target.isConnected === false)\n        return;\n      if (el.offsetWidth < 1 && el.offsetHeight < 1)\n        return;\n      if (el._x_isShown === false)\n        return;\n      next(e);\n    });\n  }\n  if (modifiers.includes(\"once\")) {\n    handler4 = wrapHandler(handler4, (next, e) => {\n      next(e);\n      listenerTarget.removeEventListener(event, handler4, options);\n    });\n  }\n  handler4 = wrapHandler(handler4, (next, e) => {\n    if (isKeyEvent(event)) {\n      if (isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers)) {\n        return;\n      }\n    }\n    next(e);\n  });\n  listenerTarget.addEventListener(event, handler4, options);\n  return () => {\n    listenerTarget.removeEventListener(event, handler4, options);\n  };\n}\nfunction dotSyntax(subject) {\n  return subject.replace(/-/g, \".\");\n}\nfunction camelCase2(subject) {\n  return subject.toLowerCase().replace(/-(\\w)/g, (match, char) => char.toUpperCase());\n}\nfunction isNumeric(subject) {\n  return !Array.isArray(subject) && !isNaN(subject);\n}\nfunction kebabCase2(subject) {\n  if ([\" \", \"_\"].includes(subject))\n    return subject;\n  return subject.replace(/([a-z])([A-Z])/g, \"$1-$2\").replace(/[_\\s]/, \"-\").toLowerCase();\n}\nfunction isKeyEvent(event) {\n  return [\"keydown\", \"keyup\"].includes(event);\n}\nfunction isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers) {\n  let keyModifiers = modifiers.filter((i) => {\n    return ![\"window\", \"document\", \"prevent\", \"stop\", \"once\", \"capture\"].includes(i);\n  });\n  if (keyModifiers.includes(\"debounce\")) {\n    let debounceIndex = keyModifiers.indexOf(\"debounce\");\n    keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || \"invalid-wait\").split(\"ms\")[0]) ? 2 : 1);\n  }\n  if (keyModifiers.includes(\"throttle\")) {\n    let debounceIndex = keyModifiers.indexOf(\"throttle\");\n    keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || \"invalid-wait\").split(\"ms\")[0]) ? 2 : 1);\n  }\n  if (keyModifiers.length === 0)\n    return false;\n  if (keyModifiers.length === 1 && keyToModifiers(e.key).includes(keyModifiers[0]))\n    return false;\n  const systemKeyModifiers = [\"ctrl\", \"shift\", \"alt\", \"meta\", \"cmd\", \"super\"];\n  const selectedSystemKeyModifiers = systemKeyModifiers.filter((modifier) => keyModifiers.includes(modifier));\n  keyModifiers = keyModifiers.filter((i) => !selectedSystemKeyModifiers.includes(i));\n  if (selectedSystemKeyModifiers.length > 0) {\n    const activelyPressedKeyModifiers = selectedSystemKeyModifiers.filter((modifier) => {\n      if (modifier === \"cmd\" || modifier === \"super\")\n        modifier = \"meta\";\n      return e[`${modifier}Key`];\n    });\n    if (activelyPressedKeyModifiers.length === selectedSystemKeyModifiers.length) {\n      if (keyToModifiers(e.key).includes(keyModifiers[0]))\n        return false;\n    }\n  }\n  return true;\n}\nfunction keyToModifiers(key) {\n  if (!key)\n    return [];\n  key = kebabCase2(key);\n  let modifierToKeyMap = {\n    ctrl: \"control\",\n    slash: \"/\",\n    space: \" \",\n    spacebar: \" \",\n    cmd: \"meta\",\n    esc: \"escape\",\n    up: \"arrow-up\",\n    down: \"arrow-down\",\n    left: \"arrow-left\",\n    right: \"arrow-right\",\n    period: \".\",\n    equal: \"=\",\n    minus: \"-\",\n    underscore: \"_\"\n  };\n  modifierToKeyMap[key] = key;\n  return Object.keys(modifierToKeyMap).map((modifier) => {\n    if (modifierToKeyMap[modifier] === key)\n      return modifier;\n  }).filter((modifier) => modifier);\n}\n\n// packages/alpinejs/src/directives/x-model.js\ndirective(\"model\", (el, {modifiers, expression}, {effect: effect3, cleanup: cleanup2}) => {\n  let scopeTarget = el;\n  if (modifiers.includes(\"parent\")) {\n    scopeTarget = el.parentNode;\n  }\n  let evaluateGet = evaluateLater(scopeTarget, expression);\n  let evaluateSet;\n  if (typeof expression === \"string\") {\n    evaluateSet = evaluateLater(scopeTarget, `${expression} = __placeholder`);\n  } else if (typeof expression === \"function\" && typeof expression() === \"string\") {\n    evaluateSet = evaluateLater(scopeTarget, `${expression()} = __placeholder`);\n  } else {\n    evaluateSet = () => {\n    };\n  }\n  let getValue = () => {\n    let result;\n    evaluateGet((value) => result = value);\n    return isGetterSetter(result) ? result.get() : result;\n  };\n  let setValue = (value) => {\n    let result;\n    evaluateGet((value2) => result = value2);\n    if (isGetterSetter(result)) {\n      result.set(value);\n    } else {\n      evaluateSet(() => {\n      }, {\n        scope: {__placeholder: value}\n      });\n    }\n  };\n  if (typeof expression === \"string\" && el.type === \"radio\") {\n    mutateDom(() => {\n      if (!el.hasAttribute(\"name\"))\n        el.setAttribute(\"name\", expression);\n    });\n  }\n  var event = el.tagName.toLowerCase() === \"select\" || [\"checkbox\", \"radio\"].includes(el.type) || modifiers.includes(\"lazy\") ? \"change\" : \"input\";\n  let removeListener = isCloning ? () => {\n  } : on(el, event, modifiers, (e) => {\n    setValue(getInputValue(el, modifiers, e, getValue()));\n  });\n  if (modifiers.includes(\"fill\") && [null, \"\"].includes(getValue())) {\n    el.dispatchEvent(new Event(event, {}));\n  }\n  if (!el._x_removeModelListeners)\n    el._x_removeModelListeners = {};\n  el._x_removeModelListeners[\"default\"] = removeListener;\n  cleanup2(() => el._x_removeModelListeners[\"default\"]());\n  if (el.form) {\n    let removeResetListener = on(el.form, \"reset\", [], (e) => {\n      nextTick(() => el._x_model && el._x_model.set(el.value));\n    });\n    cleanup2(() => removeResetListener());\n  }\n  el._x_model = {\n    get() {\n      return getValue();\n    },\n    set(value) {\n      setValue(value);\n    }\n  };\n  el._x_forceModelUpdate = (value) => {\n    value = value === void 0 ? getValue() : value;\n    if (value === void 0 && typeof expression === \"string\" && expression.match(/\\./))\n      value = \"\";\n    window.fromModel = true;\n    mutateDom(() => bind(el, \"value\", value));\n    delete window.fromModel;\n  };\n  effect3(() => {\n    let value = getValue();\n    if (modifiers.includes(\"unintrusive\") && document.activeElement.isSameNode(el))\n      return;\n    el._x_forceModelUpdate(value);\n  });\n});\nfunction getInputValue(el, modifiers, event, currentValue) {\n  return mutateDom(() => {\n    if (event instanceof CustomEvent && event.detail !== void 0)\n      return event.detail ?? event.target.value;\n    else if (el.type === \"checkbox\") {\n      if (Array.isArray(currentValue)) {\n        let newValue = modifiers.includes(\"number\") ? safeParseNumber(event.target.value) : event.target.value;\n        return event.target.checked ? currentValue.concat([newValue]) : currentValue.filter((el2) => !checkedAttrLooseCompare2(el2, newValue));\n      } else {\n        return event.target.checked;\n      }\n    } else if (el.tagName.toLowerCase() === \"select\" && el.multiple) {\n      return modifiers.includes(\"number\") ? Array.from(event.target.selectedOptions).map((option) => {\n        let rawValue = option.value || option.text;\n        return safeParseNumber(rawValue);\n      }) : Array.from(event.target.selectedOptions).map((option) => {\n        return option.value || option.text;\n      });\n    } else {\n      let rawValue = event.target.value;\n      return modifiers.includes(\"number\") ? safeParseNumber(rawValue) : modifiers.includes(\"trim\") ? rawValue.trim() : rawValue;\n    }\n  });\n}\nfunction safeParseNumber(rawValue) {\n  let number = rawValue ? parseFloat(rawValue) : null;\n  return isNumeric2(number) ? number : rawValue;\n}\nfunction checkedAttrLooseCompare2(valueA, valueB) {\n  return valueA == valueB;\n}\nfunction isNumeric2(subject) {\n  return !Array.isArray(subject) && !isNaN(subject);\n}\nfunction isGetterSetter(value) {\n  return value !== null && typeof value === \"object\" && typeof value.get === \"function\" && typeof value.set === \"function\";\n}\n\n// packages/alpinejs/src/directives/x-cloak.js\ndirective(\"cloak\", (el) => queueMicrotask(() => mutateDom(() => el.removeAttribute(prefix(\"cloak\")))));\n\n// packages/alpinejs/src/directives/x-init.js\naddInitSelector(() => `[${prefix(\"init\")}]`);\ndirective(\"init\", skipDuringClone((el, {expression}, {evaluate: evaluate2}) => {\n  if (typeof expression === \"string\") {\n    return !!expression.trim() && evaluate2(expression, {}, false);\n  }\n  return evaluate2(expression, {}, false);\n}));\n\n// packages/alpinejs/src/directives/x-text.js\ndirective(\"text\", (el, {expression}, {effect: effect3, evaluateLater: evaluateLater2}) => {\n  let evaluate2 = evaluateLater2(expression);\n  effect3(() => {\n    evaluate2((value) => {\n      mutateDom(() => {\n        el.textContent = value;\n      });\n    });\n  });\n});\n\n// packages/alpinejs/src/directives/x-html.js\ndirective(\"html\", (el, {expression}, {effect: effect3, evaluateLater: evaluateLater2}) => {\n  let evaluate2 = evaluateLater2(expression);\n  effect3(() => {\n    evaluate2((value) => {\n      mutateDom(() => {\n        el.innerHTML = value;\n        el._x_ignoreSelf = true;\n        initTree(el);\n        delete el._x_ignoreSelf;\n      });\n    });\n  });\n});\n\n// packages/alpinejs/src/directives/x-bind.js\nmapAttributes(startingWith(\":\", into(prefix(\"bind:\"))));\nvar handler2 = (el, {value, modifiers, expression, original}, {effect: effect3}) => {\n  if (!value) {\n    let bindingProviders = {};\n    injectBindingProviders(bindingProviders);\n    let getBindings = evaluateLater(el, expression);\n    getBindings((bindings) => {\n      applyBindingsObject(el, bindings, original);\n    }, {scope: bindingProviders});\n    return;\n  }\n  if (value === \"key\")\n    return storeKeyForXFor(el, expression);\n  if (el._x_inlineBindings && el._x_inlineBindings[value] && el._x_inlineBindings[value].extract) {\n    return;\n  }\n  let evaluate2 = evaluateLater(el, expression);\n  effect3(() => evaluate2((result) => {\n    if (result === void 0 && typeof expression === \"string\" && expression.match(/\\./)) {\n      result = \"\";\n    }\n    mutateDom(() => bind(el, value, result, modifiers));\n  }));\n};\nhandler2.inline = (el, {value, modifiers, expression}) => {\n  if (!value)\n    return;\n  if (!el._x_inlineBindings)\n    el._x_inlineBindings = {};\n  el._x_inlineBindings[value] = {expression, extract: false};\n};\ndirective(\"bind\", handler2);\nfunction storeKeyForXFor(el, expression) {\n  el._x_keyExpression = expression;\n}\n\n// packages/alpinejs/src/directives/x-data.js\naddRootSelector(() => `[${prefix(\"data\")}]`);\ndirective(\"data\", skipDuringClone((el, {expression}, {cleanup: cleanup2}) => {\n  expression = expression === \"\" ? \"{}\" : expression;\n  let magicContext = {};\n  injectMagics(magicContext, el);\n  let dataProviderContext = {};\n  injectDataProviders(dataProviderContext, magicContext);\n  let data2 = evaluate(el, expression, {scope: dataProviderContext});\n  if (data2 === void 0 || data2 === true)\n    data2 = {};\n  injectMagics(data2, el);\n  let reactiveData = reactive(data2);\n  initInterceptors(reactiveData);\n  let undo = addScopeToNode(el, reactiveData);\n  reactiveData[\"init\"] && evaluate(el, reactiveData[\"init\"]);\n  cleanup2(() => {\n    reactiveData[\"destroy\"] && evaluate(el, reactiveData[\"destroy\"]);\n    undo();\n  });\n}));\n\n// packages/alpinejs/src/directives/x-show.js\ndirective(\"show\", (el, {modifiers, expression}, {effect: effect3}) => {\n  let evaluate2 = evaluateLater(el, expression);\n  if (!el._x_doHide)\n    el._x_doHide = () => {\n      mutateDom(() => {\n        el.style.setProperty(\"display\", \"none\", modifiers.includes(\"important\") ? \"important\" : void 0);\n      });\n    };\n  if (!el._x_doShow)\n    el._x_doShow = () => {\n      mutateDom(() => {\n        if (el.style.length === 1 && el.style.display === \"none\") {\n          el.removeAttribute(\"style\");\n        } else {\n          el.style.removeProperty(\"display\");\n        }\n      });\n    };\n  let hide = () => {\n    el._x_doHide();\n    el._x_isShown = false;\n  };\n  let show = () => {\n    el._x_doShow();\n    el._x_isShown = true;\n  };\n  let clickAwayCompatibleShow = () => setTimeout(show);\n  let toggle = once((value) => value ? show() : hide(), (value) => {\n    if (typeof el._x_toggleAndCascadeWithTransitions === \"function\") {\n      el._x_toggleAndCascadeWithTransitions(el, value, show, hide);\n    } else {\n      value ? clickAwayCompatibleShow() : hide();\n    }\n  });\n  let oldValue;\n  let firstTime = true;\n  effect3(() => evaluate2((value) => {\n    if (!firstTime && value === oldValue)\n      return;\n    if (modifiers.includes(\"immediate\"))\n      value ? clickAwayCompatibleShow() : hide();\n    toggle(value);\n    oldValue = value;\n    firstTime = false;\n  }));\n});\n\n// packages/alpinejs/src/directives/x-for.js\ndirective(\"for\", (el, {expression}, {effect: effect3, cleanup: cleanup2}) => {\n  let iteratorNames = parseForExpression(expression);\n  let evaluateItems = evaluateLater(el, iteratorNames.items);\n  let evaluateKey = evaluateLater(el, el._x_keyExpression || \"index\");\n  el._x_prevKeys = [];\n  el._x_lookup = {};\n  effect3(() => loop(el, iteratorNames, evaluateItems, evaluateKey));\n  cleanup2(() => {\n    Object.values(el._x_lookup).forEach((el2) => el2.remove());\n    delete el._x_prevKeys;\n    delete el._x_lookup;\n  });\n});\nfunction loop(el, iteratorNames, evaluateItems, evaluateKey) {\n  let isObject2 = (i) => typeof i === \"object\" && !Array.isArray(i);\n  let templateEl = el;\n  evaluateItems((items) => {\n    if (isNumeric3(items) && items >= 0) {\n      items = Array.from(Array(items).keys(), (i) => i + 1);\n    }\n    if (items === void 0)\n      items = [];\n    let lookup = el._x_lookup;\n    let prevKeys = el._x_prevKeys;\n    let scopes = [];\n    let keys = [];\n    if (isObject2(items)) {\n      items = Object.entries(items).map(([key, value]) => {\n        let scope2 = getIterationScopeVariables(iteratorNames, value, key, items);\n        evaluateKey((value2) => keys.push(value2), {scope: {index: key, ...scope2}});\n        scopes.push(scope2);\n      });\n    } else {\n      for (let i = 0; i < items.length; i++) {\n        let scope2 = getIterationScopeVariables(iteratorNames, items[i], i, items);\n        evaluateKey((value) => keys.push(value), {scope: {index: i, ...scope2}});\n        scopes.push(scope2);\n      }\n    }\n    let adds = [];\n    let moves = [];\n    let removes = [];\n    let sames = [];\n    for (let i = 0; i < prevKeys.length; i++) {\n      let key = prevKeys[i];\n      if (keys.indexOf(key) === -1)\n        removes.push(key);\n    }\n    prevKeys = prevKeys.filter((key) => !removes.includes(key));\n    let lastKey = \"template\";\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i];\n      let prevIndex = prevKeys.indexOf(key);\n      if (prevIndex === -1) {\n        prevKeys.splice(i, 0, key);\n        adds.push([lastKey, i]);\n      } else if (prevIndex !== i) {\n        let keyInSpot = prevKeys.splice(i, 1)[0];\n        let keyForSpot = prevKeys.splice(prevIndex - 1, 1)[0];\n        prevKeys.splice(i, 0, keyForSpot);\n        prevKeys.splice(prevIndex, 0, keyInSpot);\n        moves.push([keyInSpot, keyForSpot]);\n      } else {\n        sames.push(key);\n      }\n      lastKey = key;\n    }\n    for (let i = 0; i < removes.length; i++) {\n      let key = removes[i];\n      if (!!lookup[key]._x_effects) {\n        lookup[key]._x_effects.forEach(dequeueJob);\n      }\n      lookup[key].remove();\n      lookup[key] = null;\n      delete lookup[key];\n    }\n    for (let i = 0; i < moves.length; i++) {\n      let [keyInSpot, keyForSpot] = moves[i];\n      let elInSpot = lookup[keyInSpot];\n      let elForSpot = lookup[keyForSpot];\n      let marker = document.createElement(\"div\");\n      mutateDom(() => {\n        if (!elForSpot)\n          warn(`x-for \":key\" is undefined or invalid`, templateEl);\n        elForSpot.after(marker);\n        elInSpot.after(elForSpot);\n        elForSpot._x_currentIfEl && elForSpot.after(elForSpot._x_currentIfEl);\n        marker.before(elInSpot);\n        elInSpot._x_currentIfEl && elInSpot.after(elInSpot._x_currentIfEl);\n        marker.remove();\n      });\n      elForSpot._x_refreshXForScope(scopes[keys.indexOf(keyForSpot)]);\n    }\n    for (let i = 0; i < adds.length; i++) {\n      let [lastKey2, index] = adds[i];\n      let lastEl = lastKey2 === \"template\" ? templateEl : lookup[lastKey2];\n      if (lastEl._x_currentIfEl)\n        lastEl = lastEl._x_currentIfEl;\n      let scope2 = scopes[index];\n      let key = keys[index];\n      let clone2 = document.importNode(templateEl.content, true).firstElementChild;\n      let reactiveScope = reactive(scope2);\n      addScopeToNode(clone2, reactiveScope, templateEl);\n      clone2._x_refreshXForScope = (newScope) => {\n        Object.entries(newScope).forEach(([key2, value]) => {\n          reactiveScope[key2] = value;\n        });\n      };\n      mutateDom(() => {\n        lastEl.after(clone2);\n        initTree(clone2);\n      });\n      if (typeof key === \"object\") {\n        warn(\"x-for key cannot be an object, it must be a string or an integer\", templateEl);\n      }\n      lookup[key] = clone2;\n    }\n    for (let i = 0; i < sames.length; i++) {\n      lookup[sames[i]]._x_refreshXForScope(scopes[keys.indexOf(sames[i])]);\n    }\n    templateEl._x_prevKeys = keys;\n  });\n}\nfunction parseForExpression(expression) {\n  let forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\n  let stripParensRE = /^\\s*\\(|\\)\\s*$/g;\n  let forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\n  let inMatch = expression.match(forAliasRE);\n  if (!inMatch)\n    return;\n  let res = {};\n  res.items = inMatch[2].trim();\n  let item = inMatch[1].replace(stripParensRE, \"\").trim();\n  let iteratorMatch = item.match(forIteratorRE);\n  if (iteratorMatch) {\n    res.item = item.replace(forIteratorRE, \"\").trim();\n    res.index = iteratorMatch[1].trim();\n    if (iteratorMatch[2]) {\n      res.collection = iteratorMatch[2].trim();\n    }\n  } else {\n    res.item = item;\n  }\n  return res;\n}\nfunction getIterationScopeVariables(iteratorNames, item, index, items) {\n  let scopeVariables = {};\n  if (/^\\[.*\\]$/.test(iteratorNames.item) && Array.isArray(item)) {\n    let names = iteratorNames.item.replace(\"[\", \"\").replace(\"]\", \"\").split(\",\").map((i) => i.trim());\n    names.forEach((name, i) => {\n      scopeVariables[name] = item[i];\n    });\n  } else if (/^\\{.*\\}$/.test(iteratorNames.item) && !Array.isArray(item) && typeof item === \"object\") {\n    let names = iteratorNames.item.replace(\"{\", \"\").replace(\"}\", \"\").split(\",\").map((i) => i.trim());\n    names.forEach((name) => {\n      scopeVariables[name] = item[name];\n    });\n  } else {\n    scopeVariables[iteratorNames.item] = item;\n  }\n  if (iteratorNames.index)\n    scopeVariables[iteratorNames.index] = index;\n  if (iteratorNames.collection)\n    scopeVariables[iteratorNames.collection] = items;\n  return scopeVariables;\n}\nfunction isNumeric3(subject) {\n  return !Array.isArray(subject) && !isNaN(subject);\n}\n\n// packages/alpinejs/src/directives/x-ref.js\nfunction handler3() {\n}\nhandler3.inline = (el, {expression}, {cleanup: cleanup2}) => {\n  let root = closestRoot(el);\n  if (!root._x_refs)\n    root._x_refs = {};\n  root._x_refs[expression] = el;\n  cleanup2(() => delete root._x_refs[expression]);\n};\ndirective(\"ref\", handler3);\n\n// packages/alpinejs/src/directives/x-if.js\ndirective(\"if\", (el, {expression}, {effect: effect3, cleanup: cleanup2}) => {\n  let evaluate2 = evaluateLater(el, expression);\n  let show = () => {\n    if (el._x_currentIfEl)\n      return el._x_currentIfEl;\n    let clone2 = el.content.cloneNode(true).firstElementChild;\n    addScopeToNode(clone2, {}, el);\n    mutateDom(() => {\n      el.after(clone2);\n      initTree(clone2);\n    });\n    el._x_currentIfEl = clone2;\n    el._x_undoIf = () => {\n      walk(clone2, (node) => {\n        if (!!node._x_effects) {\n          node._x_effects.forEach(dequeueJob);\n        }\n      });\n      clone2.remove();\n      delete el._x_currentIfEl;\n    };\n    return clone2;\n  };\n  let hide = () => {\n    if (!el._x_undoIf)\n      return;\n    el._x_undoIf();\n    delete el._x_undoIf;\n  };\n  effect3(() => evaluate2((value) => {\n    value ? show() : hide();\n  }));\n  cleanup2(() => el._x_undoIf && el._x_undoIf());\n});\n\n// packages/alpinejs/src/directives/x-id.js\ndirective(\"id\", (el, {expression}, {evaluate: evaluate2}) => {\n  let names = evaluate2(expression);\n  names.forEach((name) => setIdRoot(el, name));\n});\n\n// packages/alpinejs/src/directives/x-on.js\nmapAttributes(startingWith(\"@\", into(prefix(\"on:\"))));\ndirective(\"on\", skipDuringClone((el, {value, modifiers, expression}, {cleanup: cleanup2}) => {\n  let evaluate2 = expression ? evaluateLater(el, expression) : () => {\n  };\n  if (el.tagName.toLowerCase() === \"template\") {\n    if (!el._x_forwardEvents)\n      el._x_forwardEvents = [];\n    if (!el._x_forwardEvents.includes(value))\n      el._x_forwardEvents.push(value);\n  }\n  let removeListener = on(el, value, modifiers, (e) => {\n    evaluate2(() => {\n    }, {scope: {$event: e}, params: [e]});\n  });\n  cleanup2(() => removeListener());\n}));\n\n// packages/alpinejs/src/directives/index.js\nwarnMissingPluginDirective(\"Collapse\", \"collapse\", \"collapse\");\nwarnMissingPluginDirective(\"Intersect\", \"intersect\", \"intersect\");\nwarnMissingPluginDirective(\"Focus\", \"trap\", \"focus\");\nwarnMissingPluginDirective(\"Mask\", \"mask\", \"mask\");\nfunction warnMissingPluginDirective(name, directiveName2, slug) {\n  directive(directiveName2, (el) => warn(`You can't use [x-${directiveName2}] without first installing the \"${name}\" plugin here: https://alpinejs.dev/plugins/${slug}`, el));\n}\n\n// packages/alpinejs/src/index.js\nalpine_default.setEvaluator(normalEvaluator);\nalpine_default.setReactivityEngine({reactive: reactive2, effect: effect2, release: stop, raw: toRaw});\nvar src_default = alpine_default;\n\n// packages/alpinejs/builds/module.js\nvar module_default = src_default;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/alpinejs/dist/module.esm.js\n");

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcz9hODBiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/sass/app.scss\n");

/***/ }),

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var alpinejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! alpinejs */ \"./node_modules/alpinejs/dist/module.esm.js\");\n/* harmony import */ var _plugins_select2_js_select2_full_min_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../plugins/select2/js/select2.full.min.js */ \"./resources/plugins/select2/js/select2.full.min.js\");\n\n\n\nwindow.Alpine = alpinejs__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\nalpinejs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].start();\n$(document).on(\"ready\", function () {\n  $(\"[data-ajax-url]\").select2({\n    ajax: {\n      url: $(\"[data-ajax-url]\").attr(\"data-ajax-url\"),\n      processResults: function processResults(_ref) {\n        var results = _ref.results,\n          pagination = _ref.pagination;\n        var lang = document.querySelector(\"html\").getAttribute(\"lang\");\n        debugger;\n        return {\n          results: results.map(function (d) {\n            if (lang === \"en\") {\n              return {\n                text: d.name_en,\n                id: d.id\n              };\n            } else if (lang === \"ar\") {\n              console.log(lang);\n              return {\n                text: d.name_ar,\n                id: d.id\n              };\n            }\n            console.log(lang);\n            return {\n              text: d.name_en,\n              id: d.id\n            };\n          }),\n          pagination: pagination\n        };\n      }\n    }\n  });\n});\n$(\".select2\").select2();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwLmpzIiwibWFwcGluZ3MiOiI7OztBQUU2QjtBQUNxQjtBQUN2QjtBQUMzQkUsTUFBTSxDQUFDRixNQUFNLEdBQUdBLGdEQUFNO0FBRXRCQSxnREFBTSxDQUFDRyxLQUFLLENBQUMsQ0FBQztBQUlkQyxDQUFDLENBQUNDLFFBQVEsQ0FBQyxDQUFDQyxFQUFFLENBQUMsT0FBTyxFQUFDLFlBQ3ZCO0VBQ0lGLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDRyxPQUFPLENBQUM7SUFDekJDLElBQUksRUFBQztNQUNEQyxHQUFHLEVBQUNMLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDTSxJQUFJLENBQUMsZUFBZSxDQUFDO01BQzlDQyxjQUFjLEVBQUUsU0FBQUEsZUFBQUMsSUFBQSxFQUNoQjtRQUFBLElBRDBCQyxPQUFPLEdBQUFELElBQUEsQ0FBUEMsT0FBTztVQUFDQyxVQUFVLEdBQUFGLElBQUEsQ0FBVkUsVUFBVTtRQUV4QyxJQUFJQyxJQUFJLEdBQUdWLFFBQVEsQ0FBQ1csYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDQyxZQUFZLENBQUMsTUFBTSxDQUFDO1FBQzlEO1FBQ0EsT0FBTztVQUNISixPQUFPLEVBQUNBLE9BQU8sQ0FBQ0ssR0FBRyxDQUFDLFVBQUNDLENBQUMsRUFBRztZQUdyQixJQUFHSixJQUFJLEtBQUssSUFBSSxFQUNoQjtjQUVJLE9BQU87Z0JBQ0hLLElBQUksRUFBQ0QsQ0FBQyxDQUFDRSxPQUFPO2dCQUNkQyxFQUFFLEVBQUNILENBQUMsQ0FBQ0c7Y0FDVCxDQUFDO1lBQ0wsQ0FBQyxNQUFLLElBQUdQLElBQUksS0FBSyxJQUFJLEVBQ3RCO2NBQ0lRLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDVCxJQUFJLENBQUM7Y0FDakIsT0FBTztnQkFDSEssSUFBSSxFQUFDRCxDQUFDLENBQUNNLE9BQU87Z0JBQ2RILEVBQUUsRUFBQ0gsQ0FBQyxDQUFDRztjQUNULENBQUM7WUFDTDtZQUNBQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ1QsSUFBSSxDQUFDO1lBRWpCLE9BQU87Y0FDSEssSUFBSSxFQUFFRCxDQUFDLENBQUNFLE9BQU87Y0FDZkMsRUFBRSxFQUFDSCxDQUFDLENBQUNHO1lBQ1QsQ0FBQztVQUVMLENBQUMsQ0FBQztVQUNGUixVQUFVLEVBQUNBO1FBQ2YsQ0FBQztNQUNMO0lBRUo7RUFFSixDQUFDLENBQUM7QUFDTixDQUFDLENBQUM7QUFFRlYsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDRyxPQUFPLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9hcHAuanM/Y2VkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcblxuaW1wb3J0IEFscGluZSBmcm9tICdhbHBpbmVqcydcbmltcG9ydCBcIi4uL3BsdWdpbnMvc2VsZWN0Mi9qcy9zZWxlY3QyLmZ1bGwubWluLmpzXCJcbmltcG9ydCB7aGVhZH0gZnJvbSBcImF4aW9zXCI7XG53aW5kb3cuQWxwaW5lID0gQWxwaW5lXG5cbkFscGluZS5zdGFydCgpXG5cblxuXG4kKGRvY3VtZW50KS5vbihcInJlYWR5XCIsZnVuY3Rpb24gKClcbntcbiAgICAkKFwiW2RhdGEtYWpheC11cmxdXCIpLnNlbGVjdDIoe1xuICAgICAgICBhamF4OntcbiAgICAgICAgICAgIHVybDokKFwiW2RhdGEtYWpheC11cmxdXCIpLmF0dHIoXCJkYXRhLWFqYXgtdXJsXCIpLFxuICAgICAgICAgICAgcHJvY2Vzc1Jlc3VsdHMgOmZ1bmN0aW9uKHtyZXN1bHRzLHBhZ2luYXRpb259KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxldCBsYW5nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImh0bWxcIikuZ2V0QXR0cmlidXRlKFwibGFuZ1wiKVxuICAgICAgICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHM6cmVzdWx0cy5tYXAoKGQpPT57XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYobGFuZyA9PT0gXCJlblwiKVxuICAgICAgICAgICAgICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDpkLm5hbWVfZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOmQuaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZihsYW5nID09PSBcImFyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobGFuZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OmQubmFtZV9hcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ZC5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGxhbmcpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZC5uYW1lX2VuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOmQuaWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbjpwYWdpbmF0aW9uXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICB9KVxufSlcblxuJChcIi5zZWxlY3QyXCIpLnNlbGVjdDIoKVxuIl0sIm5hbWVzIjpbIkFscGluZSIsImhlYWQiLCJ3aW5kb3ciLCJzdGFydCIsIiQiLCJkb2N1bWVudCIsIm9uIiwic2VsZWN0MiIsImFqYXgiLCJ1cmwiLCJhdHRyIiwicHJvY2Vzc1Jlc3VsdHMiLCJfcmVmIiwicmVzdWx0cyIsInBhZ2luYXRpb24iLCJsYW5nIiwicXVlcnlTZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsIm1hcCIsImQiLCJ0ZXh0IiwibmFtZV9lbiIsImlkIiwiY29uc29sZSIsImxvZyIsIm5hbWVfYXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ }),

/***/ "./resources/plugins/select2/js/select2.full.min.js":
/*!**********************************************************!*\
  !*** ./resources/plugins/select2/js/select2.full.min.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/*! Select2 4.0.13 | https://github.com/select2/select2/blob/master/LICENSE.md */\n!function (n) {\n  \"function\" == typeof define && define.amd ? define([\"jquery\"], n) : \"object\" == (typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) && module.exports ? module.exports = function (e, t) {\n    return void 0 === t && (t = \"undefined\" != typeof window ? require(\"jquery\") : require(\"jquery\")(e)), n(t), t;\n  } : n(jQuery);\n}(function (d) {\n  var e = function () {\n      if (d && d.fn && d.fn.select2 && d.fn.select2.amd) var e = d.fn.select2.amd;\n      var t, n, i, h, o, _s, f, g, m, v, y, _, r, a, w, l;\n      function b(e, t) {\n        return r.call(e, t);\n      }\n      function c(e, t) {\n        var n,\n          i,\n          r,\n          o,\n          s,\n          a,\n          l,\n          c,\n          u,\n          d,\n          p,\n          h = t && t.split(\"/\"),\n          f = y.map,\n          g = f && f[\"*\"] || {};\n        if (e) {\n          for (s = (e = e.split(\"/\")).length - 1, y.nodeIdCompat && w.test(e[s]) && (e[s] = e[s].replace(w, \"\")), \".\" === e[0].charAt(0) && h && (e = h.slice(0, h.length - 1).concat(e)), u = 0; u < e.length; u++) if (\".\" === (p = e[u])) e.splice(u, 1), --u;else if (\"..\" === p) {\n            if (0 === u || 1 === u && \"..\" === e[2] || \"..\" === e[u - 1]) continue;\n            0 < u && (e.splice(u - 1, 2), u -= 2);\n          }\n          e = e.join(\"/\");\n        }\n        if ((h || g) && f) {\n          for (u = (n = e.split(\"/\")).length; 0 < u; --u) {\n            if (i = n.slice(0, u).join(\"/\"), h) for (d = h.length; 0 < d; --d) if (r = (r = f[h.slice(0, d).join(\"/\")]) && r[i]) {\n              o = r, a = u;\n              break;\n            }\n            if (o) break;\n            !l && g && g[i] && (l = g[i], c = u);\n          }\n          !o && l && (o = l, a = c), o && (n.splice(0, a, o), e = n.join(\"/\"));\n        }\n        return e;\n      }\n      function A(t, n) {\n        return function () {\n          var e = a.call(arguments, 0);\n          return \"string\" != typeof e[0] && 1 === e.length && e.push(null), _s.apply(h, e.concat([t, n]));\n        };\n      }\n      function x(t) {\n        return function (e) {\n          m[t] = e;\n        };\n      }\n      function D(e) {\n        if (b(v, e)) {\n          var t = v[e];\n          delete v[e], _[e] = !0, o.apply(h, t);\n        }\n        if (!b(m, e) && !b(_, e)) throw new Error(\"No \" + e);\n        return m[e];\n      }\n      function u(e) {\n        var t,\n          n = e ? e.indexOf(\"!\") : -1;\n        return -1 < n && (t = e.substring(0, n), e = e.substring(n + 1, e.length)), [t, e];\n      }\n      function S(e) {\n        return e ? u(e) : [];\n      }\n      return e && e.requirejs || (e ? n = e : e = {}, m = {}, v = {}, y = {}, _ = {}, r = Object.prototype.hasOwnProperty, a = [].slice, w = /\\.js$/, f = function f(e, t) {\n        var n,\n          i,\n          r = u(e),\n          o = r[0],\n          s = t[1];\n        return e = r[1], o && (n = D(o = c(o, s))), o ? e = n && n.normalize ? n.normalize(e, (i = s, function (e) {\n          return c(e, i);\n        })) : c(e, s) : (o = (r = u(e = c(e, s)))[0], e = r[1], o && (n = D(o))), {\n          f: o ? o + \"!\" + e : e,\n          n: e,\n          pr: o,\n          p: n\n        };\n      }, g = {\n        require: function require(e) {\n          return A(e);\n        },\n        exports: function exports(e) {\n          var t = m[e];\n          return void 0 !== t ? t : m[e] = {};\n        },\n        module: function module(e) {\n          return {\n            id: e,\n            uri: \"\",\n            exports: m[e],\n            config: (t = e, function () {\n              return y && y.config && y.config[t] || {};\n            })\n          };\n          var t;\n        }\n      }, o = function o(e, t, n, i) {\n        var r,\n          o,\n          s,\n          a,\n          l,\n          c,\n          u,\n          d = [],\n          p = _typeof(n);\n        if (c = S(i = i || e), \"undefined\" == p || \"function\" == p) {\n          for (t = !t.length && n.length ? [\"require\", \"exports\", \"module\"] : t, l = 0; l < t.length; l += 1) if (\"require\" === (o = (a = f(t[l], c)).f)) d[l] = g.require(e);else if (\"exports\" === o) d[l] = g.exports(e), u = !0;else if (\"module\" === o) r = d[l] = g.module(e);else if (b(m, o) || b(v, o) || b(_, o)) d[l] = D(o);else {\n            if (!a.p) throw new Error(e + \" missing \" + o);\n            a.p.load(a.n, A(i, !0), x(o), {}), d[l] = m[o];\n          }\n          s = n ? n.apply(m[e], d) : void 0, e && (r && r.exports !== h && r.exports !== m[e] ? m[e] = r.exports : s === h && u || (m[e] = s));\n        } else e && (m[e] = n);\n      }, t = n = _s = function s(e, t, n, i, r) {\n        if (\"string\" == typeof e) return g[e] ? g[e](t) : D(f(e, S(t)).f);\n        if (!e.splice) {\n          if ((y = e).deps && _s(y.deps, y.callback), !t) return;\n          t.splice ? (e = t, t = n, n = null) : e = h;\n        }\n        return t = t || function () {}, \"function\" == typeof n && (n = i, i = r), i ? o(h, e, t, n) : setTimeout(function () {\n          o(h, e, t, n);\n        }, 4), _s;\n      }, _s.config = function (e) {\n        return _s(e);\n      }, t._defined = m, (i = function i(e, t, n) {\n        if (\"string\" != typeof e) throw new Error(\"See almond README: incorrect module build, no module name\");\n        t.splice || (n = t, t = []), b(m, e) || b(v, e) || (v[e] = [e, t, n]);\n      }).amd = {\n        jQuery: !0\n      }, e.requirejs = t, e.require = n, e.define = i), e.define(\"almond\", function () {}), e.define(\"jquery\", [], function () {\n        var e = d || $;\n        return null == e && console && console.error && console.error(\"Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page.\"), e;\n      }), e.define(\"select2/utils\", [\"jquery\"], function (o) {\n        var r = {};\n        function u(e) {\n          var t = e.prototype,\n            n = [];\n          for (var i in t) {\n            \"function\" == typeof t[i] && \"constructor\" !== i && n.push(i);\n          }\n          return n;\n        }\n        r.Extend = function (e, t) {\n          var n = {}.hasOwnProperty;\n          function i() {\n            this.constructor = e;\n          }\n          for (var r in t) n.call(t, r) && (e[r] = t[r]);\n          return i.prototype = t.prototype, e.prototype = new i(), e.__super__ = t.prototype, e;\n        }, r.Decorate = function (i, r) {\n          var e = u(r),\n            t = u(i);\n          function o() {\n            var e = Array.prototype.unshift,\n              t = r.prototype.constructor.length,\n              n = i.prototype.constructor;\n            0 < t && (e.call(arguments, i.prototype.constructor), n = r.prototype.constructor), n.apply(this, arguments);\n          }\n          r.displayName = i.displayName, o.prototype = new function () {\n            this.constructor = o;\n          }();\n          for (var n = 0; n < t.length; n++) {\n            var s = t[n];\n            o.prototype[s] = i.prototype[s];\n          }\n          function a(e) {\n            var t = function t() {};\n            e in o.prototype && (t = o.prototype[e]);\n            var n = r.prototype[e];\n            return function () {\n              return Array.prototype.unshift.call(arguments, t), n.apply(this, arguments);\n            };\n          }\n          for (var l = 0; l < e.length; l++) {\n            var c = e[l];\n            o.prototype[c] = a(c);\n          }\n          return o;\n        };\n        function e() {\n          this.listeners = {};\n        }\n        e.prototype.on = function (e, t) {\n          this.listeners = this.listeners || {}, e in this.listeners ? this.listeners[e].push(t) : this.listeners[e] = [t];\n        }, e.prototype.trigger = function (e) {\n          var t = Array.prototype.slice,\n            n = t.call(arguments, 1);\n          this.listeners = this.listeners || {}, null == n && (n = []), 0 === n.length && n.push({}), (n[0]._type = e) in this.listeners && this.invoke(this.listeners[e], t.call(arguments, 1)), \"*\" in this.listeners && this.invoke(this.listeners[\"*\"], arguments);\n        }, e.prototype.invoke = function (e, t) {\n          for (var n = 0, i = e.length; n < i; n++) e[n].apply(this, t);\n        }, r.Observable = e, r.generateChars = function (e) {\n          for (var t = \"\", n = 0; n < e; n++) {\n            t += Math.floor(36 * Math.random()).toString(36);\n          }\n          return t;\n        }, r.bind = function (e, t) {\n          return function () {\n            e.apply(t, arguments);\n          };\n        }, r._convertData = function (e) {\n          for (var t in e) {\n            var n = t.split(\"-\"),\n              i = e;\n            if (1 !== n.length) {\n              for (var r = 0; r < n.length; r++) {\n                var o = n[r];\n                (o = o.substring(0, 1).toLowerCase() + o.substring(1)) in i || (i[o] = {}), r == n.length - 1 && (i[o] = e[t]), i = i[o];\n              }\n              delete e[t];\n            }\n          }\n          return e;\n        }, r.hasScroll = function (e, t) {\n          var n = o(t),\n            i = t.style.overflowX,\n            r = t.style.overflowY;\n          return (i !== r || \"hidden\" !== r && \"visible\" !== r) && (\"scroll\" === i || \"scroll\" === r || n.innerHeight() < t.scrollHeight || n.innerWidth() < t.scrollWidth);\n        }, r.escapeMarkup = function (e) {\n          var t = {\n            \"\\\\\": \"&#92;\",\n            \"&\": \"&amp;\",\n            \"<\": \"&lt;\",\n            \">\": \"&gt;\",\n            '\"': \"&quot;\",\n            \"'\": \"&#39;\",\n            \"/\": \"&#47;\"\n          };\n          return \"string\" != typeof e ? e : String(e).replace(/[&<>\"'\\/\\\\]/g, function (e) {\n            return t[e];\n          });\n        }, r.appendMany = function (e, t) {\n          if (\"1.7\" === o.fn.jquery.substr(0, 3)) {\n            var n = o();\n            o.map(t, function (e) {\n              n = n.add(e);\n            }), t = n;\n          }\n          e.append(t);\n        }, r.__cache = {};\n        var n = 0;\n        return r.GetUniqueElementId = function (e) {\n          var t = e.getAttribute(\"data-select2-id\");\n          return null == t && (e.id ? (t = e.id, e.setAttribute(\"data-select2-id\", t)) : (e.setAttribute(\"data-select2-id\", ++n), t = n.toString())), t;\n        }, r.StoreData = function (e, t, n) {\n          var i = r.GetUniqueElementId(e);\n          r.__cache[i] || (r.__cache[i] = {}), r.__cache[i][t] = n;\n        }, r.GetData = function (e, t) {\n          var n = r.GetUniqueElementId(e);\n          return t ? r.__cache[n] && null != r.__cache[n][t] ? r.__cache[n][t] : o(e).data(t) : r.__cache[n];\n        }, r.RemoveData = function (e) {\n          var t = r.GetUniqueElementId(e);\n          null != r.__cache[t] && delete r.__cache[t], e.removeAttribute(\"data-select2-id\");\n        }, r;\n      }), e.define(\"select2/results\", [\"jquery\", \"./utils\"], function (h, f) {\n        function i(e, t, n) {\n          this.$element = e, this.data = n, this.options = t, i.__super__.constructor.call(this);\n        }\n        return f.Extend(i, f.Observable), i.prototype.render = function () {\n          var e = h('<ul class=\"select2-results__options\" role=\"listbox\"></ul>');\n          return this.options.get(\"multiple\") && e.attr(\"aria-multiselectable\", \"true\"), this.$results = e;\n        }, i.prototype.clear = function () {\n          this.$results.empty();\n        }, i.prototype.displayMessage = function (e) {\n          var t = this.options.get(\"escapeMarkup\");\n          this.clear(), this.hideLoading();\n          var n = h('<li role=\"alert\" aria-live=\"assertive\" class=\"select2-results__option\"></li>'),\n            i = this.options.get(\"translations\").get(e.message);\n          n.append(t(i(e.args))), n[0].className += \" select2-results__message\", this.$results.append(n);\n        }, i.prototype.hideMessages = function () {\n          this.$results.find(\".select2-results__message\").remove();\n        }, i.prototype.append = function (e) {\n          this.hideLoading();\n          var t = [];\n          if (null != e.results && 0 !== e.results.length) {\n            e.results = this.sort(e.results);\n            for (var n = 0; n < e.results.length; n++) {\n              var i = e.results[n],\n                r = this.option(i);\n              t.push(r);\n            }\n            this.$results.append(t);\n          } else 0 === this.$results.children().length && this.trigger(\"results:message\", {\n            message: \"noResults\"\n          });\n        }, i.prototype.position = function (e, t) {\n          t.find(\".select2-results\").append(e);\n        }, i.prototype.sort = function (e) {\n          return this.options.get(\"sorter\")(e);\n        }, i.prototype.highlightFirstItem = function () {\n          var e = this.$results.find(\".select2-results__option[aria-selected]\"),\n            t = e.filter(\"[aria-selected=true]\");\n          0 < t.length ? t.first().trigger(\"mouseenter\") : e.first().trigger(\"mouseenter\"), this.ensureHighlightVisible();\n        }, i.prototype.setClasses = function () {\n          var t = this;\n          this.data.current(function (e) {\n            var i = h.map(e, function (e) {\n              return e.id.toString();\n            });\n            t.$results.find(\".select2-results__option[aria-selected]\").each(function () {\n              var e = h(this),\n                t = f.GetData(this, \"data\"),\n                n = \"\" + t.id;\n              null != t.element && t.element.selected || null == t.element && -1 < h.inArray(n, i) ? e.attr(\"aria-selected\", \"true\") : e.attr(\"aria-selected\", \"false\");\n            });\n          });\n        }, i.prototype.showLoading = function (e) {\n          this.hideLoading();\n          var t = {\n              disabled: !0,\n              loading: !0,\n              text: this.options.get(\"translations\").get(\"searching\")(e)\n            },\n            n = this.option(t);\n          n.className += \" loading-results\", this.$results.prepend(n);\n        }, i.prototype.hideLoading = function () {\n          this.$results.find(\".loading-results\").remove();\n        }, i.prototype.option = function (e) {\n          var t = document.createElement(\"li\");\n          t.className = \"select2-results__option\";\n          var n = {\n              role: \"option\",\n              \"aria-selected\": \"false\"\n            },\n            i = window.Element.prototype.matches || window.Element.prototype.msMatchesSelector || window.Element.prototype.webkitMatchesSelector;\n          for (var r in (null != e.element && i.call(e.element, \":disabled\") || null == e.element && e.disabled) && (delete n[\"aria-selected\"], n[\"aria-disabled\"] = \"true\"), null == e.id && delete n[\"aria-selected\"], null != e._resultId && (t.id = e._resultId), e.title && (t.title = e.title), e.children && (n.role = \"group\", n[\"aria-label\"] = e.text, delete n[\"aria-selected\"]), n) {\n            var o = n[r];\n            t.setAttribute(r, o);\n          }\n          if (e.children) {\n            var s = h(t),\n              a = document.createElement(\"strong\");\n            a.className = \"select2-results__group\";\n            h(a);\n            this.template(e, a);\n            for (var l = [], c = 0; c < e.children.length; c++) {\n              var u = e.children[c],\n                d = this.option(u);\n              l.push(d);\n            }\n            var p = h(\"<ul></ul>\", {\n              \"class\": \"select2-results__options select2-results__options--nested\"\n            });\n            p.append(l), s.append(a), s.append(p);\n          } else this.template(e, t);\n          return f.StoreData(t, \"data\", e), t;\n        }, i.prototype.bind = function (t, e) {\n          var l = this,\n            n = t.id + \"-results\";\n          this.$results.attr(\"id\", n), t.on(\"results:all\", function (e) {\n            l.clear(), l.append(e.data), t.isOpen() && (l.setClasses(), l.highlightFirstItem());\n          }), t.on(\"results:append\", function (e) {\n            l.append(e.data), t.isOpen() && l.setClasses();\n          }), t.on(\"query\", function (e) {\n            l.hideMessages(), l.showLoading(e);\n          }), t.on(\"select\", function () {\n            t.isOpen() && (l.setClasses(), l.options.get(\"scrollAfterSelect\") && l.highlightFirstItem());\n          }), t.on(\"unselect\", function () {\n            t.isOpen() && (l.setClasses(), l.options.get(\"scrollAfterSelect\") && l.highlightFirstItem());\n          }), t.on(\"open\", function () {\n            l.$results.attr(\"aria-expanded\", \"true\"), l.$results.attr(\"aria-hidden\", \"false\"), l.setClasses(), l.ensureHighlightVisible();\n          }), t.on(\"close\", function () {\n            l.$results.attr(\"aria-expanded\", \"false\"), l.$results.attr(\"aria-hidden\", \"true\"), l.$results.removeAttr(\"aria-activedescendant\");\n          }), t.on(\"results:toggle\", function () {\n            var e = l.getHighlightedResults();\n            0 !== e.length && e.trigger(\"mouseup\");\n          }), t.on(\"results:select\", function () {\n            var e = l.getHighlightedResults();\n            if (0 !== e.length) {\n              var t = f.GetData(e[0], \"data\");\n              \"true\" == e.attr(\"aria-selected\") ? l.trigger(\"close\", {}) : l.trigger(\"select\", {\n                data: t\n              });\n            }\n          }), t.on(\"results:previous\", function () {\n            var e = l.getHighlightedResults(),\n              t = l.$results.find(\"[aria-selected]\"),\n              n = t.index(e);\n            if (!(n <= 0)) {\n              var i = n - 1;\n              0 === e.length && (i = 0);\n              var r = t.eq(i);\n              r.trigger(\"mouseenter\");\n              var o = l.$results.offset().top,\n                s = r.offset().top,\n                a = l.$results.scrollTop() + (s - o);\n              0 === i ? l.$results.scrollTop(0) : s - o < 0 && l.$results.scrollTop(a);\n            }\n          }), t.on(\"results:next\", function () {\n            var e = l.getHighlightedResults(),\n              t = l.$results.find(\"[aria-selected]\"),\n              n = t.index(e) + 1;\n            if (!(n >= t.length)) {\n              var i = t.eq(n);\n              i.trigger(\"mouseenter\");\n              var r = l.$results.offset().top + l.$results.outerHeight(!1),\n                o = i.offset().top + i.outerHeight(!1),\n                s = l.$results.scrollTop() + o - r;\n              0 === n ? l.$results.scrollTop(0) : r < o && l.$results.scrollTop(s);\n            }\n          }), t.on(\"results:focus\", function (e) {\n            e.element.addClass(\"select2-results__option--highlighted\");\n          }), t.on(\"results:message\", function (e) {\n            l.displayMessage(e);\n          }), h.fn.mousewheel && this.$results.on(\"mousewheel\", function (e) {\n            var t = l.$results.scrollTop(),\n              n = l.$results.get(0).scrollHeight - t + e.deltaY,\n              i = 0 < e.deltaY && t - e.deltaY <= 0,\n              r = e.deltaY < 0 && n <= l.$results.height();\n            i ? (l.$results.scrollTop(0), e.preventDefault(), e.stopPropagation()) : r && (l.$results.scrollTop(l.$results.get(0).scrollHeight - l.$results.height()), e.preventDefault(), e.stopPropagation());\n          }), this.$results.on(\"mouseup\", \".select2-results__option[aria-selected]\", function (e) {\n            var t = h(this),\n              n = f.GetData(this, \"data\");\n            \"true\" !== t.attr(\"aria-selected\") ? l.trigger(\"select\", {\n              originalEvent: e,\n              data: n\n            }) : l.options.get(\"multiple\") ? l.trigger(\"unselect\", {\n              originalEvent: e,\n              data: n\n            }) : l.trigger(\"close\", {});\n          }), this.$results.on(\"mouseenter\", \".select2-results__option[aria-selected]\", function (e) {\n            var t = f.GetData(this, \"data\");\n            l.getHighlightedResults().removeClass(\"select2-results__option--highlighted\"), l.trigger(\"results:focus\", {\n              data: t,\n              element: h(this)\n            });\n          });\n        }, i.prototype.getHighlightedResults = function () {\n          return this.$results.find(\".select2-results__option--highlighted\");\n        }, i.prototype.destroy = function () {\n          this.$results.remove();\n        }, i.prototype.ensureHighlightVisible = function () {\n          var e = this.getHighlightedResults();\n          if (0 !== e.length) {\n            var t = this.$results.find(\"[aria-selected]\").index(e),\n              n = this.$results.offset().top,\n              i = e.offset().top,\n              r = this.$results.scrollTop() + (i - n),\n              o = i - n;\n            r -= 2 * e.outerHeight(!1), t <= 2 ? this.$results.scrollTop(0) : (o > this.$results.outerHeight() || o < 0) && this.$results.scrollTop(r);\n          }\n        }, i.prototype.template = function (e, t) {\n          var n = this.options.get(\"templateResult\"),\n            i = this.options.get(\"escapeMarkup\"),\n            r = n(e, t);\n          null == r ? t.style.display = \"none\" : \"string\" == typeof r ? t.innerHTML = i(r) : h(t).append(r);\n        }, i;\n      }), e.define(\"select2/keys\", [], function () {\n        return {\n          BACKSPACE: 8,\n          TAB: 9,\n          ENTER: 13,\n          SHIFT: 16,\n          CTRL: 17,\n          ALT: 18,\n          ESC: 27,\n          SPACE: 32,\n          PAGE_UP: 33,\n          PAGE_DOWN: 34,\n          END: 35,\n          HOME: 36,\n          LEFT: 37,\n          UP: 38,\n          RIGHT: 39,\n          DOWN: 40,\n          DELETE: 46\n        };\n      }), e.define(\"select2/selection/base\", [\"jquery\", \"../utils\", \"../keys\"], function (n, i, r) {\n        function o(e, t) {\n          this.$element = e, this.options = t, o.__super__.constructor.call(this);\n        }\n        return i.Extend(o, i.Observable), o.prototype.render = function () {\n          var e = n('<span class=\"select2-selection\" role=\"combobox\"  aria-haspopup=\"true\" aria-expanded=\"false\"></span>');\n          return this._tabindex = 0, null != i.GetData(this.$element[0], \"old-tabindex\") ? this._tabindex = i.GetData(this.$element[0], \"old-tabindex\") : null != this.$element.attr(\"tabindex\") && (this._tabindex = this.$element.attr(\"tabindex\")), e.attr(\"title\", this.$element.attr(\"title\")), e.attr(\"tabindex\", this._tabindex), e.attr(\"aria-disabled\", \"false\"), this.$selection = e;\n        }, o.prototype.bind = function (e, t) {\n          var n = this,\n            i = e.id + \"-results\";\n          this.container = e, this.$selection.on(\"focus\", function (e) {\n            n.trigger(\"focus\", e);\n          }), this.$selection.on(\"blur\", function (e) {\n            n._handleBlur(e);\n          }), this.$selection.on(\"keydown\", function (e) {\n            n.trigger(\"keypress\", e), e.which === r.SPACE && e.preventDefault();\n          }), e.on(\"results:focus\", function (e) {\n            n.$selection.attr(\"aria-activedescendant\", e.data._resultId);\n          }), e.on(\"selection:update\", function (e) {\n            n.update(e.data);\n          }), e.on(\"open\", function () {\n            n.$selection.attr(\"aria-expanded\", \"true\"), n.$selection.attr(\"aria-owns\", i), n._attachCloseHandler(e);\n          }), e.on(\"close\", function () {\n            n.$selection.attr(\"aria-expanded\", \"false\"), n.$selection.removeAttr(\"aria-activedescendant\"), n.$selection.removeAttr(\"aria-owns\"), n.$selection.trigger(\"focus\"), n._detachCloseHandler(e);\n          }), e.on(\"enable\", function () {\n            n.$selection.attr(\"tabindex\", n._tabindex), n.$selection.attr(\"aria-disabled\", \"false\");\n          }), e.on(\"disable\", function () {\n            n.$selection.attr(\"tabindex\", \"-1\"), n.$selection.attr(\"aria-disabled\", \"true\");\n          });\n        }, o.prototype._handleBlur = function (e) {\n          var t = this;\n          window.setTimeout(function () {\n            document.activeElement == t.$selection[0] || n.contains(t.$selection[0], document.activeElement) || t.trigger(\"blur\", e);\n          }, 1);\n        }, o.prototype._attachCloseHandler = function (e) {\n          n(document.body).on(\"mousedown.select2.\" + e.id, function (e) {\n            var t = n(e.target).closest(\".select2\");\n            n(\".select2.select2-container--open\").each(function () {\n              this != t[0] && i.GetData(this, \"element\").select2(\"close\");\n            });\n          });\n        }, o.prototype._detachCloseHandler = function (e) {\n          n(document.body).off(\"mousedown.select2.\" + e.id);\n        }, o.prototype.position = function (e, t) {\n          t.find(\".selection\").append(e);\n        }, o.prototype.destroy = function () {\n          this._detachCloseHandler(this.container);\n        }, o.prototype.update = function (e) {\n          throw new Error(\"The `update` method must be defined in child classes.\");\n        }, o.prototype.isEnabled = function () {\n          return !this.isDisabled();\n        }, o.prototype.isDisabled = function () {\n          return this.options.get(\"disabled\");\n        }, o;\n      }), e.define(\"select2/selection/single\", [\"jquery\", \"./base\", \"../utils\", \"../keys\"], function (e, t, n, i) {\n        function r() {\n          r.__super__.constructor.apply(this, arguments);\n        }\n        return n.Extend(r, t), r.prototype.render = function () {\n          var e = r.__super__.render.call(this);\n          return e.addClass(\"select2-selection--single\"), e.html('<span class=\"select2-selection__rendered\"></span><span class=\"select2-selection__arrow\" role=\"presentation\"><b role=\"presentation\"></b></span>'), e;\n        }, r.prototype.bind = function (t, e) {\n          var n = this;\n          r.__super__.bind.apply(this, arguments);\n          var i = t.id + \"-container\";\n          this.$selection.find(\".select2-selection__rendered\").attr(\"id\", i).attr(\"role\", \"textbox\").attr(\"aria-readonly\", \"true\"), this.$selection.attr(\"aria-labelledby\", i), this.$selection.on(\"mousedown\", function (e) {\n            1 === e.which && n.trigger(\"toggle\", {\n              originalEvent: e\n            });\n          }), this.$selection.on(\"focus\", function (e) {}), this.$selection.on(\"blur\", function (e) {}), t.on(\"focus\", function (e) {\n            t.isOpen() || n.$selection.trigger(\"focus\");\n          });\n        }, r.prototype.clear = function () {\n          var e = this.$selection.find(\".select2-selection__rendered\");\n          e.empty(), e.removeAttr(\"title\");\n        }, r.prototype.display = function (e, t) {\n          var n = this.options.get(\"templateSelection\");\n          return this.options.get(\"escapeMarkup\")(n(e, t));\n        }, r.prototype.selectionContainer = function () {\n          return e(\"<span></span>\");\n        }, r.prototype.update = function (e) {\n          if (0 !== e.length) {\n            var t = e[0],\n              n = this.$selection.find(\".select2-selection__rendered\"),\n              i = this.display(t, n);\n            n.empty().append(i);\n            var r = t.title || t.text;\n            r ? n.attr(\"title\", r) : n.removeAttr(\"title\");\n          } else this.clear();\n        }, r;\n      }), e.define(\"select2/selection/multiple\", [\"jquery\", \"./base\", \"../utils\"], function (r, e, l) {\n        function n(e, t) {\n          n.__super__.constructor.apply(this, arguments);\n        }\n        return l.Extend(n, e), n.prototype.render = function () {\n          var e = n.__super__.render.call(this);\n          return e.addClass(\"select2-selection--multiple\"), e.html('<ul class=\"select2-selection__rendered\"></ul>'), e;\n        }, n.prototype.bind = function (e, t) {\n          var i = this;\n          n.__super__.bind.apply(this, arguments), this.$selection.on(\"click\", function (e) {\n            i.trigger(\"toggle\", {\n              originalEvent: e\n            });\n          }), this.$selection.on(\"click\", \".select2-selection__choice__remove\", function (e) {\n            if (!i.isDisabled()) {\n              var t = r(this).parent(),\n                n = l.GetData(t[0], \"data\");\n              i.trigger(\"unselect\", {\n                originalEvent: e,\n                data: n\n              });\n            }\n          });\n        }, n.prototype.clear = function () {\n          var e = this.$selection.find(\".select2-selection__rendered\");\n          e.empty(), e.removeAttr(\"title\");\n        }, n.prototype.display = function (e, t) {\n          var n = this.options.get(\"templateSelection\");\n          return this.options.get(\"escapeMarkup\")(n(e, t));\n        }, n.prototype.selectionContainer = function () {\n          return r('<li class=\"select2-selection__choice\"><span class=\"select2-selection__choice__remove\" role=\"presentation\">&times;</span></li>');\n        }, n.prototype.update = function (e) {\n          if (this.clear(), 0 !== e.length) {\n            for (var t = [], n = 0; n < e.length; n++) {\n              var i = e[n],\n                r = this.selectionContainer(),\n                o = this.display(i, r);\n              r.append(o);\n              var s = i.title || i.text;\n              s && r.attr(\"title\", s), l.StoreData(r[0], \"data\", i), t.push(r);\n            }\n            var a = this.$selection.find(\".select2-selection__rendered\");\n            l.appendMany(a, t);\n          }\n        }, n;\n      }), e.define(\"select2/selection/placeholder\", [\"../utils\"], function (e) {\n        function t(e, t, n) {\n          this.placeholder = this.normalizePlaceholder(n.get(\"placeholder\")), e.call(this, t, n);\n        }\n        return t.prototype.normalizePlaceholder = function (e, t) {\n          return \"string\" == typeof t && (t = {\n            id: \"\",\n            text: t\n          }), t;\n        }, t.prototype.createPlaceholder = function (e, t) {\n          var n = this.selectionContainer();\n          return n.html(this.display(t)), n.addClass(\"select2-selection__placeholder\").removeClass(\"select2-selection__choice\"), n;\n        }, t.prototype.update = function (e, t) {\n          var n = 1 == t.length && t[0].id != this.placeholder.id;\n          if (1 < t.length || n) return e.call(this, t);\n          this.clear();\n          var i = this.createPlaceholder(this.placeholder);\n          this.$selection.find(\".select2-selection__rendered\").append(i);\n        }, t;\n      }), e.define(\"select2/selection/allowClear\", [\"jquery\", \"../keys\", \"../utils\"], function (r, i, a) {\n        function e() {}\n        return e.prototype.bind = function (e, t, n) {\n          var i = this;\n          e.call(this, t, n), null == this.placeholder && this.options.get(\"debug\") && window.console && console.error && console.error(\"Select2: The `allowClear` option should be used in combination with the `placeholder` option.\"), this.$selection.on(\"mousedown\", \".select2-selection__clear\", function (e) {\n            i._handleClear(e);\n          }), t.on(\"keypress\", function (e) {\n            i._handleKeyboardClear(e, t);\n          });\n        }, e.prototype._handleClear = function (e, t) {\n          if (!this.isDisabled()) {\n            var n = this.$selection.find(\".select2-selection__clear\");\n            if (0 !== n.length) {\n              t.stopPropagation();\n              var i = a.GetData(n[0], \"data\"),\n                r = this.$element.val();\n              this.$element.val(this.placeholder.id);\n              var o = {\n                data: i\n              };\n              if (this.trigger(\"clear\", o), o.prevented) this.$element.val(r);else {\n                for (var s = 0; s < i.length; s++) if (o = {\n                  data: i[s]\n                }, this.trigger(\"unselect\", o), o.prevented) return void this.$element.val(r);\n                this.$element.trigger(\"input\").trigger(\"change\"), this.trigger(\"toggle\", {});\n              }\n            }\n          }\n        }, e.prototype._handleKeyboardClear = function (e, t, n) {\n          n.isOpen() || t.which != i.DELETE && t.which != i.BACKSPACE || this._handleClear(t);\n        }, e.prototype.update = function (e, t) {\n          if (e.call(this, t), !(0 < this.$selection.find(\".select2-selection__placeholder\").length || 0 === t.length)) {\n            var n = this.options.get(\"translations\").get(\"removeAllItems\"),\n              i = r('<span class=\"select2-selection__clear\" title=\"' + n() + '\">&times;</span>');\n            a.StoreData(i[0], \"data\", t), this.$selection.find(\".select2-selection__rendered\").prepend(i);\n          }\n        }, e;\n      }), e.define(\"select2/selection/search\", [\"jquery\", \"../utils\", \"../keys\"], function (i, a, l) {\n        function e(e, t, n) {\n          e.call(this, t, n);\n        }\n        return e.prototype.render = function (e) {\n          var t = i('<li class=\"select2-search select2-search--inline\"><input class=\"select2-search__field\" type=\"search\" tabindex=\"-1\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" role=\"searchbox\" aria-autocomplete=\"list\" /></li>');\n          this.$searchContainer = t, this.$search = t.find(\"input\");\n          var n = e.call(this);\n          return this._transferTabIndex(), n;\n        }, e.prototype.bind = function (e, t, n) {\n          var i = this,\n            r = t.id + \"-results\";\n          e.call(this, t, n), t.on(\"open\", function () {\n            i.$search.attr(\"aria-controls\", r), i.$search.trigger(\"focus\");\n          }), t.on(\"close\", function () {\n            i.$search.val(\"\"), i.$search.removeAttr(\"aria-controls\"), i.$search.removeAttr(\"aria-activedescendant\"), i.$search.trigger(\"focus\");\n          }), t.on(\"enable\", function () {\n            i.$search.prop(\"disabled\", !1), i._transferTabIndex();\n          }), t.on(\"disable\", function () {\n            i.$search.prop(\"disabled\", !0);\n          }), t.on(\"focus\", function (e) {\n            i.$search.trigger(\"focus\");\n          }), t.on(\"results:focus\", function (e) {\n            e.data._resultId ? i.$search.attr(\"aria-activedescendant\", e.data._resultId) : i.$search.removeAttr(\"aria-activedescendant\");\n          }), this.$selection.on(\"focusin\", \".select2-search--inline\", function (e) {\n            i.trigger(\"focus\", e);\n          }), this.$selection.on(\"focusout\", \".select2-search--inline\", function (e) {\n            i._handleBlur(e);\n          }), this.$selection.on(\"keydown\", \".select2-search--inline\", function (e) {\n            if (e.stopPropagation(), i.trigger(\"keypress\", e), i._keyUpPrevented = e.isDefaultPrevented(), e.which === l.BACKSPACE && \"\" === i.$search.val()) {\n              var t = i.$searchContainer.prev(\".select2-selection__choice\");\n              if (0 < t.length) {\n                var n = a.GetData(t[0], \"data\");\n                i.searchRemoveChoice(n), e.preventDefault();\n              }\n            }\n          }), this.$selection.on(\"click\", \".select2-search--inline\", function (e) {\n            i.$search.val() && e.stopPropagation();\n          });\n          var o = document.documentMode,\n            s = o && o <= 11;\n          this.$selection.on(\"input.searchcheck\", \".select2-search--inline\", function (e) {\n            s ? i.$selection.off(\"input.search input.searchcheck\") : i.$selection.off(\"keyup.search\");\n          }), this.$selection.on(\"keyup.search input.search\", \".select2-search--inline\", function (e) {\n            if (s && \"input\" === e.type) i.$selection.off(\"input.search input.searchcheck\");else {\n              var t = e.which;\n              t != l.SHIFT && t != l.CTRL && t != l.ALT && t != l.TAB && i.handleSearch(e);\n            }\n          });\n        }, e.prototype._transferTabIndex = function (e) {\n          this.$search.attr(\"tabindex\", this.$selection.attr(\"tabindex\")), this.$selection.attr(\"tabindex\", \"-1\");\n        }, e.prototype.createPlaceholder = function (e, t) {\n          this.$search.attr(\"placeholder\", t.text);\n        }, e.prototype.update = function (e, t) {\n          var n = this.$search[0] == document.activeElement;\n          this.$search.attr(\"placeholder\", \"\"), e.call(this, t), this.$selection.find(\".select2-selection__rendered\").append(this.$searchContainer), this.resizeSearch(), n && this.$search.trigger(\"focus\");\n        }, e.prototype.handleSearch = function () {\n          if (this.resizeSearch(), !this._keyUpPrevented) {\n            var e = this.$search.val();\n            this.trigger(\"query\", {\n              term: e\n            });\n          }\n          this._keyUpPrevented = !1;\n        }, e.prototype.searchRemoveChoice = function (e, t) {\n          this.trigger(\"unselect\", {\n            data: t\n          }), this.$search.val(t.text), this.handleSearch();\n        }, e.prototype.resizeSearch = function () {\n          this.$search.css(\"width\", \"25px\");\n          var e = \"\";\n          \"\" !== this.$search.attr(\"placeholder\") ? e = this.$selection.find(\".select2-selection__rendered\").width() : e = .75 * (this.$search.val().length + 1) + \"em\";\n          this.$search.css(\"width\", e);\n        }, e;\n      }), e.define(\"select2/selection/eventRelay\", [\"jquery\"], function (s) {\n        function e() {}\n        return e.prototype.bind = function (e, t, n) {\n          var i = this,\n            r = [\"open\", \"opening\", \"close\", \"closing\", \"select\", \"selecting\", \"unselect\", \"unselecting\", \"clear\", \"clearing\"],\n            o = [\"opening\", \"closing\", \"selecting\", \"unselecting\", \"clearing\"];\n          e.call(this, t, n), t.on(\"*\", function (e, t) {\n            if (-1 !== s.inArray(e, r)) {\n              t = t || {};\n              var n = s.Event(\"select2:\" + e, {\n                params: t\n              });\n              i.$element.trigger(n), -1 !== s.inArray(e, o) && (t.prevented = n.isDefaultPrevented());\n            }\n          });\n        }, e;\n      }), e.define(\"select2/translation\", [\"jquery\", \"require\"], function (t, n) {\n        function i(e) {\n          this.dict = e || {};\n        }\n        return i.prototype.all = function () {\n          return this.dict;\n        }, i.prototype.get = function (e) {\n          return this.dict[e];\n        }, i.prototype.extend = function (e) {\n          this.dict = t.extend({}, e.all(), this.dict);\n        }, i._cache = {}, i.loadPath = function (e) {\n          if (!(e in i._cache)) {\n            var t = n(e);\n            i._cache[e] = t;\n          }\n          return new i(i._cache[e]);\n        }, i;\n      }), e.define(\"select2/diacritics\", [], function () {\n        return {\n          \"Ⓐ\": \"A\",\n          \"Ａ\": \"A\",\n          \"À\": \"A\",\n          \"Á\": \"A\",\n          \"Â\": \"A\",\n          \"Ầ\": \"A\",\n          \"Ấ\": \"A\",\n          \"Ẫ\": \"A\",\n          \"Ẩ\": \"A\",\n          \"Ã\": \"A\",\n          \"Ā\": \"A\",\n          \"Ă\": \"A\",\n          \"Ằ\": \"A\",\n          \"Ắ\": \"A\",\n          \"Ẵ\": \"A\",\n          \"Ẳ\": \"A\",\n          \"Ȧ\": \"A\",\n          \"Ǡ\": \"A\",\n          \"Ä\": \"A\",\n          \"Ǟ\": \"A\",\n          \"Ả\": \"A\",\n          \"Å\": \"A\",\n          \"Ǻ\": \"A\",\n          \"Ǎ\": \"A\",\n          \"Ȁ\": \"A\",\n          \"Ȃ\": \"A\",\n          \"Ạ\": \"A\",\n          \"Ậ\": \"A\",\n          \"Ặ\": \"A\",\n          \"Ḁ\": \"A\",\n          \"Ą\": \"A\",\n          \"Ⱥ\": \"A\",\n          \"Ɐ\": \"A\",\n          \"Ꜳ\": \"AA\",\n          \"Æ\": \"AE\",\n          \"Ǽ\": \"AE\",\n          \"Ǣ\": \"AE\",\n          \"Ꜵ\": \"AO\",\n          \"Ꜷ\": \"AU\",\n          \"Ꜹ\": \"AV\",\n          \"Ꜻ\": \"AV\",\n          \"Ꜽ\": \"AY\",\n          \"Ⓑ\": \"B\",\n          \"Ｂ\": \"B\",\n          \"Ḃ\": \"B\",\n          \"Ḅ\": \"B\",\n          \"Ḇ\": \"B\",\n          \"Ƀ\": \"B\",\n          \"Ƃ\": \"B\",\n          \"Ɓ\": \"B\",\n          \"Ⓒ\": \"C\",\n          \"Ｃ\": \"C\",\n          \"Ć\": \"C\",\n          \"Ĉ\": \"C\",\n          \"Ċ\": \"C\",\n          \"Č\": \"C\",\n          \"Ç\": \"C\",\n          \"Ḉ\": \"C\",\n          \"Ƈ\": \"C\",\n          \"Ȼ\": \"C\",\n          \"Ꜿ\": \"C\",\n          \"Ⓓ\": \"D\",\n          \"Ｄ\": \"D\",\n          \"Ḋ\": \"D\",\n          \"Ď\": \"D\",\n          \"Ḍ\": \"D\",\n          \"Ḑ\": \"D\",\n          \"Ḓ\": \"D\",\n          \"Ḏ\": \"D\",\n          \"Đ\": \"D\",\n          \"Ƌ\": \"D\",\n          \"Ɗ\": \"D\",\n          \"Ɖ\": \"D\",\n          \"Ꝺ\": \"D\",\n          \"Ǳ\": \"DZ\",\n          \"Ǆ\": \"DZ\",\n          \"ǲ\": \"Dz\",\n          \"ǅ\": \"Dz\",\n          \"Ⓔ\": \"E\",\n          \"Ｅ\": \"E\",\n          \"È\": \"E\",\n          \"É\": \"E\",\n          \"Ê\": \"E\",\n          \"Ề\": \"E\",\n          \"Ế\": \"E\",\n          \"Ễ\": \"E\",\n          \"Ể\": \"E\",\n          \"Ẽ\": \"E\",\n          \"Ē\": \"E\",\n          \"Ḕ\": \"E\",\n          \"Ḗ\": \"E\",\n          \"Ĕ\": \"E\",\n          \"Ė\": \"E\",\n          \"Ë\": \"E\",\n          \"Ẻ\": \"E\",\n          \"Ě\": \"E\",\n          \"Ȅ\": \"E\",\n          \"Ȇ\": \"E\",\n          \"Ẹ\": \"E\",\n          \"Ệ\": \"E\",\n          \"Ȩ\": \"E\",\n          \"Ḝ\": \"E\",\n          \"Ę\": \"E\",\n          \"Ḙ\": \"E\",\n          \"Ḛ\": \"E\",\n          \"Ɛ\": \"E\",\n          \"Ǝ\": \"E\",\n          \"Ⓕ\": \"F\",\n          \"Ｆ\": \"F\",\n          \"Ḟ\": \"F\",\n          \"Ƒ\": \"F\",\n          \"Ꝼ\": \"F\",\n          \"Ⓖ\": \"G\",\n          \"Ｇ\": \"G\",\n          \"Ǵ\": \"G\",\n          \"Ĝ\": \"G\",\n          \"Ḡ\": \"G\",\n          \"Ğ\": \"G\",\n          \"Ġ\": \"G\",\n          \"Ǧ\": \"G\",\n          \"Ģ\": \"G\",\n          \"Ǥ\": \"G\",\n          \"Ɠ\": \"G\",\n          \"Ꞡ\": \"G\",\n          \"Ᵹ\": \"G\",\n          \"Ꝿ\": \"G\",\n          \"Ⓗ\": \"H\",\n          \"Ｈ\": \"H\",\n          \"Ĥ\": \"H\",\n          \"Ḣ\": \"H\",\n          \"Ḧ\": \"H\",\n          \"Ȟ\": \"H\",\n          \"Ḥ\": \"H\",\n          \"Ḩ\": \"H\",\n          \"Ḫ\": \"H\",\n          \"Ħ\": \"H\",\n          \"Ⱨ\": \"H\",\n          \"Ⱶ\": \"H\",\n          \"Ɥ\": \"H\",\n          \"Ⓘ\": \"I\",\n          \"Ｉ\": \"I\",\n          \"Ì\": \"I\",\n          \"Í\": \"I\",\n          \"Î\": \"I\",\n          \"Ĩ\": \"I\",\n          \"Ī\": \"I\",\n          \"Ĭ\": \"I\",\n          \"İ\": \"I\",\n          \"Ï\": \"I\",\n          \"Ḯ\": \"I\",\n          \"Ỉ\": \"I\",\n          \"Ǐ\": \"I\",\n          \"Ȉ\": \"I\",\n          \"Ȋ\": \"I\",\n          \"Ị\": \"I\",\n          \"Į\": \"I\",\n          \"Ḭ\": \"I\",\n          \"Ɨ\": \"I\",\n          \"Ⓙ\": \"J\",\n          \"Ｊ\": \"J\",\n          \"Ĵ\": \"J\",\n          \"Ɉ\": \"J\",\n          \"Ⓚ\": \"K\",\n          \"Ｋ\": \"K\",\n          \"Ḱ\": \"K\",\n          \"Ǩ\": \"K\",\n          \"Ḳ\": \"K\",\n          \"Ķ\": \"K\",\n          \"Ḵ\": \"K\",\n          \"Ƙ\": \"K\",\n          \"Ⱪ\": \"K\",\n          \"Ꝁ\": \"K\",\n          \"Ꝃ\": \"K\",\n          \"Ꝅ\": \"K\",\n          \"Ꞣ\": \"K\",\n          \"Ⓛ\": \"L\",\n          \"Ｌ\": \"L\",\n          \"Ŀ\": \"L\",\n          \"Ĺ\": \"L\",\n          \"Ľ\": \"L\",\n          \"Ḷ\": \"L\",\n          \"Ḹ\": \"L\",\n          \"Ļ\": \"L\",\n          \"Ḽ\": \"L\",\n          \"Ḻ\": \"L\",\n          \"Ł\": \"L\",\n          \"Ƚ\": \"L\",\n          \"Ɫ\": \"L\",\n          \"Ⱡ\": \"L\",\n          \"Ꝉ\": \"L\",\n          \"Ꝇ\": \"L\",\n          \"Ꞁ\": \"L\",\n          \"Ǉ\": \"LJ\",\n          \"ǈ\": \"Lj\",\n          \"Ⓜ\": \"M\",\n          \"Ｍ\": \"M\",\n          \"Ḿ\": \"M\",\n          \"Ṁ\": \"M\",\n          \"Ṃ\": \"M\",\n          \"Ɱ\": \"M\",\n          \"Ɯ\": \"M\",\n          \"Ⓝ\": \"N\",\n          \"Ｎ\": \"N\",\n          \"Ǹ\": \"N\",\n          \"Ń\": \"N\",\n          \"Ñ\": \"N\",\n          \"Ṅ\": \"N\",\n          \"Ň\": \"N\",\n          \"Ṇ\": \"N\",\n          \"Ņ\": \"N\",\n          \"Ṋ\": \"N\",\n          \"Ṉ\": \"N\",\n          \"Ƞ\": \"N\",\n          \"Ɲ\": \"N\",\n          \"Ꞑ\": \"N\",\n          \"Ꞥ\": \"N\",\n          \"Ǌ\": \"NJ\",\n          \"ǋ\": \"Nj\",\n          \"Ⓞ\": \"O\",\n          \"Ｏ\": \"O\",\n          \"Ò\": \"O\",\n          \"Ó\": \"O\",\n          \"Ô\": \"O\",\n          \"Ồ\": \"O\",\n          \"Ố\": \"O\",\n          \"Ỗ\": \"O\",\n          \"Ổ\": \"O\",\n          \"Õ\": \"O\",\n          \"Ṍ\": \"O\",\n          \"Ȭ\": \"O\",\n          \"Ṏ\": \"O\",\n          \"Ō\": \"O\",\n          \"Ṑ\": \"O\",\n          \"Ṓ\": \"O\",\n          \"Ŏ\": \"O\",\n          \"Ȯ\": \"O\",\n          \"Ȱ\": \"O\",\n          \"Ö\": \"O\",\n          \"Ȫ\": \"O\",\n          \"Ỏ\": \"O\",\n          \"Ő\": \"O\",\n          \"Ǒ\": \"O\",\n          \"Ȍ\": \"O\",\n          \"Ȏ\": \"O\",\n          \"Ơ\": \"O\",\n          \"Ờ\": \"O\",\n          \"Ớ\": \"O\",\n          \"Ỡ\": \"O\",\n          \"Ở\": \"O\",\n          \"Ợ\": \"O\",\n          \"Ọ\": \"O\",\n          \"Ộ\": \"O\",\n          \"Ǫ\": \"O\",\n          \"Ǭ\": \"O\",\n          \"Ø\": \"O\",\n          \"Ǿ\": \"O\",\n          \"Ɔ\": \"O\",\n          \"Ɵ\": \"O\",\n          \"Ꝋ\": \"O\",\n          \"Ꝍ\": \"O\",\n          \"Œ\": \"OE\",\n          \"Ƣ\": \"OI\",\n          \"Ꝏ\": \"OO\",\n          \"Ȣ\": \"OU\",\n          \"Ⓟ\": \"P\",\n          \"Ｐ\": \"P\",\n          \"Ṕ\": \"P\",\n          \"Ṗ\": \"P\",\n          \"Ƥ\": \"P\",\n          \"Ᵽ\": \"P\",\n          \"Ꝑ\": \"P\",\n          \"Ꝓ\": \"P\",\n          \"Ꝕ\": \"P\",\n          \"Ⓠ\": \"Q\",\n          \"Ｑ\": \"Q\",\n          \"Ꝗ\": \"Q\",\n          \"Ꝙ\": \"Q\",\n          \"Ɋ\": \"Q\",\n          \"Ⓡ\": \"R\",\n          \"Ｒ\": \"R\",\n          \"Ŕ\": \"R\",\n          \"Ṙ\": \"R\",\n          \"Ř\": \"R\",\n          \"Ȑ\": \"R\",\n          \"Ȓ\": \"R\",\n          \"Ṛ\": \"R\",\n          \"Ṝ\": \"R\",\n          \"Ŗ\": \"R\",\n          \"Ṟ\": \"R\",\n          \"Ɍ\": \"R\",\n          \"Ɽ\": \"R\",\n          \"Ꝛ\": \"R\",\n          \"Ꞧ\": \"R\",\n          \"Ꞃ\": \"R\",\n          \"Ⓢ\": \"S\",\n          \"Ｓ\": \"S\",\n          \"ẞ\": \"S\",\n          \"Ś\": \"S\",\n          \"Ṥ\": \"S\",\n          \"Ŝ\": \"S\",\n          \"Ṡ\": \"S\",\n          \"Š\": \"S\",\n          \"Ṧ\": \"S\",\n          \"Ṣ\": \"S\",\n          \"Ṩ\": \"S\",\n          \"Ș\": \"S\",\n          \"Ş\": \"S\",\n          \"Ȿ\": \"S\",\n          \"Ꞩ\": \"S\",\n          \"Ꞅ\": \"S\",\n          \"Ⓣ\": \"T\",\n          \"Ｔ\": \"T\",\n          \"Ṫ\": \"T\",\n          \"Ť\": \"T\",\n          \"Ṭ\": \"T\",\n          \"Ț\": \"T\",\n          \"Ţ\": \"T\",\n          \"Ṱ\": \"T\",\n          \"Ṯ\": \"T\",\n          \"Ŧ\": \"T\",\n          \"Ƭ\": \"T\",\n          \"Ʈ\": \"T\",\n          \"Ⱦ\": \"T\",\n          \"Ꞇ\": \"T\",\n          \"Ꜩ\": \"TZ\",\n          \"Ⓤ\": \"U\",\n          \"Ｕ\": \"U\",\n          \"Ù\": \"U\",\n          \"Ú\": \"U\",\n          \"Û\": \"U\",\n          \"Ũ\": \"U\",\n          \"Ṹ\": \"U\",\n          \"Ū\": \"U\",\n          \"Ṻ\": \"U\",\n          \"Ŭ\": \"U\",\n          \"Ü\": \"U\",\n          \"Ǜ\": \"U\",\n          \"Ǘ\": \"U\",\n          \"Ǖ\": \"U\",\n          \"Ǚ\": \"U\",\n          \"Ủ\": \"U\",\n          \"Ů\": \"U\",\n          \"Ű\": \"U\",\n          \"Ǔ\": \"U\",\n          \"Ȕ\": \"U\",\n          \"Ȗ\": \"U\",\n          \"Ư\": \"U\",\n          \"Ừ\": \"U\",\n          \"Ứ\": \"U\",\n          \"Ữ\": \"U\",\n          \"Ử\": \"U\",\n          \"Ự\": \"U\",\n          \"Ụ\": \"U\",\n          \"Ṳ\": \"U\",\n          \"Ų\": \"U\",\n          \"Ṷ\": \"U\",\n          \"Ṵ\": \"U\",\n          \"Ʉ\": \"U\",\n          \"Ⓥ\": \"V\",\n          \"Ｖ\": \"V\",\n          \"Ṽ\": \"V\",\n          \"Ṿ\": \"V\",\n          \"Ʋ\": \"V\",\n          \"Ꝟ\": \"V\",\n          \"Ʌ\": \"V\",\n          \"Ꝡ\": \"VY\",\n          \"Ⓦ\": \"W\",\n          \"Ｗ\": \"W\",\n          \"Ẁ\": \"W\",\n          \"Ẃ\": \"W\",\n          \"Ŵ\": \"W\",\n          \"Ẇ\": \"W\",\n          \"Ẅ\": \"W\",\n          \"Ẉ\": \"W\",\n          \"Ⱳ\": \"W\",\n          \"Ⓧ\": \"X\",\n          \"Ｘ\": \"X\",\n          \"Ẋ\": \"X\",\n          \"Ẍ\": \"X\",\n          \"Ⓨ\": \"Y\",\n          \"Ｙ\": \"Y\",\n          \"Ỳ\": \"Y\",\n          \"Ý\": \"Y\",\n          \"Ŷ\": \"Y\",\n          \"Ỹ\": \"Y\",\n          \"Ȳ\": \"Y\",\n          \"Ẏ\": \"Y\",\n          \"Ÿ\": \"Y\",\n          \"Ỷ\": \"Y\",\n          \"Ỵ\": \"Y\",\n          \"Ƴ\": \"Y\",\n          \"Ɏ\": \"Y\",\n          \"Ỿ\": \"Y\",\n          \"Ⓩ\": \"Z\",\n          \"Ｚ\": \"Z\",\n          \"Ź\": \"Z\",\n          \"Ẑ\": \"Z\",\n          \"Ż\": \"Z\",\n          \"Ž\": \"Z\",\n          \"Ẓ\": \"Z\",\n          \"Ẕ\": \"Z\",\n          \"Ƶ\": \"Z\",\n          \"Ȥ\": \"Z\",\n          \"Ɀ\": \"Z\",\n          \"Ⱬ\": \"Z\",\n          \"Ꝣ\": \"Z\",\n          \"ⓐ\": \"a\",\n          \"ａ\": \"a\",\n          \"ẚ\": \"a\",\n          \"à\": \"a\",\n          \"á\": \"a\",\n          \"â\": \"a\",\n          \"ầ\": \"a\",\n          \"ấ\": \"a\",\n          \"ẫ\": \"a\",\n          \"ẩ\": \"a\",\n          \"ã\": \"a\",\n          \"ā\": \"a\",\n          \"ă\": \"a\",\n          \"ằ\": \"a\",\n          \"ắ\": \"a\",\n          \"ẵ\": \"a\",\n          \"ẳ\": \"a\",\n          \"ȧ\": \"a\",\n          \"ǡ\": \"a\",\n          \"ä\": \"a\",\n          \"ǟ\": \"a\",\n          \"ả\": \"a\",\n          \"å\": \"a\",\n          \"ǻ\": \"a\",\n          \"ǎ\": \"a\",\n          \"ȁ\": \"a\",\n          \"ȃ\": \"a\",\n          \"ạ\": \"a\",\n          \"ậ\": \"a\",\n          \"ặ\": \"a\",\n          \"ḁ\": \"a\",\n          \"ą\": \"a\",\n          \"ⱥ\": \"a\",\n          \"ɐ\": \"a\",\n          \"ꜳ\": \"aa\",\n          \"æ\": \"ae\",\n          \"ǽ\": \"ae\",\n          \"ǣ\": \"ae\",\n          \"ꜵ\": \"ao\",\n          \"ꜷ\": \"au\",\n          \"ꜹ\": \"av\",\n          \"ꜻ\": \"av\",\n          \"ꜽ\": \"ay\",\n          \"ⓑ\": \"b\",\n          \"ｂ\": \"b\",\n          \"ḃ\": \"b\",\n          \"ḅ\": \"b\",\n          \"ḇ\": \"b\",\n          \"ƀ\": \"b\",\n          \"ƃ\": \"b\",\n          \"ɓ\": \"b\",\n          \"ⓒ\": \"c\",\n          \"ｃ\": \"c\",\n          \"ć\": \"c\",\n          \"ĉ\": \"c\",\n          \"ċ\": \"c\",\n          \"č\": \"c\",\n          \"ç\": \"c\",\n          \"ḉ\": \"c\",\n          \"ƈ\": \"c\",\n          \"ȼ\": \"c\",\n          \"ꜿ\": \"c\",\n          \"ↄ\": \"c\",\n          \"ⓓ\": \"d\",\n          \"ｄ\": \"d\",\n          \"ḋ\": \"d\",\n          \"ď\": \"d\",\n          \"ḍ\": \"d\",\n          \"ḑ\": \"d\",\n          \"ḓ\": \"d\",\n          \"ḏ\": \"d\",\n          \"đ\": \"d\",\n          \"ƌ\": \"d\",\n          \"ɖ\": \"d\",\n          \"ɗ\": \"d\",\n          \"ꝺ\": \"d\",\n          \"ǳ\": \"dz\",\n          \"ǆ\": \"dz\",\n          \"ⓔ\": \"e\",\n          \"ｅ\": \"e\",\n          \"è\": \"e\",\n          \"é\": \"e\",\n          \"ê\": \"e\",\n          \"ề\": \"e\",\n          \"ế\": \"e\",\n          \"ễ\": \"e\",\n          \"ể\": \"e\",\n          \"ẽ\": \"e\",\n          \"ē\": \"e\",\n          \"ḕ\": \"e\",\n          \"ḗ\": \"e\",\n          \"ĕ\": \"e\",\n          \"ė\": \"e\",\n          \"ë\": \"e\",\n          \"ẻ\": \"e\",\n          \"ě\": \"e\",\n          \"ȅ\": \"e\",\n          \"ȇ\": \"e\",\n          \"ẹ\": \"e\",\n          \"ệ\": \"e\",\n          \"ȩ\": \"e\",\n          \"ḝ\": \"e\",\n          \"ę\": \"e\",\n          \"ḙ\": \"e\",\n          \"ḛ\": \"e\",\n          \"ɇ\": \"e\",\n          \"ɛ\": \"e\",\n          \"ǝ\": \"e\",\n          \"ⓕ\": \"f\",\n          \"ｆ\": \"f\",\n          \"ḟ\": \"f\",\n          \"ƒ\": \"f\",\n          \"ꝼ\": \"f\",\n          \"ⓖ\": \"g\",\n          \"ｇ\": \"g\",\n          \"ǵ\": \"g\",\n          \"ĝ\": \"g\",\n          \"ḡ\": \"g\",\n          \"ğ\": \"g\",\n          \"ġ\": \"g\",\n          \"ǧ\": \"g\",\n          \"ģ\": \"g\",\n          \"ǥ\": \"g\",\n          \"ɠ\": \"g\",\n          \"ꞡ\": \"g\",\n          \"ᵹ\": \"g\",\n          \"ꝿ\": \"g\",\n          \"ⓗ\": \"h\",\n          \"ｈ\": \"h\",\n          \"ĥ\": \"h\",\n          \"ḣ\": \"h\",\n          \"ḧ\": \"h\",\n          \"ȟ\": \"h\",\n          \"ḥ\": \"h\",\n          \"ḩ\": \"h\",\n          \"ḫ\": \"h\",\n          \"ẖ\": \"h\",\n          \"ħ\": \"h\",\n          \"ⱨ\": \"h\",\n          \"ⱶ\": \"h\",\n          \"ɥ\": \"h\",\n          \"ƕ\": \"hv\",\n          \"ⓘ\": \"i\",\n          \"ｉ\": \"i\",\n          \"ì\": \"i\",\n          \"í\": \"i\",\n          \"î\": \"i\",\n          \"ĩ\": \"i\",\n          \"ī\": \"i\",\n          \"ĭ\": \"i\",\n          \"ï\": \"i\",\n          \"ḯ\": \"i\",\n          \"ỉ\": \"i\",\n          \"ǐ\": \"i\",\n          \"ȉ\": \"i\",\n          \"ȋ\": \"i\",\n          \"ị\": \"i\",\n          \"į\": \"i\",\n          \"ḭ\": \"i\",\n          \"ɨ\": \"i\",\n          \"ı\": \"i\",\n          \"ⓙ\": \"j\",\n          \"ｊ\": \"j\",\n          \"ĵ\": \"j\",\n          \"ǰ\": \"j\",\n          \"ɉ\": \"j\",\n          \"ⓚ\": \"k\",\n          \"ｋ\": \"k\",\n          \"ḱ\": \"k\",\n          \"ǩ\": \"k\",\n          \"ḳ\": \"k\",\n          \"ķ\": \"k\",\n          \"ḵ\": \"k\",\n          \"ƙ\": \"k\",\n          \"ⱪ\": \"k\",\n          \"ꝁ\": \"k\",\n          \"ꝃ\": \"k\",\n          \"ꝅ\": \"k\",\n          \"ꞣ\": \"k\",\n          \"ⓛ\": \"l\",\n          \"ｌ\": \"l\",\n          \"ŀ\": \"l\",\n          \"ĺ\": \"l\",\n          \"ľ\": \"l\",\n          \"ḷ\": \"l\",\n          \"ḹ\": \"l\",\n          \"ļ\": \"l\",\n          \"ḽ\": \"l\",\n          \"ḻ\": \"l\",\n          \"ſ\": \"l\",\n          \"ł\": \"l\",\n          \"ƚ\": \"l\",\n          \"ɫ\": \"l\",\n          \"ⱡ\": \"l\",\n          \"ꝉ\": \"l\",\n          \"ꞁ\": \"l\",\n          \"ꝇ\": \"l\",\n          \"ǉ\": \"lj\",\n          \"ⓜ\": \"m\",\n          \"ｍ\": \"m\",\n          \"ḿ\": \"m\",\n          \"ṁ\": \"m\",\n          \"ṃ\": \"m\",\n          \"ɱ\": \"m\",\n          \"ɯ\": \"m\",\n          \"ⓝ\": \"n\",\n          \"ｎ\": \"n\",\n          \"ǹ\": \"n\",\n          \"ń\": \"n\",\n          \"ñ\": \"n\",\n          \"ṅ\": \"n\",\n          \"ň\": \"n\",\n          \"ṇ\": \"n\",\n          \"ņ\": \"n\",\n          \"ṋ\": \"n\",\n          \"ṉ\": \"n\",\n          \"ƞ\": \"n\",\n          \"ɲ\": \"n\",\n          \"ŉ\": \"n\",\n          \"ꞑ\": \"n\",\n          \"ꞥ\": \"n\",\n          \"ǌ\": \"nj\",\n          \"ⓞ\": \"o\",\n          \"ｏ\": \"o\",\n          \"ò\": \"o\",\n          \"ó\": \"o\",\n          \"ô\": \"o\",\n          \"ồ\": \"o\",\n          \"ố\": \"o\",\n          \"ỗ\": \"o\",\n          \"ổ\": \"o\",\n          \"õ\": \"o\",\n          \"ṍ\": \"o\",\n          \"ȭ\": \"o\",\n          \"ṏ\": \"o\",\n          \"ō\": \"o\",\n          \"ṑ\": \"o\",\n          \"ṓ\": \"o\",\n          \"ŏ\": \"o\",\n          \"ȯ\": \"o\",\n          \"ȱ\": \"o\",\n          \"ö\": \"o\",\n          \"ȫ\": \"o\",\n          \"ỏ\": \"o\",\n          \"ő\": \"o\",\n          \"ǒ\": \"o\",\n          \"ȍ\": \"o\",\n          \"ȏ\": \"o\",\n          \"ơ\": \"o\",\n          \"ờ\": \"o\",\n          \"ớ\": \"o\",\n          \"ỡ\": \"o\",\n          \"ở\": \"o\",\n          \"ợ\": \"o\",\n          \"ọ\": \"o\",\n          \"ộ\": \"o\",\n          \"ǫ\": \"o\",\n          \"ǭ\": \"o\",\n          \"ø\": \"o\",\n          \"ǿ\": \"o\",\n          \"ɔ\": \"o\",\n          \"ꝋ\": \"o\",\n          \"ꝍ\": \"o\",\n          \"ɵ\": \"o\",\n          \"œ\": \"oe\",\n          \"ƣ\": \"oi\",\n          \"ȣ\": \"ou\",\n          \"ꝏ\": \"oo\",\n          \"ⓟ\": \"p\",\n          \"ｐ\": \"p\",\n          \"ṕ\": \"p\",\n          \"ṗ\": \"p\",\n          \"ƥ\": \"p\",\n          \"ᵽ\": \"p\",\n          \"ꝑ\": \"p\",\n          \"ꝓ\": \"p\",\n          \"ꝕ\": \"p\",\n          \"ⓠ\": \"q\",\n          \"ｑ\": \"q\",\n          \"ɋ\": \"q\",\n          \"ꝗ\": \"q\",\n          \"ꝙ\": \"q\",\n          \"ⓡ\": \"r\",\n          \"ｒ\": \"r\",\n          \"ŕ\": \"r\",\n          \"ṙ\": \"r\",\n          \"ř\": \"r\",\n          \"ȑ\": \"r\",\n          \"ȓ\": \"r\",\n          \"ṛ\": \"r\",\n          \"ṝ\": \"r\",\n          \"ŗ\": \"r\",\n          \"ṟ\": \"r\",\n          \"ɍ\": \"r\",\n          \"ɽ\": \"r\",\n          \"ꝛ\": \"r\",\n          \"ꞧ\": \"r\",\n          \"ꞃ\": \"r\",\n          \"ⓢ\": \"s\",\n          \"ｓ\": \"s\",\n          \"ß\": \"s\",\n          \"ś\": \"s\",\n          \"ṥ\": \"s\",\n          \"ŝ\": \"s\",\n          \"ṡ\": \"s\",\n          \"š\": \"s\",\n          \"ṧ\": \"s\",\n          \"ṣ\": \"s\",\n          \"ṩ\": \"s\",\n          \"ș\": \"s\",\n          \"ş\": \"s\",\n          \"ȿ\": \"s\",\n          \"ꞩ\": \"s\",\n          \"ꞅ\": \"s\",\n          \"ẛ\": \"s\",\n          \"ⓣ\": \"t\",\n          \"ｔ\": \"t\",\n          \"ṫ\": \"t\",\n          \"ẗ\": \"t\",\n          \"ť\": \"t\",\n          \"ṭ\": \"t\",\n          \"ț\": \"t\",\n          \"ţ\": \"t\",\n          \"ṱ\": \"t\",\n          \"ṯ\": \"t\",\n          \"ŧ\": \"t\",\n          \"ƭ\": \"t\",\n          \"ʈ\": \"t\",\n          \"ⱦ\": \"t\",\n          \"ꞇ\": \"t\",\n          \"ꜩ\": \"tz\",\n          \"ⓤ\": \"u\",\n          \"ｕ\": \"u\",\n          \"ù\": \"u\",\n          \"ú\": \"u\",\n          \"û\": \"u\",\n          \"ũ\": \"u\",\n          \"ṹ\": \"u\",\n          \"ū\": \"u\",\n          \"ṻ\": \"u\",\n          \"ŭ\": \"u\",\n          \"ü\": \"u\",\n          \"ǜ\": \"u\",\n          \"ǘ\": \"u\",\n          \"ǖ\": \"u\",\n          \"ǚ\": \"u\",\n          \"ủ\": \"u\",\n          \"ů\": \"u\",\n          \"ű\": \"u\",\n          \"ǔ\": \"u\",\n          \"ȕ\": \"u\",\n          \"ȗ\": \"u\",\n          \"ư\": \"u\",\n          \"ừ\": \"u\",\n          \"ứ\": \"u\",\n          \"ữ\": \"u\",\n          \"ử\": \"u\",\n          \"ự\": \"u\",\n          \"ụ\": \"u\",\n          \"ṳ\": \"u\",\n          \"ų\": \"u\",\n          \"ṷ\": \"u\",\n          \"ṵ\": \"u\",\n          \"ʉ\": \"u\",\n          \"ⓥ\": \"v\",\n          \"ｖ\": \"v\",\n          \"ṽ\": \"v\",\n          \"ṿ\": \"v\",\n          \"ʋ\": \"v\",\n          \"ꝟ\": \"v\",\n          \"ʌ\": \"v\",\n          \"ꝡ\": \"vy\",\n          \"ⓦ\": \"w\",\n          \"ｗ\": \"w\",\n          \"ẁ\": \"w\",\n          \"ẃ\": \"w\",\n          \"ŵ\": \"w\",\n          \"ẇ\": \"w\",\n          \"ẅ\": \"w\",\n          \"ẘ\": \"w\",\n          \"ẉ\": \"w\",\n          \"ⱳ\": \"w\",\n          \"ⓧ\": \"x\",\n          \"ｘ\": \"x\",\n          \"ẋ\": \"x\",\n          \"ẍ\": \"x\",\n          \"ⓨ\": \"y\",\n          \"ｙ\": \"y\",\n          \"ỳ\": \"y\",\n          \"ý\": \"y\",\n          \"ŷ\": \"y\",\n          \"ỹ\": \"y\",\n          \"ȳ\": \"y\",\n          \"ẏ\": \"y\",\n          \"ÿ\": \"y\",\n          \"ỷ\": \"y\",\n          \"ẙ\": \"y\",\n          \"ỵ\": \"y\",\n          \"ƴ\": \"y\",\n          \"ɏ\": \"y\",\n          \"ỿ\": \"y\",\n          \"ⓩ\": \"z\",\n          \"ｚ\": \"z\",\n          \"ź\": \"z\",\n          \"ẑ\": \"z\",\n          \"ż\": \"z\",\n          \"ž\": \"z\",\n          \"ẓ\": \"z\",\n          \"ẕ\": \"z\",\n          \"ƶ\": \"z\",\n          \"ȥ\": \"z\",\n          \"ɀ\": \"z\",\n          \"ⱬ\": \"z\",\n          \"ꝣ\": \"z\",\n          \"Ά\": \"Α\",\n          \"Έ\": \"Ε\",\n          \"Ή\": \"Η\",\n          \"Ί\": \"Ι\",\n          \"Ϊ\": \"Ι\",\n          \"Ό\": \"Ο\",\n          \"Ύ\": \"Υ\",\n          \"Ϋ\": \"Υ\",\n          \"Ώ\": \"Ω\",\n          \"ά\": \"α\",\n          \"έ\": \"ε\",\n          \"ή\": \"η\",\n          \"ί\": \"ι\",\n          \"ϊ\": \"ι\",\n          \"ΐ\": \"ι\",\n          \"ό\": \"ο\",\n          \"ύ\": \"υ\",\n          \"ϋ\": \"υ\",\n          \"ΰ\": \"υ\",\n          \"ώ\": \"ω\",\n          \"ς\": \"σ\",\n          \"’\": \"'\"\n        };\n      }), e.define(\"select2/data/base\", [\"../utils\"], function (i) {\n        function n(e, t) {\n          n.__super__.constructor.call(this);\n        }\n        return i.Extend(n, i.Observable), n.prototype.current = function (e) {\n          throw new Error(\"The `current` method must be defined in child classes.\");\n        }, n.prototype.query = function (e, t) {\n          throw new Error(\"The `query` method must be defined in child classes.\");\n        }, n.prototype.bind = function (e, t) {}, n.prototype.destroy = function () {}, n.prototype.generateResultId = function (e, t) {\n          var n = e.id + \"-result-\";\n          return n += i.generateChars(4), null != t.id ? n += \"-\" + t.id.toString() : n += \"-\" + i.generateChars(4), n;\n        }, n;\n      }), e.define(\"select2/data/select\", [\"./base\", \"../utils\", \"jquery\"], function (e, a, l) {\n        function n(e, t) {\n          this.$element = e, this.options = t, n.__super__.constructor.call(this);\n        }\n        return a.Extend(n, e), n.prototype.current = function (e) {\n          var n = [],\n            i = this;\n          this.$element.find(\":selected\").each(function () {\n            var e = l(this),\n              t = i.item(e);\n            n.push(t);\n          }), e(n);\n        }, n.prototype.select = function (r) {\n          var o = this;\n          if (r.selected = !0, l(r.element).is(\"option\")) return r.element.selected = !0, void this.$element.trigger(\"input\").trigger(\"change\");\n          if (this.$element.prop(\"multiple\")) this.current(function (e) {\n            var t = [];\n            (r = [r]).push.apply(r, e);\n            for (var n = 0; n < r.length; n++) {\n              var i = r[n].id;\n              -1 === l.inArray(i, t) && t.push(i);\n            }\n            o.$element.val(t), o.$element.trigger(\"input\").trigger(\"change\");\n          });else {\n            var e = r.id;\n            this.$element.val(e), this.$element.trigger(\"input\").trigger(\"change\");\n          }\n        }, n.prototype.unselect = function (r) {\n          var o = this;\n          if (this.$element.prop(\"multiple\")) {\n            if (r.selected = !1, l(r.element).is(\"option\")) return r.element.selected = !1, void this.$element.trigger(\"input\").trigger(\"change\");\n            this.current(function (e) {\n              for (var t = [], n = 0; n < e.length; n++) {\n                var i = e[n].id;\n                i !== r.id && -1 === l.inArray(i, t) && t.push(i);\n              }\n              o.$element.val(t), o.$element.trigger(\"input\").trigger(\"change\");\n            });\n          }\n        }, n.prototype.bind = function (e, t) {\n          var n = this;\n          (this.container = e).on(\"select\", function (e) {\n            n.select(e.data);\n          }), e.on(\"unselect\", function (e) {\n            n.unselect(e.data);\n          });\n        }, n.prototype.destroy = function () {\n          this.$element.find(\"*\").each(function () {\n            a.RemoveData(this);\n          });\n        }, n.prototype.query = function (i, e) {\n          var r = [],\n            o = this;\n          this.$element.children().each(function () {\n            var e = l(this);\n            if (e.is(\"option\") || e.is(\"optgroup\")) {\n              var t = o.item(e),\n                n = o.matches(i, t);\n              null !== n && r.push(n);\n            }\n          }), e({\n            results: r\n          });\n        }, n.prototype.addOptions = function (e) {\n          a.appendMany(this.$element, e);\n        }, n.prototype.option = function (e) {\n          var t;\n          e.children ? (t = document.createElement(\"optgroup\")).label = e.text : void 0 !== (t = document.createElement(\"option\")).textContent ? t.textContent = e.text : t.innerText = e.text, void 0 !== e.id && (t.value = e.id), e.disabled && (t.disabled = !0), e.selected && (t.selected = !0), e.title && (t.title = e.title);\n          var n = l(t),\n            i = this._normalizeItem(e);\n          return i.element = t, a.StoreData(t, \"data\", i), n;\n        }, n.prototype.item = function (e) {\n          var t = {};\n          if (null != (t = a.GetData(e[0], \"data\"))) return t;\n          if (e.is(\"option\")) t = {\n            id: e.val(),\n            text: e.text(),\n            disabled: e.prop(\"disabled\"),\n            selected: e.prop(\"selected\"),\n            title: e.prop(\"title\")\n          };else if (e.is(\"optgroup\")) {\n            t = {\n              text: e.prop(\"label\"),\n              children: [],\n              title: e.prop(\"title\")\n            };\n            for (var n = e.children(\"option\"), i = [], r = 0; r < n.length; r++) {\n              var o = l(n[r]),\n                s = this.item(o);\n              i.push(s);\n            }\n            t.children = i;\n          }\n          return (t = this._normalizeItem(t)).element = e[0], a.StoreData(e[0], \"data\", t), t;\n        }, n.prototype._normalizeItem = function (e) {\n          e !== Object(e) && (e = {\n            id: e,\n            text: e\n          });\n          return null != (e = l.extend({}, {\n            text: \"\"\n          }, e)).id && (e.id = e.id.toString()), null != e.text && (e.text = e.text.toString()), null == e._resultId && e.id && null != this.container && (e._resultId = this.generateResultId(this.container, e)), l.extend({}, {\n            selected: !1,\n            disabled: !1\n          }, e);\n        }, n.prototype.matches = function (e, t) {\n          return this.options.get(\"matcher\")(e, t);\n        }, n;\n      }), e.define(\"select2/data/array\", [\"./select\", \"../utils\", \"jquery\"], function (e, f, g) {\n        function i(e, t) {\n          this._dataToConvert = t.get(\"data\") || [], i.__super__.constructor.call(this, e, t);\n        }\n        return f.Extend(i, e), i.prototype.bind = function (e, t) {\n          i.__super__.bind.call(this, e, t), this.addOptions(this.convertToOptions(this._dataToConvert));\n        }, i.prototype.select = function (n) {\n          var e = this.$element.find(\"option\").filter(function (e, t) {\n            return t.value == n.id.toString();\n          });\n          0 === e.length && (e = this.option(n), this.addOptions(e)), i.__super__.select.call(this, n);\n        }, i.prototype.convertToOptions = function (e) {\n          var t = this,\n            n = this.$element.find(\"option\"),\n            i = n.map(function () {\n              return t.item(g(this)).id;\n            }).get(),\n            r = [];\n          function o(e) {\n            return function () {\n              return g(this).val() == e.id;\n            };\n          }\n          for (var s = 0; s < e.length; s++) {\n            var a = this._normalizeItem(e[s]);\n            if (0 <= g.inArray(a.id, i)) {\n              var l = n.filter(o(a)),\n                c = this.item(l),\n                u = g.extend(!0, {}, a, c),\n                d = this.option(u);\n              l.replaceWith(d);\n            } else {\n              var p = this.option(a);\n              if (a.children) {\n                var h = this.convertToOptions(a.children);\n                f.appendMany(p, h);\n              }\n              r.push(p);\n            }\n          }\n          return r;\n        }, i;\n      }), e.define(\"select2/data/ajax\", [\"./array\", \"../utils\", \"jquery\"], function (e, t, o) {\n        function n(e, t) {\n          this.ajaxOptions = this._applyDefaults(t.get(\"ajax\")), null != this.ajaxOptions.processResults && (this.processResults = this.ajaxOptions.processResults), n.__super__.constructor.call(this, e, t);\n        }\n        return t.Extend(n, e), n.prototype._applyDefaults = function (e) {\n          var t = {\n            data: function data(e) {\n              return o.extend({}, e, {\n                q: e.term\n              });\n            },\n            transport: function transport(e, t, n) {\n              var i = o.ajax(e);\n              return i.then(t), i.fail(n), i;\n            }\n          };\n          return o.extend({}, t, e, !0);\n        }, n.prototype.processResults = function (e) {\n          return e;\n        }, n.prototype.query = function (n, i) {\n          var r = this;\n          null != this._request && (o.isFunction(this._request.abort) && this._request.abort(), this._request = null);\n          var t = o.extend({\n            type: \"GET\"\n          }, this.ajaxOptions);\n          function e() {\n            var e = t.transport(t, function (e) {\n              var t = r.processResults(e, n);\n              r.options.get(\"debug\") && window.console && console.error && (t && t.results && o.isArray(t.results) || console.error(\"Select2: The AJAX results did not return an array in the `results` key of the response.\")), i(t);\n            }, function () {\n              \"status\" in e && (0 === e.status || \"0\" === e.status) || r.trigger(\"results:message\", {\n                message: \"errorLoading\"\n              });\n            });\n            r._request = e;\n          }\n          \"function\" == typeof t.url && (t.url = t.url.call(this.$element, n)), \"function\" == typeof t.data && (t.data = t.data.call(this.$element, n)), this.ajaxOptions.delay && null != n.term ? (this._queryTimeout && window.clearTimeout(this._queryTimeout), this._queryTimeout = window.setTimeout(e, this.ajaxOptions.delay)) : e();\n        }, n;\n      }), e.define(\"select2/data/tags\", [\"jquery\"], function (u) {\n        function e(e, t, n) {\n          var i = n.get(\"tags\"),\n            r = n.get(\"createTag\");\n          void 0 !== r && (this.createTag = r);\n          var o = n.get(\"insertTag\");\n          if (void 0 !== o && (this.insertTag = o), e.call(this, t, n), u.isArray(i)) for (var s = 0; s < i.length; s++) {\n            var a = i[s],\n              l = this._normalizeItem(a),\n              c = this.option(l);\n            this.$element.append(c);\n          }\n        }\n        return e.prototype.query = function (e, c, u) {\n          var d = this;\n          this._removeOldTags(), null != c.term && null == c.page ? e.call(this, c, function e(t, n) {\n            for (var i = t.results, r = 0; r < i.length; r++) {\n              var o = i[r],\n                s = null != o.children && !e({\n                  results: o.children\n                }, !0);\n              if ((o.text || \"\").toUpperCase() === (c.term || \"\").toUpperCase() || s) return !n && (t.data = i, void u(t));\n            }\n            if (n) return !0;\n            var a = d.createTag(c);\n            if (null != a) {\n              var l = d.option(a);\n              l.attr(\"data-select2-tag\", !0), d.addOptions([l]), d.insertTag(i, a);\n            }\n            t.results = i, u(t);\n          }) : e.call(this, c, u);\n        }, e.prototype.createTag = function (e, t) {\n          var n = u.trim(t.term);\n          return \"\" === n ? null : {\n            id: n,\n            text: n\n          };\n        }, e.prototype.insertTag = function (e, t, n) {\n          t.unshift(n);\n        }, e.prototype._removeOldTags = function (e) {\n          this.$element.find(\"option[data-select2-tag]\").each(function () {\n            this.selected || u(this).remove();\n          });\n        }, e;\n      }), e.define(\"select2/data/tokenizer\", [\"jquery\"], function (d) {\n        function e(e, t, n) {\n          var i = n.get(\"tokenizer\");\n          void 0 !== i && (this.tokenizer = i), e.call(this, t, n);\n        }\n        return e.prototype.bind = function (e, t, n) {\n          e.call(this, t, n), this.$search = t.dropdown.$search || t.selection.$search || n.find(\".select2-search__field\");\n        }, e.prototype.query = function (e, t, n) {\n          var r = this;\n          t.term = t.term || \"\";\n          var i = this.tokenizer(t, this.options, function (e) {\n            var t,\n              n = r._normalizeItem(e);\n            if (!r.$element.find(\"option\").filter(function () {\n              return d(this).val() === n.id;\n            }).length) {\n              var i = r.option(n);\n              i.attr(\"data-select2-tag\", !0), r._removeOldTags(), r.addOptions([i]);\n            }\n            t = n, r.trigger(\"select\", {\n              data: t\n            });\n          });\n          i.term !== t.term && (this.$search.length && (this.$search.val(i.term), this.$search.trigger(\"focus\")), t.term = i.term), e.call(this, t, n);\n        }, e.prototype.tokenizer = function (e, t, n, i) {\n          for (var r = n.get(\"tokenSeparators\") || [], o = t.term, s = 0, a = this.createTag || function (e) {\n              return {\n                id: e.term,\n                text: e.term\n              };\n            }; s < o.length;) {\n            var l = o[s];\n            if (-1 !== d.inArray(l, r)) {\n              var c = o.substr(0, s),\n                u = a(d.extend({}, t, {\n                  term: c\n                }));\n              null != u ? (i(u), o = o.substr(s + 1) || \"\", s = 0) : s++;\n            } else s++;\n          }\n          return {\n            term: o\n          };\n        }, e;\n      }), e.define(\"select2/data/minimumInputLength\", [], function () {\n        function e(e, t, n) {\n          this.minimumInputLength = n.get(\"minimumInputLength\"), e.call(this, t, n);\n        }\n        return e.prototype.query = function (e, t, n) {\n          t.term = t.term || \"\", t.term.length < this.minimumInputLength ? this.trigger(\"results:message\", {\n            message: \"inputTooShort\",\n            args: {\n              minimum: this.minimumInputLength,\n              input: t.term,\n              params: t\n            }\n          }) : e.call(this, t, n);\n        }, e;\n      }), e.define(\"select2/data/maximumInputLength\", [], function () {\n        function e(e, t, n) {\n          this.maximumInputLength = n.get(\"maximumInputLength\"), e.call(this, t, n);\n        }\n        return e.prototype.query = function (e, t, n) {\n          t.term = t.term || \"\", 0 < this.maximumInputLength && t.term.length > this.maximumInputLength ? this.trigger(\"results:message\", {\n            message: \"inputTooLong\",\n            args: {\n              maximum: this.maximumInputLength,\n              input: t.term,\n              params: t\n            }\n          }) : e.call(this, t, n);\n        }, e;\n      }), e.define(\"select2/data/maximumSelectionLength\", [], function () {\n        function e(e, t, n) {\n          this.maximumSelectionLength = n.get(\"maximumSelectionLength\"), e.call(this, t, n);\n        }\n        return e.prototype.bind = function (e, t, n) {\n          var i = this;\n          e.call(this, t, n), t.on(\"select\", function () {\n            i._checkIfMaximumSelected();\n          });\n        }, e.prototype.query = function (e, t, n) {\n          var i = this;\n          this._checkIfMaximumSelected(function () {\n            e.call(i, t, n);\n          });\n        }, e.prototype._checkIfMaximumSelected = function (e, n) {\n          var i = this;\n          this.current(function (e) {\n            var t = null != e ? e.length : 0;\n            0 < i.maximumSelectionLength && t >= i.maximumSelectionLength ? i.trigger(\"results:message\", {\n              message: \"maximumSelected\",\n              args: {\n                maximum: i.maximumSelectionLength\n              }\n            }) : n && n();\n          });\n        }, e;\n      }), e.define(\"select2/dropdown\", [\"jquery\", \"./utils\"], function (t, e) {\n        function n(e, t) {\n          this.$element = e, this.options = t, n.__super__.constructor.call(this);\n        }\n        return e.Extend(n, e.Observable), n.prototype.render = function () {\n          var e = t('<span class=\"select2-dropdown\"><span class=\"select2-results\"></span></span>');\n          return e.attr(\"dir\", this.options.get(\"dir\")), this.$dropdown = e;\n        }, n.prototype.bind = function () {}, n.prototype.position = function (e, t) {}, n.prototype.destroy = function () {\n          this.$dropdown.remove();\n        }, n;\n      }), e.define(\"select2/dropdown/search\", [\"jquery\", \"../utils\"], function (o, e) {\n        function t() {}\n        return t.prototype.render = function (e) {\n          var t = e.call(this),\n            n = o('<span class=\"select2-search select2-search--dropdown\"><input class=\"select2-search__field\" type=\"search\" tabindex=\"-1\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" role=\"searchbox\" aria-autocomplete=\"list\" /></span>');\n          return this.$searchContainer = n, this.$search = n.find(\"input\"), t.prepend(n), t;\n        }, t.prototype.bind = function (e, t, n) {\n          var i = this,\n            r = t.id + \"-results\";\n          e.call(this, t, n), this.$search.on(\"keydown\", function (e) {\n            i.trigger(\"keypress\", e), i._keyUpPrevented = e.isDefaultPrevented();\n          }), this.$search.on(\"input\", function (e) {\n            o(this).off(\"keyup\");\n          }), this.$search.on(\"keyup input\", function (e) {\n            i.handleSearch(e);\n          }), t.on(\"open\", function () {\n            i.$search.attr(\"tabindex\", 0), i.$search.attr(\"aria-controls\", r), i.$search.trigger(\"focus\"), window.setTimeout(function () {\n              i.$search.trigger(\"focus\");\n            }, 0);\n          }), t.on(\"close\", function () {\n            i.$search.attr(\"tabindex\", -1), i.$search.removeAttr(\"aria-controls\"), i.$search.removeAttr(\"aria-activedescendant\"), i.$search.val(\"\"), i.$search.trigger(\"blur\");\n          }), t.on(\"focus\", function () {\n            t.isOpen() || i.$search.trigger(\"focus\");\n          }), t.on(\"results:all\", function (e) {\n            null != e.query.term && \"\" !== e.query.term || (i.showSearch(e) ? i.$searchContainer.removeClass(\"select2-search--hide\") : i.$searchContainer.addClass(\"select2-search--hide\"));\n          }), t.on(\"results:focus\", function (e) {\n            e.data._resultId ? i.$search.attr(\"aria-activedescendant\", e.data._resultId) : i.$search.removeAttr(\"aria-activedescendant\");\n          });\n        }, t.prototype.handleSearch = function (e) {\n          if (!this._keyUpPrevented) {\n            var t = this.$search.val();\n            this.trigger(\"query\", {\n              term: t\n            });\n          }\n          this._keyUpPrevented = !1;\n        }, t.prototype.showSearch = function (e, t) {\n          return !0;\n        }, t;\n      }), e.define(\"select2/dropdown/hidePlaceholder\", [], function () {\n        function e(e, t, n, i) {\n          this.placeholder = this.normalizePlaceholder(n.get(\"placeholder\")), e.call(this, t, n, i);\n        }\n        return e.prototype.append = function (e, t) {\n          t.results = this.removePlaceholder(t.results), e.call(this, t);\n        }, e.prototype.normalizePlaceholder = function (e, t) {\n          return \"string\" == typeof t && (t = {\n            id: \"\",\n            text: t\n          }), t;\n        }, e.prototype.removePlaceholder = function (e, t) {\n          for (var n = t.slice(0), i = t.length - 1; 0 <= i; i--) {\n            var r = t[i];\n            this.placeholder.id === r.id && n.splice(i, 1);\n          }\n          return n;\n        }, e;\n      }), e.define(\"select2/dropdown/infiniteScroll\", [\"jquery\"], function (n) {\n        function e(e, t, n, i) {\n          this.lastParams = {}, e.call(this, t, n, i), this.$loadingMore = this.createLoadingMore(), this.loading = !1;\n        }\n        return e.prototype.append = function (e, t) {\n          this.$loadingMore.remove(), this.loading = !1, e.call(this, t), this.showLoadingMore(t) && (this.$results.append(this.$loadingMore), this.loadMoreIfNeeded());\n        }, e.prototype.bind = function (e, t, n) {\n          var i = this;\n          e.call(this, t, n), t.on(\"query\", function (e) {\n            i.lastParams = e, i.loading = !0;\n          }), t.on(\"query:append\", function (e) {\n            i.lastParams = e, i.loading = !0;\n          }), this.$results.on(\"scroll\", this.loadMoreIfNeeded.bind(this));\n        }, e.prototype.loadMoreIfNeeded = function () {\n          var e = n.contains(document.documentElement, this.$loadingMore[0]);\n          if (!this.loading && e) {\n            var t = this.$results.offset().top + this.$results.outerHeight(!1);\n            this.$loadingMore.offset().top + this.$loadingMore.outerHeight(!1) <= t + 50 && this.loadMore();\n          }\n        }, e.prototype.loadMore = function () {\n          this.loading = !0;\n          var e = n.extend({}, {\n            page: 1\n          }, this.lastParams);\n          e.page++, this.trigger(\"query:append\", e);\n        }, e.prototype.showLoadingMore = function (e, t) {\n          return t.pagination && t.pagination.more;\n        }, e.prototype.createLoadingMore = function () {\n          var e = n('<li class=\"select2-results__option select2-results__option--load-more\"role=\"option\" aria-disabled=\"true\"></li>'),\n            t = this.options.get(\"translations\").get(\"loadingMore\");\n          return e.html(t(this.lastParams)), e;\n        }, e;\n      }), e.define(\"select2/dropdown/attachBody\", [\"jquery\", \"../utils\"], function (f, a) {\n        function e(e, t, n) {\n          this.$dropdownParent = f(n.get(\"dropdownParent\") || document.body), e.call(this, t, n);\n        }\n        return e.prototype.bind = function (e, t, n) {\n          var i = this;\n          e.call(this, t, n), t.on(\"open\", function () {\n            i._showDropdown(), i._attachPositioningHandler(t), i._bindContainerResultHandlers(t);\n          }), t.on(\"close\", function () {\n            i._hideDropdown(), i._detachPositioningHandler(t);\n          }), this.$dropdownContainer.on(\"mousedown\", function (e) {\n            e.stopPropagation();\n          });\n        }, e.prototype.destroy = function (e) {\n          e.call(this), this.$dropdownContainer.remove();\n        }, e.prototype.position = function (e, t, n) {\n          t.attr(\"class\", n.attr(\"class\")), t.removeClass(\"select2\"), t.addClass(\"select2-container--open\"), t.css({\n            position: \"absolute\",\n            top: -999999\n          }), this.$container = n;\n        }, e.prototype.render = function (e) {\n          var t = f(\"<span></span>\"),\n            n = e.call(this);\n          return t.append(n), this.$dropdownContainer = t;\n        }, e.prototype._hideDropdown = function (e) {\n          this.$dropdownContainer.detach();\n        }, e.prototype._bindContainerResultHandlers = function (e, t) {\n          if (!this._containerResultsHandlersBound) {\n            var n = this;\n            t.on(\"results:all\", function () {\n              n._positionDropdown(), n._resizeDropdown();\n            }), t.on(\"results:append\", function () {\n              n._positionDropdown(), n._resizeDropdown();\n            }), t.on(\"results:message\", function () {\n              n._positionDropdown(), n._resizeDropdown();\n            }), t.on(\"select\", function () {\n              n._positionDropdown(), n._resizeDropdown();\n            }), t.on(\"unselect\", function () {\n              n._positionDropdown(), n._resizeDropdown();\n            }), this._containerResultsHandlersBound = !0;\n          }\n        }, e.prototype._attachPositioningHandler = function (e, t) {\n          var n = this,\n            i = \"scroll.select2.\" + t.id,\n            r = \"resize.select2.\" + t.id,\n            o = \"orientationchange.select2.\" + t.id,\n            s = this.$container.parents().filter(a.hasScroll);\n          s.each(function () {\n            a.StoreData(this, \"select2-scroll-position\", {\n              x: f(this).scrollLeft(),\n              y: f(this).scrollTop()\n            });\n          }), s.on(i, function (e) {\n            var t = a.GetData(this, \"select2-scroll-position\");\n            f(this).scrollTop(t.y);\n          }), f(window).on(i + \" \" + r + \" \" + o, function (e) {\n            n._positionDropdown(), n._resizeDropdown();\n          });\n        }, e.prototype._detachPositioningHandler = function (e, t) {\n          var n = \"scroll.select2.\" + t.id,\n            i = \"resize.select2.\" + t.id,\n            r = \"orientationchange.select2.\" + t.id;\n          this.$container.parents().filter(a.hasScroll).off(n), f(window).off(n + \" \" + i + \" \" + r);\n        }, e.prototype._positionDropdown = function () {\n          var e = f(window),\n            t = this.$dropdown.hasClass(\"select2-dropdown--above\"),\n            n = this.$dropdown.hasClass(\"select2-dropdown--below\"),\n            i = null,\n            r = this.$container.offset();\n          r.bottom = r.top + this.$container.outerHeight(!1);\n          var o = {\n            height: this.$container.outerHeight(!1)\n          };\n          o.top = r.top, o.bottom = r.top + o.height;\n          var s = this.$dropdown.outerHeight(!1),\n            a = e.scrollTop(),\n            l = e.scrollTop() + e.height(),\n            c = a < r.top - s,\n            u = l > r.bottom + s,\n            d = {\n              left: r.left,\n              top: o.bottom\n            },\n            p = this.$dropdownParent;\n          \"static\" === p.css(\"position\") && (p = p.offsetParent());\n          var h = {\n            top: 0,\n            left: 0\n          };\n          (f.contains(document.body, p[0]) || p[0].isConnected) && (h = p.offset()), d.top -= h.top, d.left -= h.left, t || n || (i = \"below\"), u || !c || t ? !c && u && t && (i = \"below\") : i = \"above\", (\"above\" == i || t && \"below\" !== i) && (d.top = o.top - h.top - s), null != i && (this.$dropdown.removeClass(\"select2-dropdown--below select2-dropdown--above\").addClass(\"select2-dropdown--\" + i), this.$container.removeClass(\"select2-container--below select2-container--above\").addClass(\"select2-container--\" + i)), this.$dropdownContainer.css(d);\n        }, e.prototype._resizeDropdown = function () {\n          var e = {\n            width: this.$container.outerWidth(!1) + \"px\"\n          };\n          this.options.get(\"dropdownAutoWidth\") && (e.minWidth = e.width, e.position = \"relative\", e.width = \"auto\"), this.$dropdown.css(e);\n        }, e.prototype._showDropdown = function (e) {\n          this.$dropdownContainer.appendTo(this.$dropdownParent), this._positionDropdown(), this._resizeDropdown();\n        }, e;\n      }), e.define(\"select2/dropdown/minimumResultsForSearch\", [], function () {\n        function e(e, t, n, i) {\n          this.minimumResultsForSearch = n.get(\"minimumResultsForSearch\"), this.minimumResultsForSearch < 0 && (this.minimumResultsForSearch = 1 / 0), e.call(this, t, n, i);\n        }\n        return e.prototype.showSearch = function (e, t) {\n          return !(function e(t) {\n            for (var n = 0, i = 0; i < t.length; i++) {\n              var r = t[i];\n              r.children ? n += e(r.children) : n++;\n            }\n            return n;\n          }(t.data.results) < this.minimumResultsForSearch) && e.call(this, t);\n        }, e;\n      }), e.define(\"select2/dropdown/selectOnClose\", [\"../utils\"], function (o) {\n        function e() {}\n        return e.prototype.bind = function (e, t, n) {\n          var i = this;\n          e.call(this, t, n), t.on(\"close\", function (e) {\n            i._handleSelectOnClose(e);\n          });\n        }, e.prototype._handleSelectOnClose = function (e, t) {\n          if (t && null != t.originalSelect2Event) {\n            var n = t.originalSelect2Event;\n            if (\"select\" === n._type || \"unselect\" === n._type) return;\n          }\n          var i = this.getHighlightedResults();\n          if (!(i.length < 1)) {\n            var r = o.GetData(i[0], \"data\");\n            null != r.element && r.element.selected || null == r.element && r.selected || this.trigger(\"select\", {\n              data: r\n            });\n          }\n        }, e;\n      }), e.define(\"select2/dropdown/closeOnSelect\", [], function () {\n        function e() {}\n        return e.prototype.bind = function (e, t, n) {\n          var i = this;\n          e.call(this, t, n), t.on(\"select\", function (e) {\n            i._selectTriggered(e);\n          }), t.on(\"unselect\", function (e) {\n            i._selectTriggered(e);\n          });\n        }, e.prototype._selectTriggered = function (e, t) {\n          var n = t.originalEvent;\n          n && (n.ctrlKey || n.metaKey) || this.trigger(\"close\", {\n            originalEvent: n,\n            originalSelect2Event: t\n          });\n        }, e;\n      }), e.define(\"select2/i18n/en\", [], function () {\n        return {\n          errorLoading: function errorLoading() {\n            return \"The results could not be loaded.\";\n          },\n          inputTooLong: function inputTooLong(e) {\n            var t = e.input.length - e.maximum,\n              n = \"Please delete \" + t + \" character\";\n            return 1 != t && (n += \"s\"), n;\n          },\n          inputTooShort: function inputTooShort(e) {\n            return \"Please enter \" + (e.minimum - e.input.length) + \" or more characters\";\n          },\n          loadingMore: function loadingMore() {\n            return \"Loading more results…\";\n          },\n          maximumSelected: function maximumSelected(e) {\n            var t = \"You can only select \" + e.maximum + \" item\";\n            return 1 != e.maximum && (t += \"s\"), t;\n          },\n          noResults: function noResults() {\n            return \"No results found\";\n          },\n          searching: function searching() {\n            return \"Searching…\";\n          },\n          removeAllItems: function removeAllItems() {\n            return \"Remove all items\";\n          }\n        };\n      }), e.define(\"select2/defaults\", [\"jquery\", \"require\", \"./results\", \"./selection/single\", \"./selection/multiple\", \"./selection/placeholder\", \"./selection/allowClear\", \"./selection/search\", \"./selection/eventRelay\", \"./utils\", \"./translation\", \"./diacritics\", \"./data/select\", \"./data/array\", \"./data/ajax\", \"./data/tags\", \"./data/tokenizer\", \"./data/minimumInputLength\", \"./data/maximumInputLength\", \"./data/maximumSelectionLength\", \"./dropdown\", \"./dropdown/search\", \"./dropdown/hidePlaceholder\", \"./dropdown/infiniteScroll\", \"./dropdown/attachBody\", \"./dropdown/minimumResultsForSearch\", \"./dropdown/selectOnClose\", \"./dropdown/closeOnSelect\", \"./i18n/en\"], function (c, u, d, p, h, f, g, m, v, y, s, t, _, w, $, b, A, x, D, S, C, E, O, T, q, j, L, I, e) {\n        function n() {\n          this.reset();\n        }\n        return n.prototype.apply = function (e) {\n          if (null == (e = c.extend(!0, {}, this.defaults, e)).dataAdapter) {\n            if (null != e.ajax ? e.dataAdapter = $ : null != e.data ? e.dataAdapter = w : e.dataAdapter = _, 0 < e.minimumInputLength && (e.dataAdapter = y.Decorate(e.dataAdapter, x)), 0 < e.maximumInputLength && (e.dataAdapter = y.Decorate(e.dataAdapter, D)), 0 < e.maximumSelectionLength && (e.dataAdapter = y.Decorate(e.dataAdapter, S)), e.tags && (e.dataAdapter = y.Decorate(e.dataAdapter, b)), null == e.tokenSeparators && null == e.tokenizer || (e.dataAdapter = y.Decorate(e.dataAdapter, A)), null != e.query) {\n              var t = u(e.amdBase + \"compat/query\");\n              e.dataAdapter = y.Decorate(e.dataAdapter, t);\n            }\n            if (null != e.initSelection) {\n              var n = u(e.amdBase + \"compat/initSelection\");\n              e.dataAdapter = y.Decorate(e.dataAdapter, n);\n            }\n          }\n          if (null == e.resultsAdapter && (e.resultsAdapter = d, null != e.ajax && (e.resultsAdapter = y.Decorate(e.resultsAdapter, T)), null != e.placeholder && (e.resultsAdapter = y.Decorate(e.resultsAdapter, O)), e.selectOnClose && (e.resultsAdapter = y.Decorate(e.resultsAdapter, L))), null == e.dropdownAdapter) {\n            if (e.multiple) e.dropdownAdapter = C;else {\n              var i = y.Decorate(C, E);\n              e.dropdownAdapter = i;\n            }\n            if (0 !== e.minimumResultsForSearch && (e.dropdownAdapter = y.Decorate(e.dropdownAdapter, j)), e.closeOnSelect && (e.dropdownAdapter = y.Decorate(e.dropdownAdapter, I)), null != e.dropdownCssClass || null != e.dropdownCss || null != e.adaptDropdownCssClass) {\n              var r = u(e.amdBase + \"compat/dropdownCss\");\n              e.dropdownAdapter = y.Decorate(e.dropdownAdapter, r);\n            }\n            e.dropdownAdapter = y.Decorate(e.dropdownAdapter, q);\n          }\n          if (null == e.selectionAdapter) {\n            if (e.multiple ? e.selectionAdapter = h : e.selectionAdapter = p, null != e.placeholder && (e.selectionAdapter = y.Decorate(e.selectionAdapter, f)), e.allowClear && (e.selectionAdapter = y.Decorate(e.selectionAdapter, g)), e.multiple && (e.selectionAdapter = y.Decorate(e.selectionAdapter, m)), null != e.containerCssClass || null != e.containerCss || null != e.adaptContainerCssClass) {\n              var o = u(e.amdBase + \"compat/containerCss\");\n              e.selectionAdapter = y.Decorate(e.selectionAdapter, o);\n            }\n            e.selectionAdapter = y.Decorate(e.selectionAdapter, v);\n          }\n          e.language = this._resolveLanguage(e.language), e.language.push(\"en\");\n          for (var s = [], a = 0; a < e.language.length; a++) {\n            var l = e.language[a];\n            -1 === s.indexOf(l) && s.push(l);\n          }\n          return e.language = s, e.translations = this._processTranslations(e.language, e.debug), e;\n        }, n.prototype.reset = function () {\n          function a(e) {\n            return e.replace(/[^\\u0000-\\u007E]/g, function (e) {\n              return t[e] || e;\n            });\n          }\n          this.defaults = {\n            amdBase: \"./\",\n            amdLanguageBase: \"./i18n/\",\n            closeOnSelect: !0,\n            debug: !1,\n            dropdownAutoWidth: !1,\n            escapeMarkup: y.escapeMarkup,\n            language: {},\n            matcher: function e(t, n) {\n              if (\"\" === c.trim(t.term)) return n;\n              if (n.children && 0 < n.children.length) {\n                for (var i = c.extend(!0, {}, n), r = n.children.length - 1; 0 <= r; r--) null == e(t, n.children[r]) && i.children.splice(r, 1);\n                return 0 < i.children.length ? i : e(t, i);\n              }\n              var o = a(n.text).toUpperCase(),\n                s = a(t.term).toUpperCase();\n              return -1 < o.indexOf(s) ? n : null;\n            },\n            minimumInputLength: 0,\n            maximumInputLength: 0,\n            maximumSelectionLength: 0,\n            minimumResultsForSearch: 0,\n            selectOnClose: !1,\n            scrollAfterSelect: !1,\n            sorter: function sorter(e) {\n              return e;\n            },\n            templateResult: function templateResult(e) {\n              return e.text;\n            },\n            templateSelection: function templateSelection(e) {\n              return e.text;\n            },\n            theme: \"default\",\n            width: \"resolve\"\n          };\n        }, n.prototype.applyFromElement = function (e, t) {\n          var n = e.language,\n            i = this.defaults.language,\n            r = t.prop(\"lang\"),\n            o = t.closest(\"[lang]\").prop(\"lang\"),\n            s = Array.prototype.concat.call(this._resolveLanguage(r), this._resolveLanguage(n), this._resolveLanguage(i), this._resolveLanguage(o));\n          return e.language = s, e;\n        }, n.prototype._resolveLanguage = function (e) {\n          if (!e) return [];\n          if (c.isEmptyObject(e)) return [];\n          if (c.isPlainObject(e)) return [e];\n          var t;\n          t = c.isArray(e) ? e : [e];\n          for (var n = [], i = 0; i < t.length; i++) if (n.push(t[i]), \"string\" == typeof t[i] && 0 < t[i].indexOf(\"-\")) {\n            var r = t[i].split(\"-\")[0];\n            n.push(r);\n          }\n          return n;\n        }, n.prototype._processTranslations = function (e, t) {\n          for (var n = new s(), i = 0; i < e.length; i++) {\n            var r = new s(),\n              o = e[i];\n            if (\"string\" == typeof o) try {\n              r = s.loadPath(o);\n            } catch (e) {\n              try {\n                o = this.defaults.amdLanguageBase + o, r = s.loadPath(o);\n              } catch (e) {\n                t && window.console && console.warn && console.warn('Select2: The language file for \"' + o + '\" could not be automatically loaded. A fallback will be used instead.');\n              }\n            } else r = c.isPlainObject(o) ? new s(o) : o;\n            n.extend(r);\n          }\n          return n;\n        }, n.prototype.set = function (e, t) {\n          var n = {};\n          n[c.camelCase(e)] = t;\n          var i = y._convertData(n);\n          c.extend(!0, this.defaults, i);\n        }, new n();\n      }), e.define(\"select2/options\", [\"require\", \"jquery\", \"./defaults\", \"./utils\"], function (i, d, r, p) {\n        function e(e, t) {\n          if (this.options = e, null != t && this.fromElement(t), null != t && (this.options = r.applyFromElement(this.options, t)), this.options = r.apply(this.options), t && t.is(\"input\")) {\n            var n = i(this.get(\"amdBase\") + \"compat/inputData\");\n            this.options.dataAdapter = p.Decorate(this.options.dataAdapter, n);\n          }\n        }\n        return e.prototype.fromElement = function (e) {\n          var t = [\"select2\"];\n          null == this.options.multiple && (this.options.multiple = e.prop(\"multiple\")), null == this.options.disabled && (this.options.disabled = e.prop(\"disabled\")), null == this.options.dir && (e.prop(\"dir\") ? this.options.dir = e.prop(\"dir\") : e.closest(\"[dir]\").prop(\"dir\") ? this.options.dir = e.closest(\"[dir]\").prop(\"dir\") : this.options.dir = \"ltr\"), e.prop(\"disabled\", this.options.disabled), e.prop(\"multiple\", this.options.multiple), p.GetData(e[0], \"select2Tags\") && (this.options.debug && window.console && console.warn && console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags=\"true\"` attributes and will be removed in future versions of Select2.'), p.StoreData(e[0], \"data\", p.GetData(e[0], \"select2Tags\")), p.StoreData(e[0], \"tags\", !0)), p.GetData(e[0], \"ajaxUrl\") && (this.options.debug && window.console && console.warn && console.warn(\"Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2.\"), e.attr(\"ajax--url\", p.GetData(e[0], \"ajaxUrl\")), p.StoreData(e[0], \"ajax-Url\", p.GetData(e[0], \"ajaxUrl\")));\n          var n = {};\n          function i(e, t) {\n            return t.toUpperCase();\n          }\n          for (var r = 0; r < e[0].attributes.length; r++) {\n            var o = e[0].attributes[r].name,\n              s = \"data-\";\n            if (o.substr(0, s.length) == s) {\n              var a = o.substring(s.length),\n                l = p.GetData(e[0], a);\n              n[a.replace(/-([a-z])/g, i)] = l;\n            }\n          }\n          d.fn.jquery && \"1.\" == d.fn.jquery.substr(0, 2) && e[0].dataset && (n = d.extend(!0, {}, e[0].dataset, n));\n          var c = d.extend(!0, {}, p.GetData(e[0]), n);\n          for (var u in c = p._convertData(c)) -1 < d.inArray(u, t) || (d.isPlainObject(this.options[u]) ? d.extend(this.options[u], c[u]) : this.options[u] = c[u]);\n          return this;\n        }, e.prototype.get = function (e) {\n          return this.options[e];\n        }, e.prototype.set = function (e, t) {\n          this.options[e] = t;\n        }, e;\n      }), e.define(\"select2/core\", [\"jquery\", \"./options\", \"./utils\", \"./keys\"], function (o, c, u, i) {\n        var d = function d(e, t) {\n          null != u.GetData(e[0], \"select2\") && u.GetData(e[0], \"select2\").destroy(), this.$element = e, this.id = this._generateId(e), t = t || {}, this.options = new c(t, e), d.__super__.constructor.call(this);\n          var n = e.attr(\"tabindex\") || 0;\n          u.StoreData(e[0], \"old-tabindex\", n), e.attr(\"tabindex\", \"-1\");\n          var i = this.options.get(\"dataAdapter\");\n          this.dataAdapter = new i(e, this.options);\n          var r = this.render();\n          this._placeContainer(r);\n          var o = this.options.get(\"selectionAdapter\");\n          this.selection = new o(e, this.options), this.$selection = this.selection.render(), this.selection.position(this.$selection, r);\n          var s = this.options.get(\"dropdownAdapter\");\n          this.dropdown = new s(e, this.options), this.$dropdown = this.dropdown.render(), this.dropdown.position(this.$dropdown, r);\n          var a = this.options.get(\"resultsAdapter\");\n          this.results = new a(e, this.options, this.dataAdapter), this.$results = this.results.render(), this.results.position(this.$results, this.$dropdown);\n          var l = this;\n          this._bindAdapters(), this._registerDomEvents(), this._registerDataEvents(), this._registerSelectionEvents(), this._registerDropdownEvents(), this._registerResultsEvents(), this._registerEvents(), this.dataAdapter.current(function (e) {\n            l.trigger(\"selection:update\", {\n              data: e\n            });\n          }), e.addClass(\"select2-hidden-accessible\"), e.attr(\"aria-hidden\", \"true\"), this._syncAttributes(), u.StoreData(e[0], \"select2\", this), e.data(\"select2\", this);\n        };\n        return u.Extend(d, u.Observable), d.prototype._generateId = function (e) {\n          return \"select2-\" + (null != e.attr(\"id\") ? e.attr(\"id\") : null != e.attr(\"name\") ? e.attr(\"name\") + \"-\" + u.generateChars(2) : u.generateChars(4)).replace(/(:|\\.|\\[|\\]|,)/g, \"\");\n        }, d.prototype._placeContainer = function (e) {\n          e.insertAfter(this.$element);\n          var t = this._resolveWidth(this.$element, this.options.get(\"width\"));\n          null != t && e.css(\"width\", t);\n        }, d.prototype._resolveWidth = function (e, t) {\n          var n = /^width:(([-+]?([0-9]*\\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;\n          if (\"resolve\" == t) {\n            var i = this._resolveWidth(e, \"style\");\n            return null != i ? i : this._resolveWidth(e, \"element\");\n          }\n          if (\"element\" == t) {\n            var r = e.outerWidth(!1);\n            return r <= 0 ? \"auto\" : r + \"px\";\n          }\n          if (\"style\" != t) return \"computedstyle\" != t ? t : window.getComputedStyle(e[0]).width;\n          var o = e.attr(\"style\");\n          if (\"string\" != typeof o) return null;\n          for (var s = o.split(\";\"), a = 0, l = s.length; a < l; a += 1) {\n            var c = s[a].replace(/\\s/g, \"\").match(n);\n            if (null !== c && 1 <= c.length) return c[1];\n          }\n          return null;\n        }, d.prototype._bindAdapters = function () {\n          this.dataAdapter.bind(this, this.$container), this.selection.bind(this, this.$container), this.dropdown.bind(this, this.$container), this.results.bind(this, this.$container);\n        }, d.prototype._registerDomEvents = function () {\n          var t = this;\n          this.$element.on(\"change.select2\", function () {\n            t.dataAdapter.current(function (e) {\n              t.trigger(\"selection:update\", {\n                data: e\n              });\n            });\n          }), this.$element.on(\"focus.select2\", function (e) {\n            t.trigger(\"focus\", e);\n          }), this._syncA = u.bind(this._syncAttributes, this), this._syncS = u.bind(this._syncSubtree, this), this.$element[0].attachEvent && this.$element[0].attachEvent(\"onpropertychange\", this._syncA);\n          var e = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;\n          null != e ? (this._observer = new e(function (e) {\n            t._syncA(), t._syncS(null, e);\n          }), this._observer.observe(this.$element[0], {\n            attributes: !0,\n            childList: !0,\n            subtree: !1\n          })) : this.$element[0].addEventListener && (this.$element[0].addEventListener(\"DOMAttrModified\", t._syncA, !1), this.$element[0].addEventListener(\"DOMNodeInserted\", t._syncS, !1), this.$element[0].addEventListener(\"DOMNodeRemoved\", t._syncS, !1));\n        }, d.prototype._registerDataEvents = function () {\n          var n = this;\n          this.dataAdapter.on(\"*\", function (e, t) {\n            n.trigger(e, t);\n          });\n        }, d.prototype._registerSelectionEvents = function () {\n          var n = this,\n            i = [\"toggle\", \"focus\"];\n          this.selection.on(\"toggle\", function () {\n            n.toggleDropdown();\n          }), this.selection.on(\"focus\", function (e) {\n            n.focus(e);\n          }), this.selection.on(\"*\", function (e, t) {\n            -1 === o.inArray(e, i) && n.trigger(e, t);\n          });\n        }, d.prototype._registerDropdownEvents = function () {\n          var n = this;\n          this.dropdown.on(\"*\", function (e, t) {\n            n.trigger(e, t);\n          });\n        }, d.prototype._registerResultsEvents = function () {\n          var n = this;\n          this.results.on(\"*\", function (e, t) {\n            n.trigger(e, t);\n          });\n        }, d.prototype._registerEvents = function () {\n          var n = this;\n          this.on(\"open\", function () {\n            n.$container.addClass(\"select2-container--open\");\n          }), this.on(\"close\", function () {\n            n.$container.removeClass(\"select2-container--open\");\n          }), this.on(\"enable\", function () {\n            n.$container.removeClass(\"select2-container--disabled\");\n          }), this.on(\"disable\", function () {\n            n.$container.addClass(\"select2-container--disabled\");\n          }), this.on(\"blur\", function () {\n            n.$container.removeClass(\"select2-container--focus\");\n          }), this.on(\"query\", function (t) {\n            n.isOpen() || n.trigger(\"open\", {}), this.dataAdapter.query(t, function (e) {\n              n.trigger(\"results:all\", {\n                data: e,\n                query: t\n              });\n            });\n          }), this.on(\"query:append\", function (t) {\n            this.dataAdapter.query(t, function (e) {\n              n.trigger(\"results:append\", {\n                data: e,\n                query: t\n              });\n            });\n          }), this.on(\"keypress\", function (e) {\n            var t = e.which;\n            n.isOpen() ? t === i.ESC || t === i.TAB || t === i.UP && e.altKey ? (n.close(e), e.preventDefault()) : t === i.ENTER ? (n.trigger(\"results:select\", {}), e.preventDefault()) : t === i.SPACE && e.ctrlKey ? (n.trigger(\"results:toggle\", {}), e.preventDefault()) : t === i.UP ? (n.trigger(\"results:previous\", {}), e.preventDefault()) : t === i.DOWN && (n.trigger(\"results:next\", {}), e.preventDefault()) : (t === i.ENTER || t === i.SPACE || t === i.DOWN && e.altKey) && (n.open(), e.preventDefault());\n          });\n        }, d.prototype._syncAttributes = function () {\n          this.options.set(\"disabled\", this.$element.prop(\"disabled\")), this.isDisabled() ? (this.isOpen() && this.close(), this.trigger(\"disable\", {})) : this.trigger(\"enable\", {});\n        }, d.prototype._isChangeMutation = function (e, t) {\n          var n = !1,\n            i = this;\n          if (!e || !e.target || \"OPTION\" === e.target.nodeName || \"OPTGROUP\" === e.target.nodeName) {\n            if (t) {\n              if (t.addedNodes && 0 < t.addedNodes.length) for (var r = 0; r < t.addedNodes.length; r++) {\n                t.addedNodes[r].selected && (n = !0);\n              } else t.removedNodes && 0 < t.removedNodes.length ? n = !0 : o.isArray(t) && o.each(t, function (e, t) {\n                if (i._isChangeMutation(e, t)) return !(n = !0);\n              });\n            } else n = !0;\n            return n;\n          }\n        }, d.prototype._syncSubtree = function (e, t) {\n          var n = this._isChangeMutation(e, t),\n            i = this;\n          n && this.dataAdapter.current(function (e) {\n            i.trigger(\"selection:update\", {\n              data: e\n            });\n          });\n        }, d.prototype.trigger = function (e, t) {\n          var n = d.__super__.trigger,\n            i = {\n              open: \"opening\",\n              close: \"closing\",\n              select: \"selecting\",\n              unselect: \"unselecting\",\n              clear: \"clearing\"\n            };\n          if (void 0 === t && (t = {}), e in i) {\n            var r = i[e],\n              o = {\n                prevented: !1,\n                name: e,\n                args: t\n              };\n            if (n.call(this, r, o), o.prevented) return void (t.prevented = !0);\n          }\n          n.call(this, e, t);\n        }, d.prototype.toggleDropdown = function () {\n          this.isDisabled() || (this.isOpen() ? this.close() : this.open());\n        }, d.prototype.open = function () {\n          this.isOpen() || this.isDisabled() || this.trigger(\"query\", {});\n        }, d.prototype.close = function (e) {\n          this.isOpen() && this.trigger(\"close\", {\n            originalEvent: e\n          });\n        }, d.prototype.isEnabled = function () {\n          return !this.isDisabled();\n        }, d.prototype.isDisabled = function () {\n          return this.options.get(\"disabled\");\n        }, d.prototype.isOpen = function () {\n          return this.$container.hasClass(\"select2-container--open\");\n        }, d.prototype.hasFocus = function () {\n          return this.$container.hasClass(\"select2-container--focus\");\n        }, d.prototype.focus = function (e) {\n          this.hasFocus() || (this.$container.addClass(\"select2-container--focus\"), this.trigger(\"focus\", {}));\n        }, d.prototype.enable = function (e) {\n          this.options.get(\"debug\") && window.console && console.warn && console.warn('Select2: The `select2(\"enable\")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop(\"disabled\") instead.'), null != e && 0 !== e.length || (e = [!0]);\n          var t = !e[0];\n          this.$element.prop(\"disabled\", t);\n        }, d.prototype.data = function () {\n          this.options.get(\"debug\") && 0 < arguments.length && window.console && console.warn && console.warn('Select2: Data can no longer be set using `select2(\"data\")`. You should consider setting the value instead using `$element.val()`.');\n          var t = [];\n          return this.dataAdapter.current(function (e) {\n            t = e;\n          }), t;\n        }, d.prototype.val = function (e) {\n          if (this.options.get(\"debug\") && window.console && console.warn && console.warn('Select2: The `select2(\"val\")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'), null == e || 0 === e.length) return this.$element.val();\n          var t = e[0];\n          o.isArray(t) && (t = o.map(t, function (e) {\n            return e.toString();\n          })), this.$element.val(t).trigger(\"input\").trigger(\"change\");\n        }, d.prototype.destroy = function () {\n          this.$container.remove(), this.$element[0].detachEvent && this.$element[0].detachEvent(\"onpropertychange\", this._syncA), null != this._observer ? (this._observer.disconnect(), this._observer = null) : this.$element[0].removeEventListener && (this.$element[0].removeEventListener(\"DOMAttrModified\", this._syncA, !1), this.$element[0].removeEventListener(\"DOMNodeInserted\", this._syncS, !1), this.$element[0].removeEventListener(\"DOMNodeRemoved\", this._syncS, !1)), this._syncA = null, this._syncS = null, this.$element.off(\".select2\"), this.$element.attr(\"tabindex\", u.GetData(this.$element[0], \"old-tabindex\")), this.$element.removeClass(\"select2-hidden-accessible\"), this.$element.attr(\"aria-hidden\", \"false\"), u.RemoveData(this.$element[0]), this.$element.removeData(\"select2\"), this.dataAdapter.destroy(), this.selection.destroy(), this.dropdown.destroy(), this.results.destroy(), this.dataAdapter = null, this.selection = null, this.dropdown = null, this.results = null;\n        }, d.prototype.render = function () {\n          var e = o('<span class=\"select2 select2-container\"><span class=\"selection\"></span><span class=\"dropdown-wrapper\" aria-hidden=\"true\"></span></span>');\n          return e.attr(\"dir\", this.options.get(\"dir\")), this.$container = e, this.$container.addClass(\"select2-container--\" + this.options.get(\"theme\")), u.StoreData(e[0], \"element\", this.$element), e;\n        }, d;\n      }), e.define(\"select2/compat/utils\", [\"jquery\"], function (s) {\n        return {\n          syncCssClasses: function syncCssClasses(e, t, n) {\n            var i,\n              r,\n              o = [];\n            (i = s.trim(e.attr(\"class\"))) && s((i = \"\" + i).split(/\\s+/)).each(function () {\n              0 === this.indexOf(\"select2-\") && o.push(this);\n            }), (i = s.trim(t.attr(\"class\"))) && s((i = \"\" + i).split(/\\s+/)).each(function () {\n              0 !== this.indexOf(\"select2-\") && null != (r = n(this)) && o.push(r);\n            }), e.attr(\"class\", o.join(\" \"));\n          }\n        };\n      }), e.define(\"select2/compat/containerCss\", [\"jquery\", \"./utils\"], function (s, a) {\n        function l(e) {\n          return null;\n        }\n        function e() {}\n        return e.prototype.render = function (e) {\n          var t = e.call(this),\n            n = this.options.get(\"containerCssClass\") || \"\";\n          s.isFunction(n) && (n = n(this.$element));\n          var i = this.options.get(\"adaptContainerCssClass\");\n          if (i = i || l, -1 !== n.indexOf(\":all:\")) {\n            n = n.replace(\":all:\", \"\");\n            var r = i;\n            i = function i(e) {\n              var t = r(e);\n              return null != t ? t + \" \" + e : e;\n            };\n          }\n          var o = this.options.get(\"containerCss\") || {};\n          return s.isFunction(o) && (o = o(this.$element)), a.syncCssClasses(t, this.$element, i), t.css(o), t.addClass(n), t;\n        }, e;\n      }), e.define(\"select2/compat/dropdownCss\", [\"jquery\", \"./utils\"], function (s, a) {\n        function l(e) {\n          return null;\n        }\n        function e() {}\n        return e.prototype.render = function (e) {\n          var t = e.call(this),\n            n = this.options.get(\"dropdownCssClass\") || \"\";\n          s.isFunction(n) && (n = n(this.$element));\n          var i = this.options.get(\"adaptDropdownCssClass\");\n          if (i = i || l, -1 !== n.indexOf(\":all:\")) {\n            n = n.replace(\":all:\", \"\");\n            var r = i;\n            i = function i(e) {\n              var t = r(e);\n              return null != t ? t + \" \" + e : e;\n            };\n          }\n          var o = this.options.get(\"dropdownCss\") || {};\n          return s.isFunction(o) && (o = o(this.$element)), a.syncCssClasses(t, this.$element, i), t.css(o), t.addClass(n), t;\n        }, e;\n      }), e.define(\"select2/compat/initSelection\", [\"jquery\"], function (i) {\n        function e(e, t, n) {\n          n.get(\"debug\") && window.console && console.warn && console.warn(\"Select2: The `initSelection` option has been deprecated in favor of a custom data adapter that overrides the `current` method. This method is now called multiple times instead of a single time when the instance is initialized. Support will be removed for the `initSelection` option in future versions of Select2\"), this.initSelection = n.get(\"initSelection\"), this._isInitialized = !1, e.call(this, t, n);\n        }\n        return e.prototype.current = function (e, t) {\n          var n = this;\n          this._isInitialized ? e.call(this, t) : this.initSelection.call(null, this.$element, function (e) {\n            n._isInitialized = !0, i.isArray(e) || (e = [e]), t(e);\n          });\n        }, e;\n      }), e.define(\"select2/compat/inputData\", [\"jquery\", \"../utils\"], function (s, i) {\n        function e(e, t, n) {\n          this._currentData = [], this._valueSeparator = n.get(\"valueSeparator\") || \",\", \"hidden\" === t.prop(\"type\") && n.get(\"debug\") && console && console.warn && console.warn(\"Select2: Using a hidden input with Select2 is no longer supported and may stop working in the future. It is recommended to use a `<select>` element instead.\"), e.call(this, t, n);\n        }\n        return e.prototype.current = function (e, t) {\n          function i(e, t) {\n            var n = [];\n            return e.selected || -1 !== s.inArray(e.id, t) ? (e.selected = !0, n.push(e)) : e.selected = !1, e.children && n.push.apply(n, i(e.children, t)), n;\n          }\n          for (var n = [], r = 0; r < this._currentData.length; r++) {\n            var o = this._currentData[r];\n            n.push.apply(n, i(o, this.$element.val().split(this._valueSeparator)));\n          }\n          t(n);\n        }, e.prototype.select = function (e, t) {\n          if (this.options.get(\"multiple\")) {\n            var n = this.$element.val();\n            n += this._valueSeparator + t.id, this.$element.val(n), this.$element.trigger(\"input\").trigger(\"change\");\n          } else this.current(function (e) {\n            s.map(e, function (e) {\n              e.selected = !1;\n            });\n          }), this.$element.val(t.id), this.$element.trigger(\"input\").trigger(\"change\");\n        }, e.prototype.unselect = function (e, r) {\n          var o = this;\n          r.selected = !1, this.current(function (e) {\n            for (var t = [], n = 0; n < e.length; n++) {\n              var i = e[n];\n              r.id != i.id && t.push(i.id);\n            }\n            o.$element.val(t.join(o._valueSeparator)), o.$element.trigger(\"input\").trigger(\"change\");\n          });\n        }, e.prototype.query = function (e, t, n) {\n          for (var i = [], r = 0; r < this._currentData.length; r++) {\n            var o = this._currentData[r],\n              s = this.matches(t, o);\n            null !== s && i.push(s);\n          }\n          n({\n            results: i\n          });\n        }, e.prototype.addOptions = function (e, t) {\n          var n = s.map(t, function (e) {\n            return i.GetData(e[0], \"data\");\n          });\n          this._currentData.push.apply(this._currentData, n);\n        }, e;\n      }), e.define(\"select2/compat/matcher\", [\"jquery\"], function (s) {\n        return function (o) {\n          return function (e, t) {\n            var n = s.extend(!0, {}, t);\n            if (null == e.term || \"\" === s.trim(e.term)) return n;\n            if (t.children) {\n              for (var i = t.children.length - 1; 0 <= i; i--) {\n                var r = t.children[i];\n                o(e.term, r.text, r) || n.children.splice(i, 1);\n              }\n              if (0 < n.children.length) return n;\n            }\n            return o(e.term, t.text, t) ? n : null;\n          };\n        };\n      }), e.define(\"select2/compat/query\", [], function () {\n        function e(e, t, n) {\n          n.get(\"debug\") && window.console && console.warn && console.warn(\"Select2: The `query` option has been deprecated in favor of a custom data adapter that overrides the `query` method. Support will be removed for the `query` option in future versions of Select2.\"), e.call(this, t, n);\n        }\n        return e.prototype.query = function (e, t, n) {\n          t.callback = n, this.options.get(\"query\").call(null, t);\n        }, e;\n      }), e.define(\"select2/dropdown/attachContainer\", [], function () {\n        function e(e, t, n) {\n          e.call(this, t, n);\n        }\n        return e.prototype.position = function (e, t, n) {\n          n.find(\".dropdown-wrapper\").append(t), t.addClass(\"select2-dropdown--below\"), n.addClass(\"select2-container--below\");\n        }, e;\n      }), e.define(\"select2/dropdown/stopPropagation\", [], function () {\n        function e() {}\n        return e.prototype.bind = function (e, t, n) {\n          e.call(this, t, n);\n          this.$dropdown.on([\"blur\", \"change\", \"click\", \"dblclick\", \"focus\", \"focusin\", \"focusout\", \"input\", \"keydown\", \"keyup\", \"keypress\", \"mousedown\", \"mouseenter\", \"mouseleave\", \"mousemove\", \"mouseover\", \"mouseup\", \"search\", \"touchend\", \"touchstart\"].join(\" \"), function (e) {\n            e.stopPropagation();\n          });\n        }, e;\n      }), e.define(\"select2/selection/stopPropagation\", [], function () {\n        function e() {}\n        return e.prototype.bind = function (e, t, n) {\n          e.call(this, t, n);\n          this.$selection.on([\"blur\", \"change\", \"click\", \"dblclick\", \"focus\", \"focusin\", \"focusout\", \"input\", \"keydown\", \"keyup\", \"keypress\", \"mousedown\", \"mouseenter\", \"mouseleave\", \"mousemove\", \"mouseover\", \"mouseup\", \"search\", \"touchend\", \"touchstart\"].join(\" \"), function (e) {\n            e.stopPropagation();\n          });\n        }, e;\n      }), l = function l(p) {\n        var h,\n          f,\n          e = [\"wheel\", \"mousewheel\", \"DOMMouseScroll\", \"MozMousePixelScroll\"],\n          t = \"onwheel\" in document || 9 <= document.documentMode ? [\"wheel\"] : [\"mousewheel\", \"DomMouseScroll\", \"MozMousePixelScroll\"],\n          g = Array.prototype.slice;\n        if (p.event.fixHooks) for (var n = e.length; n;) p.event.fixHooks[e[--n]] = p.event.mouseHooks;\n        var m = p.event.special.mousewheel = {\n          version: \"3.1.12\",\n          setup: function setup() {\n            if (this.addEventListener) for (var e = t.length; e;) this.addEventListener(t[--e], i, !1);else this.onmousewheel = i;\n            p.data(this, \"mousewheel-line-height\", m.getLineHeight(this)), p.data(this, \"mousewheel-page-height\", m.getPageHeight(this));\n          },\n          teardown: function teardown() {\n            if (this.removeEventListener) for (var e = t.length; e;) this.removeEventListener(t[--e], i, !1);else this.onmousewheel = null;\n            p.removeData(this, \"mousewheel-line-height\"), p.removeData(this, \"mousewheel-page-height\");\n          },\n          getLineHeight: function getLineHeight(e) {\n            var t = p(e),\n              n = t[\"offsetParent\" in p.fn ? \"offsetParent\" : \"parent\"]();\n            return n.length || (n = p(\"body\")), parseInt(n.css(\"fontSize\"), 10) || parseInt(t.css(\"fontSize\"), 10) || 16;\n          },\n          getPageHeight: function getPageHeight(e) {\n            return p(e).height();\n          },\n          settings: {\n            adjustOldDeltas: !0,\n            normalizeOffset: !0\n          }\n        };\n        function i(e) {\n          var t,\n            n = e || window.event,\n            i = g.call(arguments, 1),\n            r = 0,\n            o = 0,\n            s = 0,\n            a = 0,\n            l = 0;\n          if ((e = p.event.fix(n)).type = \"mousewheel\", \"detail\" in n && (s = -1 * n.detail), \"wheelDelta\" in n && (s = n.wheelDelta), \"wheelDeltaY\" in n && (s = n.wheelDeltaY), \"wheelDeltaX\" in n && (o = -1 * n.wheelDeltaX), \"axis\" in n && n.axis === n.HORIZONTAL_AXIS && (o = -1 * s, s = 0), r = 0 === s ? o : s, \"deltaY\" in n && (r = s = -1 * n.deltaY), \"deltaX\" in n && (o = n.deltaX, 0 === s && (r = -1 * o)), 0 !== s || 0 !== o) {\n            if (1 === n.deltaMode) {\n              var c = p.data(this, \"mousewheel-line-height\");\n              r *= c, s *= c, o *= c;\n            } else if (2 === n.deltaMode) {\n              var u = p.data(this, \"mousewheel-page-height\");\n              r *= u, s *= u, o *= u;\n            }\n            if (t = Math.max(Math.abs(s), Math.abs(o)), (!f || t < f) && y(n, f = t) && (f /= 40), y(n, t) && (r /= 40, o /= 40, s /= 40), r = Math[1 <= r ? \"floor\" : \"ceil\"](r / f), o = Math[1 <= o ? \"floor\" : \"ceil\"](o / f), s = Math[1 <= s ? \"floor\" : \"ceil\"](s / f), m.settings.normalizeOffset && this.getBoundingClientRect) {\n              var d = this.getBoundingClientRect();\n              a = e.clientX - d.left, l = e.clientY - d.top;\n            }\n            return e.deltaX = o, e.deltaY = s, e.deltaFactor = f, e.offsetX = a, e.offsetY = l, e.deltaMode = 0, i.unshift(e, r, o, s), h && clearTimeout(h), h = setTimeout(v, 200), (p.event.dispatch || p.event.handle).apply(this, i);\n          }\n        }\n        function v() {\n          f = null;\n        }\n        function y(e, t) {\n          return m.settings.adjustOldDeltas && \"mousewheel\" === e.type && t % 120 == 0;\n        }\n        p.fn.extend({\n          mousewheel: function mousewheel(e) {\n            return e ? this.bind(\"mousewheel\", e) : this.trigger(\"mousewheel\");\n          },\n          unmousewheel: function unmousewheel(e) {\n            return this.unbind(\"mousewheel\", e);\n          }\n        });\n      }, \"function\" == typeof e.define && e.define.amd ? e.define(\"jquery-mousewheel\", [\"jquery\"], l) : \"object\" == (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) ? module.exports = l : l(d), e.define(\"jquery.select2\", [\"jquery\", \"jquery-mousewheel\", \"./select2/core\", \"./select2/defaults\", \"./select2/utils\"], function (r, e, o, t, s) {\n        if (null == r.fn.select2) {\n          var a = [\"open\", \"close\", \"destroy\"];\n          r.fn.select2 = function (t) {\n            if (\"object\" == _typeof(t = t || {})) return this.each(function () {\n              var e = r.extend(!0, {}, t);\n              new o(r(this), e);\n            }), this;\n            if (\"string\" != typeof t) throw new Error(\"Invalid arguments for Select2: \" + t);\n            var n,\n              i = Array.prototype.slice.call(arguments, 1);\n            return this.each(function () {\n              var e = s.GetData(this, \"select2\");\n              null == e && window.console && console.error && console.error(\"The select2('\" + t + \"') method was called on an element that is not using Select2.\"), n = e[t].apply(e, i);\n            }), -1 < r.inArray(t, a) ? this : n;\n          };\n        }\n        return null == r.fn.select2.defaults && (r.fn.select2.defaults = t), o;\n      }), {\n        define: e.define,\n        require: e.require\n      };\n    }(),\n    t = e.require(\"jquery.select2\");\n  return d.fn.select2.amd = e, t;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/plugins/select2/js/select2.full.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/dist/js/app": 0,
/******/ 			"dist/css/app": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["dist/css/app"], () => (__webpack_require__("./resources/js/app.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["dist/css/app"], () => (__webpack_require__("./resources/sass/app.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;