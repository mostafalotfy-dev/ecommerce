/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@yaireo/tagify/dist/tagify.min.js":
/*!********************************************************!*\
  !*** ./node_modules/@yaireo/tagify/dist/tagify.min.js ***!
  \********************************************************/
/***/ (function(module) {

eval("/**\n * Tagify (v 4.17.8) - tags input component\n * By undefined\n * https://github.com/yairEO/tagify\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n * \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n * \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n * \r\n * THE SOFTWARE IS NOT PERMISSIBLE TO BE SOLD.\n */\n\n!function(t,e){ true?module.exports=e():0}(this,(function(){\"use strict\";function t(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);e&&(s=s.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,s)}return i}function e(e){for(var s=1;s<arguments.length;s++){var a=null!=arguments[s]?arguments[s]:{};s%2?t(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):t(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(t,e,i){return(e=function(t){var e=function(t,e){if(\"object\"!=typeof t||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var s=i.call(t,e||\"default\");if(\"object\"!=typeof s)return s;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return(\"string\"===e?String:Number)(t)}(t,\"string\");return\"symbol\"==typeof e?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}const s=(t,e,i,s)=>(t=\"\"+t,e=\"\"+e,s&&(t=t.trim(),e=e.trim()),i?t==e:t.toLowerCase()==e.toLowerCase()),a=(t,e)=>t&&Array.isArray(t)&&t.map((t=>n(t,e)));function n(t,e){var i,s={};for(i in t)e.indexOf(i)<0&&(s[i]=t[i]);return s}function o(t){var e=document.createElement(\"div\");return t.replace(/\\&#?[0-9a-z]+;/gi,(function(t){return e.innerHTML=t,e.innerText}))}function r(t){return(new DOMParser).parseFromString(t.trim(),\"text/html\").body.firstElementChild}function l(t,e){for(e=e||\"previous\";t=t[e+\"Sibling\"];)if(3==t.nodeType)return t}function d(t){return\"string\"==typeof t?t.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\"/g,\"&quot;\").replace(/`|'/g,\"&#039;\"):t}function h(t){var e=Object.prototype.toString.call(t).split(\" \")[1].slice(0,-1);return t===Object(t)&&\"Array\"!=e&&\"Function\"!=e&&\"RegExp\"!=e&&\"HTMLUnknownElement\"!=e}function g(t,e,i){function s(t,e){for(var i in e)if(e.hasOwnProperty(i)){if(h(e[i])){h(t[i])?s(t[i],e[i]):t[i]=Object.assign({},e[i]);continue}if(Array.isArray(e[i])){t[i]=Object.assign([],e[i]);continue}t[i]=e[i]}}return t instanceof Object||(t={}),s(t,e),i&&s(t,i),t}function p(){const t=[],e={};for(let i of arguments)for(let s of i)h(s)?e[s.value]||(t.push(s),e[s.value]=1):t.includes(s)||t.push(s);return t}function c(t){return String.prototype.normalize?\"string\"==typeof t?t.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g,\"\"):void 0:t}var u=()=>/(?=.*chrome)(?=.*android)/i.test(navigator.userAgent);function m(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(t=>(t^crypto.getRandomValues(new Uint8Array(1))[0]&15>>t/4).toString(16)))}function v(t){return t&&t.classList&&t.classList.contains(this.settings.classNames.tag)}function f(t,e){var i=window.getSelection();return e=e||i.getRangeAt(0),\"string\"==typeof t&&(t=document.createTextNode(t)),e&&(e.deleteContents(),e.insertNode(t)),t}function T(t,e,i){return t?(e&&(t.__tagifyTagData=i?e:g({},t.__tagifyTagData||{},e)),t.__tagifyTagData):(console.warn(\"tag element doesn't exist\",t,e),e)}var w={delimiters:\",\",pattern:null,tagTextProp:\"value\",maxTags:1/0,callbacks:{},addTagOnBlur:!0,onChangeAfterBlur:!0,duplicates:!1,whitelist:[],blacklist:[],enforceWhitelist:!1,userInput:!0,keepInvalidTags:!1,createInvalidTags:!0,mixTagsAllowedAfter:/,|\\.|\\:|\\s/,mixTagsInterpolator:[\"[[\",\"]]\"],backspace:!0,skipInvalid:!1,pasteAsTags:!0,editTags:{clicks:2,keepInvalid:!0},transformTag:()=>{},trim:!0,a11y:{focusableTags:!1},mixMode:{insertAfterTag:\"Â \"},autoComplete:{enabled:!0,rightKey:!1},classNames:{namespace:\"tagify\",mixMode:\"tagify--mix\",selectMode:\"tagify--select\",input:\"tagify__input\",focus:\"tagify--focus\",tagNoAnimation:\"tagify--noAnim\",tagInvalid:\"tagify--invalid\",tagNotAllowed:\"tagify--notAllowed\",scopeLoading:\"tagify--loading\",hasMaxTags:\"tagify--hasMaxTags\",hasNoTags:\"tagify--noTags\",empty:\"tagify--empty\",inputInvalid:\"tagify__input--invalid\",dropdown:\"tagify__dropdown\",dropdownWrapper:\"tagify__dropdown__wrapper\",dropdownHeader:\"tagify__dropdown__header\",dropdownFooter:\"tagify__dropdown__footer\",dropdownItem:\"tagify__dropdown__item\",dropdownItemActive:\"tagify__dropdown__item--active\",dropdownItemHidden:\"tagify__dropdown__item--hidden\",dropdownInital:\"tagify__dropdown--initial\",tag:\"tagify__tag\",tagText:\"tagify__tag-text\",tagX:\"tagify__tag__removeBtn\",tagLoading:\"tagify__tag--loading\",tagEditing:\"tagify__tag--editable\",tagFlash:\"tagify__tag--flash\",tagHide:\"tagify__tag--hide\"},dropdown:{classname:\"\",enabled:2,maxItems:10,searchKeys:[\"value\",\"searchBy\"],fuzzySearch:!0,caseSensitive:!1,accentedSearch:!0,includeSelectedTags:!1,highlightFirst:!1,closeOnSelect:!0,clearOnSelect:!0,position:\"all\",appendTarget:null},hooks:{beforeRemoveTag:()=>Promise.resolve(),beforePaste:()=>Promise.resolve(),suggestionClick:()=>Promise.resolve()}};function b(){this.dropdown={};for(let t in this._dropdown)this.dropdown[t]=\"function\"==typeof this._dropdown[t]?this._dropdown[t].bind(this):this._dropdown[t];this.dropdown.refs()}var y={refs(){this.DOM.dropdown=this.parseTemplate(\"dropdown\",[this.settings]),this.DOM.dropdown.content=this.DOM.dropdown.querySelector(\"[data-selector='tagify-suggestions-wrapper']\")},getHeaderRef(){return this.DOM.dropdown.querySelector(\"[data-selector='tagify-suggestions-header']\")},getFooterRef(){return this.DOM.dropdown.querySelector(\"[data-selector='tagify-suggestions-footer']\")},getAllSuggestionsRefs(){return[...this.DOM.dropdown.content.querySelectorAll(this.settings.classNames.dropdownItemSelector)]},show(t){var e,i,a,n=this.settings,o=\"mix\"==n.mode&&!n.enforceWhitelist,r=!n.whitelist||!n.whitelist.length,l=\"manual\"==n.dropdown.position;if(t=void 0===t?this.state.inputText:t,!(r&&!o&&!n.templates.dropdownItemNoMatch||!1===n.dropdown.enable||this.state.isLoading||this.settings.readonly)){if(clearTimeout(this.dropdownHide__bindEventsTimeout),this.suggestedListItems=this.dropdown.filterListItems(t),t&&!this.suggestedListItems.length&&(this.trigger(\"dropdown:noMatch\",t),n.templates.dropdownItemNoMatch&&(a=n.templates.dropdownItemNoMatch.call(this,{value:t}))),!a){if(this.suggestedListItems.length)t&&o&&!this.state.editing.scope&&!s(this.suggestedListItems[0].value,t)&&this.suggestedListItems.unshift({value:t});else{if(!t||!o||this.state.editing.scope)return this.input.autocomplete.suggest.call(this),void this.dropdown.hide();this.suggestedListItems=[{value:t}]}i=\"\"+(h(e=this.suggestedListItems[0])?e.value:e),n.autoComplete&&i&&0==i.indexOf(t)&&this.input.autocomplete.suggest.call(this,e)}this.dropdown.fill(a),n.dropdown.highlightFirst&&this.dropdown.highlightOption(this.DOM.dropdown.content.querySelector(n.classNames.dropdownItemSelector)),this.state.dropdown.visible||setTimeout(this.dropdown.events.binding.bind(this)),this.state.dropdown.visible=t||!0,this.state.dropdown.query=t,this.setStateSelection(),l||setTimeout((()=>{this.dropdown.position(),this.dropdown.render()})),setTimeout((()=>{this.trigger(\"dropdown:show\",this.DOM.dropdown)}))}},hide(t){var e=this.DOM,i=e.scope,s=e.dropdown,a=\"manual\"==this.settings.dropdown.position&&!t;if(s&&document.body.contains(s)&&!a)return window.removeEventListener(\"resize\",this.dropdown.position),this.dropdown.events.binding.call(this,!1),i.setAttribute(\"aria-expanded\",!1),s.parentNode.removeChild(s),setTimeout((()=>{this.state.dropdown.visible=!1}),100),this.state.dropdown.query=this.state.ddItemData=this.state.ddItemElm=this.state.selection=null,this.state.tag&&this.state.tag.value.length&&(this.state.flaggedTags[this.state.tag.baseOffset]=this.state.tag),this.trigger(\"dropdown:hide\",s),this},toggle(t){this.dropdown[this.state.dropdown.visible&&!t?\"hide\":\"show\"]()},render(){var t,e,i,s=(t=this.DOM.dropdown,(i=t.cloneNode(!0)).style.cssText=\"position:fixed; top:-9999px; opacity:0\",document.body.appendChild(i),e=i.clientHeight,i.parentNode.removeChild(i),e),a=this.settings;return\"number\"==typeof a.dropdown.enabled&&a.dropdown.enabled>=0?(this.DOM.scope.setAttribute(\"aria-expanded\",!0),document.body.contains(this.DOM.dropdown)||(this.DOM.dropdown.classList.add(a.classNames.dropdownInital),this.dropdown.position(s),a.dropdown.appendTarget.appendChild(this.DOM.dropdown),setTimeout((()=>this.DOM.dropdown.classList.remove(a.classNames.dropdownInital)))),this):this},fill(t){t=\"string\"==typeof t?t:this.dropdown.createListHTML(t||this.suggestedListItems);var e,i=this.settings.templates.dropdownContent.call(this,t);this.DOM.dropdown.content.innerHTML=(e=i)?e.replace(/\\>[\\r\\n ]+\\</g,\"><\").replace(/(<.*?>)|\\s+/g,((t,e)=>e||\" \")):\"\"},fillHeaderFooter(){var t=this.dropdown.filterListItems(this.state.dropdown.query),e=this.parseTemplate(\"dropdownHeader\",[t]),i=this.parseTemplate(\"dropdownFooter\",[t]),s=this.dropdown.getHeaderRef(),a=this.dropdown.getFooterRef();e&&s?.parentNode.replaceChild(e,s),i&&a?.parentNode.replaceChild(i,a)},refilter(t){t=t||this.state.dropdown.query||\"\",this.suggestedListItems=this.dropdown.filterListItems(t),this.dropdown.fill(),this.suggestedListItems.length||this.dropdown.hide(),this.trigger(\"dropdown:updated\",this.DOM.dropdown)},position(t){var e=this.settings.dropdown;if(\"manual\"!=e.position){var i,s,a,n,o,r,l=this.DOM.dropdown,d=e.placeAbove,h=e.appendTarget===document.body,g=h?window.pageYOffset:e.appendTarget.scrollTop,p=document.fullscreenElement||document.webkitFullscreenElement||document.documentElement,c=p.clientHeight,u=Math.max(p.clientWidth||0,window.innerWidth||0)>480?e.position:\"all\",m=this.DOM[\"input\"==u?\"input\":\"scope\"];if(t=t||l.clientHeight,this.state.dropdown.visible){if(\"text\"==u?(a=(i=function(){const t=document.getSelection();if(t.rangeCount){const e=t.getRangeAt(0),i=e.startContainer,s=e.startOffset;let a,n;if(s>0)return n=document.createRange(),n.setStart(i,s-1),n.setEnd(i,s),a=n.getBoundingClientRect(),{left:a.right,top:a.top,bottom:a.bottom};if(i.getBoundingClientRect)return i.getBoundingClientRect()}return{left:-9999,top:-9999}}()).bottom,s=i.top,n=i.left,o=\"auto\"):(r=function(t){for(var e=0,i=0;t&&t!=p;)e+=t.offsetLeft||0,i+=t.offsetTop||0,t=t.parentNode;return{left:e,top:i}}(e.appendTarget),s=(i=m.getBoundingClientRect()).top-r.top,a=i.bottom-1-r.top,n=i.left-r.left,o=i.width+\"px\"),!h){let t=function(){for(var t=0,i=e.appendTarget.parentNode;i;)t+=i.scrollTop||0,i=i.parentNode;return t}();s+=t,a+=t}s=Math.floor(s),a=Math.ceil(a),d=void 0===d?c-i.bottom<t:d,l.style.cssText=\"left:\"+(n+window.pageXOffset)+\"px; width:\"+o+\";\"+(d?\"top: \"+(s+g)+\"px\":\"top: \"+(a+g)+\"px\"),l.setAttribute(\"placement\",d?\"top\":\"bottom\"),l.setAttribute(\"position\",u)}}},events:{binding(){let t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];var e=this.dropdown.events.callbacks,i=this.listeners.dropdown=this.listeners.dropdown||{position:this.dropdown.position.bind(this,null),onKeyDown:e.onKeyDown.bind(this),onMouseOver:e.onMouseOver.bind(this),onMouseLeave:e.onMouseLeave.bind(this),onClick:e.onClick.bind(this),onScroll:e.onScroll.bind(this)},s=t?\"addEventListener\":\"removeEventListener\";\"manual\"!=this.settings.dropdown.position&&(document[s](\"scroll\",i.position,!0),window[s](\"resize\",i.position),window[s](\"keydown\",i.onKeyDown)),this.DOM.dropdown[s](\"mouseover\",i.onMouseOver),this.DOM.dropdown[s](\"mouseleave\",i.onMouseLeave),this.DOM.dropdown[s](\"mousedown\",i.onClick),this.DOM.dropdown.content[s](\"scroll\",i.onScroll)},callbacks:{onKeyDown(t){if(this.state.hasFocus&&!this.state.composing){var e=this.DOM.dropdown.querySelector(this.settings.classNames.dropdownItemActiveSelector),i=this.dropdown.getSuggestionDataByNode(e);switch(t.key){case\"ArrowDown\":case\"ArrowUp\":case\"Down\":case\"Up\":t.preventDefault();var s=this.dropdown.getAllSuggestionsRefs(),a=\"ArrowUp\"==t.key||\"Up\"==t.key;e&&(e=this.dropdown.getNextOrPrevOption(e,!a)),e&&e.matches(this.settings.classNames.dropdownItemSelector)||(e=s[a?s.length-1:0]),this.dropdown.highlightOption(e,!0);break;case\"Escape\":case\"Esc\":this.dropdown.hide();break;case\"ArrowRight\":if(this.state.actions.ArrowLeft)return;case\"Tab\":if(\"mix\"!=this.settings.mode&&e&&!this.settings.autoComplete.rightKey&&!this.state.editing){t.preventDefault();var n=this.dropdown.getMappedValue(i);return this.input.autocomplete.set.call(this,n),!1}return!0;case\"Enter\":t.preventDefault(),this.settings.hooks.suggestionClick(t,{tagify:this,tagData:i,suggestionElm:e}).then((()=>{if(e)return this.dropdown.selectOption(e),e=this.dropdown.getNextOrPrevOption(e,!a),void this.dropdown.highlightOption(e);this.dropdown.hide(),\"mix\"!=this.settings.mode&&this.addTags(this.state.inputText.trim(),!0)})).catch((t=>t));break;case\"Backspace\":{if(\"mix\"==this.settings.mode||this.state.editing.scope)return;const t=this.input.raw.call(this);\"\"!=t&&8203!=t.charCodeAt(0)||(!0===this.settings.backspace?this.removeTags():\"edit\"==this.settings.backspace&&setTimeout(this.editTag.bind(this),0))}}}},onMouseOver(t){var e=t.target.closest(this.settings.classNames.dropdownItemSelector);e&&this.dropdown.highlightOption(e)},onMouseLeave(t){this.dropdown.highlightOption()},onClick(t){if(0==t.button&&t.target!=this.DOM.dropdown&&t.target!=this.DOM.dropdown.content){var e=t.target.closest(this.settings.classNames.dropdownItemSelector),i=this.dropdown.getSuggestionDataByNode(e);this.state.actions.selectOption=!0,setTimeout((()=>this.state.actions.selectOption=!1),50),this.settings.hooks.suggestionClick(t,{tagify:this,tagData:i,suggestionElm:e}).then((()=>{e?this.dropdown.selectOption(e,t):this.dropdown.hide()})).catch((t=>console.warn(t)))}},onScroll(t){var e=t.target,i=e.scrollTop/(e.scrollHeight-e.parentNode.clientHeight)*100;this.trigger(\"dropdown:scroll\",{percentage:Math.round(i)})}}},getSuggestionDataByNode(t){var e=t&&t.getAttribute(\"value\");return this.suggestedListItems.find((t=>t.value==e))||null},getNextOrPrevOption(t){let e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];var i=this.dropdown.getAllSuggestionsRefs(),s=i.findIndex((e=>e===t));return e?i[s+1]:i[s-1]},highlightOption(t,e){var i,s=this.settings.classNames.dropdownItemActive;if(this.state.ddItemElm&&(this.state.ddItemElm.classList.remove(s),this.state.ddItemElm.removeAttribute(\"aria-selected\")),!t)return this.state.ddItemData=null,this.state.ddItemElm=null,void this.input.autocomplete.suggest.call(this);i=this.dropdown.getSuggestionDataByNode(t),this.state.ddItemData=i,this.state.ddItemElm=t,t.classList.add(s),t.setAttribute(\"aria-selected\",!0),e&&(t.parentNode.scrollTop=t.clientHeight+t.offsetTop-t.parentNode.clientHeight),this.settings.autoComplete&&(this.input.autocomplete.suggest.call(this,i),this.dropdown.position())},selectOption(t,e){var i=this.settings.dropdown,s=i.clearOnSelect,a=i.closeOnSelect;if(!t)return this.addTags(this.state.inputText,!0),void(a&&this.dropdown.hide());e=e||{};var n=t.getAttribute(\"value\"),o=\"noMatch\"==n,r=this.suggestedListItems.find((t=>(t.value??t)==n));this.trigger(\"dropdown:select\",{data:r,elm:t,event:e}),n&&(r||o)?(this.state.editing?this.onEditTagDone(null,g({__isValid:!0},this.normalizeTags([r])[0])):this[\"mix\"==this.settings.mode?\"addMixTags\":\"addTags\"]([r||this.input.raw.call(this)],s),this.DOM.input.parentNode&&(setTimeout((()=>{this.DOM.input.focus(),this.toggleFocusClass(!0)})),a&&setTimeout(this.dropdown.hide.bind(this)),t.addEventListener(\"transitionend\",(()=>{this.dropdown.fillHeaderFooter(),setTimeout((()=>t.remove()),100)}),{once:!0}),t.classList.add(this.settings.classNames.dropdownItemHidden))):a&&setTimeout(this.dropdown.hide.bind(this))},selectAll(t){this.suggestedListItems.length=0,this.dropdown.hide(),this.dropdown.filterListItems(\"\");var e=this.dropdown.filterListItems(\"\");return t||(e=this.state.dropdown.suggestions),this.addTags(e,!0),this},filterListItems(t,e){var i,s,a,n,o,r=this.settings,l=r.dropdown,d=(e=e||{},[]),g=[],p=r.whitelist,u=l.maxItems>=0?l.maxItems:1/0,m=l.searchKeys,v=0;if(!(t=\"select\"==r.mode&&this.value.length&&this.value[0][r.tagTextProp]==t?\"\":t)||!m.length)return d=l.includeSelectedTags?p:p.filter((t=>!this.isTagDuplicate(h(t)?t.value:t))),this.state.dropdown.suggestions=d,d.slice(0,u);function f(t,e){return e.toLowerCase().split(\" \").every((e=>t.includes(e.toLowerCase())))}for(o=l.caseSensitive?\"\"+t:(\"\"+t).toLowerCase();v<p.length;v++){let t,r;i=p[v]instanceof Object?p[v]:{value:p[v]};let u=!Object.keys(i).some((t=>m.includes(t)))?[\"value\"]:m;l.fuzzySearch&&!e.exact?(a=u.reduce(((t,e)=>t+\" \"+(i[e]||\"\")),\"\").toLowerCase().trim(),l.accentedSearch&&(a=c(a),o=c(o)),t=0==a.indexOf(o),r=a===o,s=f(a,o)):(t=!0,s=u.some((t=>{var s=\"\"+(i[t]||\"\");return l.accentedSearch&&(s=c(s),o=c(o)),l.caseSensitive||(s=s.toLowerCase()),r=s===o,e.exact?s===o:0==s.indexOf(o)}))),n=!l.includeSelectedTags&&this.isTagDuplicate(h(i)?i.value:i),s&&!n&&(r&&t?g.push(i):\"startsWith\"==l.sortby&&t?d.unshift(i):d.push(i))}return this.state.dropdown.suggestions=g.concat(d),\"function\"==typeof l.sortby?l.sortby(g.concat(d),o):g.concat(d).slice(0,u)},getMappedValue(t){var e=this.settings.dropdown.mapValueTo;return e?\"function\"==typeof e?e(t):t[e]||t.value:t.value},createListHTML(t){return g([],t).map(((t,i)=>{\"string\"!=typeof t&&\"number\"!=typeof t||(t={value:t});var s=this.dropdown.getMappedValue(t);return s=\"string\"==typeof s?d(s):s,this.settings.templates.dropdownItem.apply(this,[e(e({},t),{},{mappedValue:s}),this])})).join(\"\")}};const x=\"@yaireo/tagify/\";var O,D={empty:\"empty\",exceed:\"number of tags exceeded\",pattern:\"pattern mismatch\",duplicate:\"already exists\",notAllowed:\"not allowed\"},M={wrapper:(t,e)=>`<tags class=\"${e.classNames.namespace} ${e.mode?`${e.classNames[e.mode+\"Mode\"]}`:\"\"} ${t.className}\"\\n                    ${e.readonly?\"readonly\":\"\"}\\n                    ${e.disabled?\"disabled\":\"\"}\\n                    ${e.required?\"required\":\"\"}\\n                    ${\"select\"===e.mode?\"spellcheck='false'\":\"\"}\\n                    tabIndex=\"-1\">\\n            <span ${!e.readonly&&e.userInput?\"contenteditable\":\"\"} tabIndex=\"0\" data-placeholder=\"${e.placeholder||\"&#8203;\"}\" aria-placeholder=\"${e.placeholder||\"\"}\"\\n                class=\"${e.classNames.input}\"\\n                role=\"textbox\"\\n                aria-autocomplete=\"both\"\\n                aria-multiline=\"${\"mix\"==e.mode}\"></span>\\n                &#8203;\\n        </tags>`,tag(t,e){let i=e.settings;return`<tag title=\"${t.title||t.value}\"\\n                    contenteditable='false'\\n                    spellcheck='false'\\n                    tabIndex=\"${i.a11y.focusableTags?0:-1}\"\\n                    class=\"${i.classNames.tag} ${t.class||\"\"}\"\\n                    ${this.getAttributes(t)}>\\n            <x title='' class=\"${i.classNames.tagX}\" role='button' aria-label='remove tag'></x>\\n            <div>\\n                <span class=\"${i.classNames.tagText}\">${t[i.tagTextProp]||t.value}</span>\\n            </div>\\n        </tag>`},dropdown(t){var e=t.dropdown,i=\"manual\"==e.position,s=`${t.classNames.dropdown}`;return`<div class=\"${i?\"\":s} ${e.classname}\" role=\"listbox\" aria-labelledby=\"dropdown\">\\n                    <div data-selector='tagify-suggestions-wrapper' class=\"${t.classNames.dropdownWrapper}\"></div>\\n                </div>`},dropdownContent(t){var e=this.settings,i=this.state.dropdown.suggestions;return`\\n            ${e.templates.dropdownHeader.call(this,i)}\\n            ${t}\\n            ${e.templates.dropdownFooter.call(this,i)}\\n        `},dropdownItem(t){return`<div ${this.getAttributes(t)}\\n                    class='${this.settings.classNames.dropdownItem} ${t.class?t.class:\"\"}'\\n                    tabindex=\"0\"\\n                    role=\"option\">${t.mappedValue||t.value}</div>`},dropdownHeader(t){return`<header data-selector='tagify-suggestions-header' class=\"${this.settings.classNames.dropdownHeader}\"></header>`},dropdownFooter(t){var e=t.length-this.settings.dropdown.maxItems;return e>0?`<footer data-selector='tagify-suggestions-footer' class=\"${this.settings.classNames.dropdownFooter}\">\\n                ${e} more items. Refine your search.\\n            </footer>`:\"\"},dropdownItemNoMatch:null};var I={customBinding(){this.customEventsList.forEach((t=>{this.on(t,this.settings.callbacks[t])}))},binding(){let t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];var e,i=this.events.callbacks,s=t?\"addEventListener\":\"removeEventListener\";if(!this.state.mainEvents||!t){for(var a in this.state.mainEvents=t,t&&!this.listeners.main&&(this.events.bindGlobal.call(this),this.settings.isJQueryPlugin&&jQuery(this.DOM.originalInput).on(\"tagify.removeAllTags\",this.removeAllTags.bind(this))),e=this.listeners.main=this.listeners.main||{focus:[\"input\",i.onFocusBlur.bind(this)],keydown:[\"input\",i.onKeydown.bind(this)],click:[\"scope\",i.onClickScope.bind(this)],dblclick:[\"scope\",i.onDoubleClickScope.bind(this)],paste:[\"input\",i.onPaste.bind(this)],drop:[\"input\",i.onDrop.bind(this)],compositionstart:[\"input\",i.onCompositionStart.bind(this)],compositionend:[\"input\",i.onCompositionEnd.bind(this)]})this.DOM[e[a][0]][s](a,e[a][1]);clearInterval(this.listeners.main.originalInputValueObserverInterval),this.listeners.main.originalInputValueObserverInterval=setInterval(i.observeOriginalInputValue.bind(this),500);var n=this.listeners.main.inputMutationObserver||new MutationObserver(i.onInputDOMChange.bind(this));n.disconnect(),\"mix\"==this.settings.mode&&n.observe(this.DOM.input,{childList:!0})}},bindGlobal(t){var e,i=this.events.callbacks,s=t?\"removeEventListener\":\"addEventListener\";if(this.listeners&&(t||!this.listeners.global))for(e of(this.listeners.global=this.listeners.global||[{type:this.isIE?\"keydown\":\"input\",target:this.DOM.input,cb:i[this.isIE?\"onInputIE\":\"onInput\"].bind(this)},{type:\"keydown\",target:window,cb:i.onWindowKeyDown.bind(this)},{type:\"blur\",target:this.DOM.input,cb:i.onFocusBlur.bind(this)},{type:\"click\",target:document,cb:i.onClickAnywhere.bind(this)}],this.listeners.global))e.target[s](e.type,e.cb)},unbindGlobal(){this.events.bindGlobal.call(this,!0)},callbacks:{onFocusBlur(t){var e=this.settings,i=t.target?this.trim(t.target.textContent):\"\",s=this.value?.[0]?.[e.tagTextProp],a=t.type,n=e.dropdown.enabled>=0,o={relatedTarget:t.relatedTarget},r=this.state.actions.selectOption&&(n||!e.dropdown.closeOnSelect),l=this.state.actions.addNew&&n,d=t.relatedTarget&&v.call(this,t.relatedTarget)&&this.DOM.scope.contains(t.relatedTarget);if(\"blur\"==a){if(t.relatedTarget===this.DOM.scope)return this.dropdown.hide(),void this.DOM.input.focus();this.postUpdate(),e.onChangeAfterBlur&&this.triggerChangeEvent()}if(!r&&!l)if(this.state.hasFocus=\"focus\"==a&&+new Date,this.toggleFocusClass(this.state.hasFocus),\"mix\"!=e.mode){if(\"focus\"==a)return this.trigger(\"focus\",o),void(0!==e.dropdown.enabled&&e.userInput||this.dropdown.show(this.value.length?\"\":void 0));\"blur\"==a&&(this.trigger(\"blur\",o),this.loading(!1),\"select\"==e.mode&&(d&&(this.removeTags(),i=\"\"),s===i&&(i=\"\")),i&&!this.state.actions.selectOption&&e.addTagOnBlur&&this.addTags(i,!0)),this.DOM.input.removeAttribute(\"style\"),this.dropdown.hide()}else\"focus\"==a?this.trigger(\"focus\",o):\"blur\"==t.type&&(this.trigger(\"blur\",o),this.loading(!1),this.dropdown.hide(),this.state.dropdown.visible=void 0,this.setStateSelection())},onCompositionStart(t){this.state.composing=!0},onCompositionEnd(t){this.state.composing=!1},onWindowKeyDown(t){var e,i=document.activeElement,s=v.call(this,i)&&this.DOM.scope.contains(document.activeElement),a=s&&i.hasAttribute(\"readonly\");if(s&&!a)switch(e=i.nextElementSibling,t.key){case\"Backspace\":this.settings.readonly||(this.removeTags(i),(e||this.DOM.input).focus());break;case\"Enter\":setTimeout(this.editTag.bind(this),0,i)}},onKeydown(t){var e=this.settings;if(!this.state.composing&&e.userInput){\"select\"==e.mode&&e.enforceWhitelist&&this.value.length&&\"Tab\"!=t.key&&t.preventDefault();var i=this.trim(t.target.textContent);if(this.trigger(\"keydown\",{event:t}),\"mix\"==e.mode){switch(t.key){case\"Left\":case\"ArrowLeft\":this.state.actions.ArrowLeft=!0;break;case\"Delete\":case\"Backspace\":if(this.state.editing)return;var s=document.getSelection(),a=\"Delete\"==t.key&&s.anchorOffset==(s.anchorNode.length||0),n=s.anchorNode.previousSibling,r=1==s.anchorNode.nodeType||!s.anchorOffset&&n&&1==n.nodeType&&s.anchorNode.previousSibling;o(this.DOM.input.innerHTML);var d,h,g,p=this.getTagElms();if(\"edit\"==e.backspace&&r)return d=1==s.anchorNode.nodeType?null:s.anchorNode.previousElementSibling,setTimeout(this.editTag.bind(this),0,d),void t.preventDefault();if(u()&&r instanceof Element)return g=l(r),r.hasAttribute(\"readonly\")||r.remove(),this.DOM.input.focus(),void setTimeout((()=>{this.placeCaretAfterNode(g),this.DOM.input.click()}));if(\"BR\"==s.anchorNode.nodeName)return;if((a||r)&&1==s.anchorNode.nodeType?h=0==s.anchorOffset?a?p[0]:null:p[Math.min(p.length,s.anchorOffset)-1]:a?h=s.anchorNode.nextElementSibling:r instanceof Element&&(h=r),3==s.anchorNode.nodeType&&!s.anchorNode.nodeValue&&s.anchorNode.previousElementSibling&&t.preventDefault(),(r||a)&&!e.backspace)return void t.preventDefault();if(\"Range\"!=s.type&&!s.anchorOffset&&s.anchorNode==this.DOM.input&&\"Delete\"!=t.key)return void t.preventDefault();if(\"Range\"!=s.type&&h&&h.hasAttribute(\"readonly\"))return void this.placeCaretAfterNode(l(h));clearTimeout(O),O=setTimeout((()=>{var t=document.getSelection();o(this.DOM.input.innerHTML),!a&&t.anchorNode.previousSibling,this.value=[].map.call(p,((t,e)=>{var i=T(t);if(t.parentNode||i.readonly)return i;this.trigger(\"remove\",{tag:t,index:e,data:i})})).filter((t=>t))}),20)}return!0}switch(t.key){case\"Backspace\":\"select\"==e.mode&&e.enforceWhitelist&&this.value.length?this.removeTags():this.state.dropdown.visible&&\"manual\"!=e.dropdown.position||\"\"!=t.target.textContent&&8203!=i.charCodeAt(0)||(!0===e.backspace?this.removeTags():\"edit\"==e.backspace&&setTimeout(this.editTag.bind(this),0));break;case\"Esc\":case\"Escape\":if(this.state.dropdown.visible)return;t.target.blur();break;case\"Down\":case\"ArrowDown\":this.state.dropdown.visible||this.dropdown.show();break;case\"ArrowRight\":{let t=this.state.inputSuggestion||this.state.ddItemData;if(t&&e.autoComplete.rightKey)return void this.addTags([t],!0);break}case\"Tab\":{let s=\"select\"==e.mode;if(!i||s)return!0;t.preventDefault()}case\"Enter\":if(this.state.dropdown.visible&&\"manual\"!=e.dropdown.position)return;t.preventDefault(),setTimeout((()=>{this.state.dropdown.visible||this.state.actions.selectOption||this.addTags(i,!0)}))}}},onInput(t){this.postUpdate();var e=this.settings;if(\"mix\"==e.mode)return this.events.callbacks.onMixTagsInput.call(this,t);var i=this.input.normalize.call(this),s=i.length>=e.dropdown.enabled,a={value:i,inputElm:this.DOM.input},n=this.validateTag({value:i});\"select\"==e.mode&&this.toggleScopeValidation(n),a.isValid=n,this.state.inputText!=i&&(this.input.set.call(this,i,!1),-1!=i.search(e.delimiters)?this.addTags(i)&&this.input.set.call(this):e.dropdown.enabled>=0&&this.dropdown[s?\"show\":\"hide\"](i),this.trigger(\"input\",a))},onMixTagsInput(t){var e,i,s,a,n,o,r,l,d=this.settings,h=this.value.length,p=this.getTagElms(),c=document.createDocumentFragment(),m=window.getSelection().getRangeAt(0),v=[].map.call(p,(t=>T(t).value));if(\"deleteContentBackward\"==t.inputType&&u()&&this.events.callbacks.onKeydown.call(this,{target:t.target,key:\"Backspace\"}),this.value.slice().forEach((t=>{t.readonly&&!v.includes(t.value)&&c.appendChild(this.createTagElem(t))})),c.childNodes.length&&(m.insertNode(c),this.setRangeAtStartEnd(!1,c.lastChild)),p.length!=h)return this.value=[].map.call(this.getTagElms(),(t=>T(t))),void this.update({withoutChangeEvent:!0});if(this.hasMaxTags())return!0;if(window.getSelection&&(o=window.getSelection()).rangeCount>0&&3==o.anchorNode.nodeType){if((m=o.getRangeAt(0).cloneRange()).collapse(!0),m.setStart(o.focusNode,0),s=(e=m.toString().slice(0,m.endOffset)).split(d.pattern).length-1,(i=e.match(d.pattern))&&(a=e.slice(e.lastIndexOf(i[i.length-1]))),a){if(this.state.actions.ArrowLeft=!1,this.state.tag={prefix:a.match(d.pattern)[0],value:a.replace(d.pattern,\"\")},this.state.tag.baseOffset=o.baseOffset-this.state.tag.value.length,l=this.state.tag.value.match(d.delimiters))return this.state.tag.value=this.state.tag.value.replace(d.delimiters,\"\"),this.state.tag.delimiters=l[0],this.addTags(this.state.tag.value,d.dropdown.clearOnSelect),void this.dropdown.hide();n=this.state.tag.value.length>=d.dropdown.enabled;try{r=(r=this.state.flaggedTags[this.state.tag.baseOffset]).prefix==this.state.tag.prefix&&r.value[0]==this.state.tag.value[0],this.state.flaggedTags[this.state.tag.baseOffset]&&!this.state.tag.value&&delete this.state.flaggedTags[this.state.tag.baseOffset]}catch(t){}(r||s<this.state.mixMode.matchedPatternCount)&&(n=!1)}else this.state.flaggedTags={};this.state.mixMode.matchedPatternCount=s}setTimeout((()=>{this.update({withoutChangeEvent:!0}),this.trigger(\"input\",g({},this.state.tag,{textContent:this.DOM.input.textContent})),this.state.tag&&this.dropdown[n?\"show\":\"hide\"](this.state.tag.value)}),10)},onInputIE(t){var e=this;setTimeout((function(){e.events.callbacks.onInput.call(e,t)}))},observeOriginalInputValue(){this.DOM.originalInput.parentNode||this.destroy(),this.DOM.originalInput.value!=this.DOM.originalInput.tagifyValue&&this.loadOriginalValues()},onClickAnywhere(t){t.target==this.DOM.scope||this.DOM.scope.contains(t.target)||(this.toggleFocusClass(!1),this.state.hasFocus=!1)},onClickScope(t){var e=this.settings,i=t.target.closest(\".\"+e.classNames.tag),s=+new Date-this.state.hasFocus;if(t.target!=this.DOM.scope){if(!t.target.classList.contains(e.classNames.tagX))return i?(this.trigger(\"click\",{tag:i,index:this.getNodeIndex(i),data:T(i),event:t}),void(1!==e.editTags&&1!==e.editTags.clicks||this.events.callbacks.onDoubleClickScope.call(this,t))):void(t.target==this.DOM.input&&(\"mix\"==e.mode&&this.fixFirefoxLastTagNoCaret(),s>500)?this.state.dropdown.visible?this.dropdown.hide():0===e.dropdown.enabled&&\"mix\"!=e.mode&&this.dropdown.show(this.value.length?\"\":void 0):\"select\"!=e.mode||0!==e.dropdown.enabled||this.state.dropdown.visible||this.dropdown.show());this.removeTags(t.target.parentNode)}else this.DOM.input.focus()},onPaste(t){t.preventDefault();var e,i,s=this.settings;if(\"select\"==s.mode&&s.enforceWhitelist||!s.userInput)return!1;s.readonly||(e=t.clipboardData||window.clipboardData,i=e.getData(\"Text\"),s.hooks.beforePaste(t,{tagify:this,pastedText:i,clipboardData:e}).then((e=>{void 0===e&&(e=i),e&&(this.injectAtCaret(e,window.getSelection().getRangeAt(0)),\"mix\"==this.settings.mode?this.events.callbacks.onMixTagsInput.call(this,t):this.settings.pasteAsTags?this.addTags(this.state.inputText+e,!0):this.state.inputText=e)})).catch((t=>t)))},onDrop(t){t.preventDefault()},onEditTagInput(t,e){var i=t.closest(\".\"+this.settings.classNames.tag),s=this.getNodeIndex(i),a=T(i),n=this.input.normalize.call(this,t),o={[this.settings.tagTextProp]:n,__tagId:a.__tagId},r=this.validateTag(o);this.editTagChangeDetected(g(a,o))||!0!==t.originalIsValid||(r=!0),i.classList.toggle(this.settings.classNames.tagInvalid,!0!==r),a.__isValid=r,i.title=!0===r?a.title||a.value:r,n.length>=this.settings.dropdown.enabled&&(this.state.editing&&(this.state.editing.value=n),this.dropdown.show(n)),this.trigger(\"edit:input\",{tag:i,index:s,data:g({},this.value[s],{newValue:n}),event:e})},onEditTagPaste(t,e){var i=(e.clipboardData||window.clipboardData).getData(\"Text\");e.preventDefault();var s=f(i);this.setRangeAtStartEnd(!1,s)},onEditTagFocus(t){this.state.editing={scope:t,input:t.querySelector(\"[contenteditable]\")}},onEditTagBlur(t){if(this.state.hasFocus||this.toggleFocusClass(),this.DOM.scope.contains(t)){var e,i,s=this.settings,a=t.closest(\".\"+s.classNames.tag),n=T(a),o=this.input.normalize.call(this,t),r={[s.tagTextProp]:o,__tagId:n.__tagId},l=n.__originalData,d=this.editTagChangeDetected(g(n,r)),h=this.validateTag(r);if(o)if(d){if(e=this.hasMaxTags(),i=g({},l,{[s.tagTextProp]:this.trim(o),__isValid:h}),s.transformTag.call(this,i,l),!0!==(h=(!e||!0===l.__isValid)&&this.validateTag(i))){if(this.trigger(\"invalid\",{data:i,tag:a,message:h}),s.editTags.keepInvalid)return;s.keepInvalidTags?i.__isValid=h:i=l}else s.keepInvalidTags&&(delete i.title,delete i[\"aria-invalid\"],delete i.class);this.onEditTagDone(a,i)}else this.onEditTagDone(a,l);else this.onEditTagDone(a)}},onEditTagkeydown(t,e){if(!this.state.composing)switch(this.trigger(\"edit:keydown\",{event:t}),t.key){case\"Esc\":case\"Escape\":e.parentNode.replaceChild(e.__tagifyTagData.__originalHTML,e),this.state.editing=!1;case\"Enter\":case\"Tab\":t.preventDefault(),t.target.blur()}},onDoubleClickScope(t){var e,i,s=t.target.closest(\".\"+this.settings.classNames.tag),a=T(s),n=this.settings;s&&n.userInput&&!1!==a.editable&&(e=s.classList.contains(this.settings.classNames.tagEditing),i=s.hasAttribute(\"readonly\"),\"select\"==n.mode||n.readonly||e||i||!this.settings.editTags||this.editTag(s),this.toggleFocusClass(!0),this.trigger(\"dblclick\",{tag:s,index:this.getNodeIndex(s),data:T(s)}))},onInputDOMChange(t){t.forEach((t=>{t.addedNodes.forEach((t=>{if(\"<div><br></div>\"==t.outerHTML)t.replaceWith(document.createElement(\"br\"));else if(1==t.nodeType&&t.querySelector(this.settings.classNames.tagSelector)){let e=document.createTextNode(\"\");3==t.childNodes[0].nodeType&&\"BR\"!=t.previousSibling.nodeName&&(e=document.createTextNode(\"\\n\")),t.replaceWith(e,...[...t.childNodes].slice(0,-1)),this.placeCaretAfterNode(e)}else if(v.call(this,t)&&(3!=t.previousSibling?.nodeType||t.previousSibling.textContent||t.previousSibling.remove(),t.previousSibling&&\"BR\"==t.previousSibling.nodeName)){t.previousSibling.replaceWith(\"\\nâ\");let e=t.nextSibling,i=\"\";for(;e;)i+=e.textContent,e=e.nextSibling;i.trim()&&this.placeCaretAfterNode(t.previousSibling)}})),t.removedNodes.forEach((t=>{t&&\"BR\"==t.nodeName&&v.call(this,e)&&(this.removeTags(e),this.fixFirefoxLastTagNoCaret())}))}));var e=this.DOM.input.lastChild;e&&\"\"==e.nodeValue&&e.remove(),e&&\"BR\"==e.nodeName||this.DOM.input.appendChild(document.createElement(\"br\"))}}};function N(t,e){if(!t){console.warn(\"Tagify:\",\"input element not found\",t);const e=new Proxy(this,{get:()=>()=>e});return e}if(t.__tagify)return console.warn(\"Tagify: \",\"input element is already Tagified - Same instance is returned.\",t),t.__tagify;var i;g(this,function(t){var e=document.createTextNode(\"\");function i(t,i,s){s&&i.split(/\\s+/g).forEach((i=>e[t+\"EventListener\"].call(e,i,s)))}return{off(t,e){return i(\"remove\",t,e),this},on(t,e){return e&&\"function\"==typeof e&&i(\"add\",t,e),this},trigger(i,s,a){var n;if(a=a||{cloneData:!0},i)if(t.settings.isJQueryPlugin)\"remove\"==i&&(i=\"removeTag\"),jQuery(t.DOM.originalInput).triggerHandler(i,[s]);else{try{var o=\"object\"==typeof s?s:{value:s};if((o=a.cloneData?g({},o):o).tagify=this,s.event&&(o.event=this.cloneEvent(s.event)),s instanceof Object)for(var r in s)s[r]instanceof HTMLElement&&(o[r]=s[r]);n=new CustomEvent(i,{detail:o})}catch(t){console.warn(t)}e.dispatchEvent(n)}}}}(this)),this.isFirefox=/firefox|fxios/i.test(navigator.userAgent)&&!/seamonkey/i.test(navigator.userAgent),this.isIE=window.document.documentMode,e=e||{},this.getPersistedData=(i=e.id,t=>{let e,s=\"/\"+t;if(1==localStorage.getItem(x+i+\"/v\",1))try{e=JSON.parse(localStorage[x+i+s])}catch(t){}return e}),this.setPersistedData=(t=>t?(localStorage.setItem(x+t+\"/v\",1),(e,i)=>{let s=\"/\"+i,a=JSON.stringify(e);e&&i&&(localStorage.setItem(x+t+s,a),dispatchEvent(new Event(\"storage\")))}):()=>{})(e.id),this.clearPersistedData=(t=>e=>{const i=x+\"/\"+t+\"/\";if(e)localStorage.removeItem(i+e);else for(let t in localStorage)t.includes(i)&&localStorage.removeItem(t)})(e.id),this.applySettings(t,e),this.state={inputText:\"\",editing:!1,composing:!1,actions:{},mixMode:{},dropdown:{},flaggedTags:{}},this.value=[],this.listeners={},this.DOM={},this.build(t),b.call(this),this.getCSSVars(),this.loadOriginalValues(),this.events.customBinding.call(this),this.events.binding.call(this),t.autofocus&&this.DOM.input.focus(),t.__tagify=this}return N.prototype={_dropdown:y,getSetTagData:T,helpers:{sameStr:s,removeCollectionProp:a,omit:n,isObject:h,parseHTML:r,escapeHTML:d,extend:g,concatWithoutDups:p,getUID:m,isNodeTag:v},customEventsList:[\"change\",\"add\",\"remove\",\"invalid\",\"input\",\"click\",\"keydown\",\"focus\",\"blur\",\"edit:input\",\"edit:beforeUpdate\",\"edit:updated\",\"edit:start\",\"edit:keydown\",\"dropdown:show\",\"dropdown:hide\",\"dropdown:select\",\"dropdown:updated\",\"dropdown:noMatch\",\"dropdown:scroll\"],dataProps:[\"__isValid\",\"__removed\",\"__originalData\",\"__originalHTML\",\"__tagId\"],trim(t){return this.settings.trim&&t&&\"string\"==typeof t?t.trim():t},parseHTML:r,templates:M,parseTemplate(t,e){return r((t=this.settings.templates[t]||t).apply(this,e))},set whitelist(t){const e=t&&Array.isArray(t);this.settings.whitelist=e?t:[],this.setPersistedData(e?t:[],\"whitelist\")},get whitelist(){return this.settings.whitelist},generateClassSelectors(t){for(let e in t){let i=e;Object.defineProperty(t,i+\"Selector\",{get(){return\".\"+this[i].split(\" \")[0]}})}},applySettings(t,i){w.templates=this.templates;var s=g({},w,\"mix\"==i.mode?{dropdown:{position:\"text\"}}:{}),a=this.settings=g({},s,i);if(a.disabled=t.hasAttribute(\"disabled\"),a.readonly=a.readonly||t.hasAttribute(\"readonly\"),a.placeholder=d(t.getAttribute(\"placeholder\")||a.placeholder||\"\"),a.required=t.hasAttribute(\"required\"),this.generateClassSelectors(a.classNames),void 0===a.dropdown.includeSelectedTags&&(a.dropdown.includeSelectedTags=a.duplicates),this.isIE&&(a.autoComplete=!1),[\"whitelist\",\"blacklist\"].forEach((e=>{var i=t.getAttribute(\"data-\"+e);i&&(i=i.split(a.delimiters))instanceof Array&&(a[e]=i)})),\"autoComplete\"in i&&!h(i.autoComplete)&&(a.autoComplete=w.autoComplete,a.autoComplete.enabled=i.autoComplete),\"mix\"==a.mode&&(a.pattern=a.pattern||/@/,a.autoComplete.rightKey=!0,a.delimiters=i.delimiters||null,a.tagTextProp&&!a.dropdown.searchKeys.includes(a.tagTextProp)&&a.dropdown.searchKeys.push(a.tagTextProp)),t.pattern)try{a.pattern=new RegExp(t.pattern)}catch(t){}if(a.delimiters){a._delimiters=a.delimiters;try{a.delimiters=new RegExp(this.settings.delimiters,\"g\")}catch(t){}}a.disabled&&(a.userInput=!1),this.TEXTS=e(e({},D),a.texts||{}),(\"select\"!=a.mode||i.dropdown?.enabled)&&a.userInput||(a.dropdown.enabled=0),a.dropdown.appendTarget=i.dropdown?.appendTarget||document.body;let n=this.getPersistedData(\"whitelist\");Array.isArray(n)&&(this.whitelist=Array.isArray(a.whitelist)?p(a.whitelist,n):n)},getAttributes(t){var e,i=this.getCustomAttributes(t),s=\"\";for(e in i)s+=\" \"+e+(void 0!==t[e]?`=\"${i[e]}\"`:\"\");return s},getCustomAttributes(t){if(!h(t))return\"\";var e,i={};for(e in t)\"__\"!=e.slice(0,2)&&\"class\"!=e&&t.hasOwnProperty(e)&&void 0!==t[e]&&(i[e]=d(t[e]));return i},setStateSelection(){var t=window.getSelection(),e={anchorOffset:t.anchorOffset,anchorNode:t.anchorNode,range:t.getRangeAt&&t.rangeCount&&t.getRangeAt(0)};return this.state.selection=e,e},getCSSVars(){var t=getComputedStyle(this.DOM.scope,null);var e;this.CSSVars={tagHideTransition:(t=>{let e=t.value;return\"s\"==t.unit?1e3*e:e})(function(t){if(!t)return{};var e=(t=t.trim().split(\" \")[0]).split(/\\d+/g).filter((t=>t)).pop().trim();return{value:+t.split(e).filter((t=>t))[0].trim(),unit:e}}((e=\"tag-hide-transition\",t.getPropertyValue(\"--\"+e))))}},build(t){var e=this.DOM;this.settings.mixMode.integrated?(e.originalInput=null,e.scope=t,e.input=t):(e.originalInput=t,e.originalInput_tabIndex=t.tabIndex,e.scope=this.parseTemplate(\"wrapper\",[t,this.settings]),e.input=e.scope.querySelector(this.settings.classNames.inputSelector),t.parentNode.insertBefore(e.scope,t),t.tabIndex=-1)},destroy(){this.events.unbindGlobal.call(this),this.DOM.scope.parentNode.removeChild(this.DOM.scope),this.DOM.originalInput.tabIndex=this.DOM.originalInput_tabIndex,delete this.DOM.originalInput.__tagify,this.dropdown.hide(!0),clearTimeout(this.dropdownHide__bindEventsTimeout),clearInterval(this.listeners.main.originalInputValueObserverInterval)},loadOriginalValues(t){var e,i=this.settings;if(this.state.blockChangeEvent=!0,void 0===t){const e=this.getPersistedData(\"value\");t=e&&!this.DOM.originalInput.value?e:i.mixMode.integrated?this.DOM.input.textContent:this.DOM.originalInput.value}if(this.removeAllTags(),t)if(\"mix\"==i.mode)this.parseMixTags(t),(e=this.DOM.input.lastChild)&&\"BR\"==e.tagName||this.DOM.input.insertAdjacentHTML(\"beforeend\",\"<br>\");else{try{JSON.parse(t)instanceof Array&&(t=JSON.parse(t))}catch(t){}this.addTags(t,!0).forEach((t=>t&&t.classList.add(i.classNames.tagNoAnimation)))}else this.postUpdate();this.state.lastOriginalValueReported=i.mixMode.integrated?\"\":this.DOM.originalInput.value},cloneEvent(t){var e={};for(var i in t)\"path\"!=i&&(e[i]=t[i]);return e},loading(t){return this.state.isLoading=t,this.DOM.scope.classList[t?\"add\":\"remove\"](this.settings.classNames.scopeLoading),this},tagLoading(t,e){return t&&t.classList[e?\"add\":\"remove\"](this.settings.classNames.tagLoading),this},toggleClass(t,e){\"string\"==typeof t&&this.DOM.scope.classList.toggle(t,e)},toggleScopeValidation(t){var e=!0===t||void 0===t;!this.settings.required&&t&&t===this.TEXTS.empty&&(e=!0),this.toggleClass(this.settings.classNames.tagInvalid,!e),this.DOM.scope.title=e?\"\":t},toggleFocusClass(t){this.toggleClass(this.settings.classNames.focus,!!t)},triggerChangeEvent:function(){if(!this.settings.mixMode.integrated){var t=this.DOM.originalInput,e=this.state.lastOriginalValueReported!==t.value,i=new CustomEvent(\"change\",{bubbles:!0});e&&(this.state.lastOriginalValueReported=t.value,i.simulated=!0,t._valueTracker&&t._valueTracker.setValue(Math.random()),t.dispatchEvent(i),this.trigger(\"change\",this.state.lastOriginalValueReported),t.value=this.state.lastOriginalValueReported)}},events:I,fixFirefoxLastTagNoCaret(){},setRangeAtStartEnd(t,e){if(e){t=\"number\"==typeof t?t:!!t,e=e.lastChild||e;var i=document.getSelection();if(i.focusNode instanceof Element&&!this.DOM.input.contains(i.focusNode))return!0;try{i.rangeCount>=1&&[\"Start\",\"End\"].forEach((s=>i.getRangeAt(0)[\"set\"+s](e,t||e.length)))}catch(t){}}},placeCaretAfterNode(t){if(t&&t.parentNode){var e=t,i=window.getSelection(),s=i.getRangeAt(0);i.rangeCount&&(s.setStartAfter(e),s.collapse(!0),i.removeAllRanges(),i.addRange(s))}},insertAfterTag(t,e){if(e=e||this.settings.mixMode.insertAfterTag,t&&t.parentNode&&e)return e=\"string\"==typeof e?document.createTextNode(e):e,t.parentNode.insertBefore(e,t.nextSibling),e},editTagChangeDetected(t){var e=t.__originalData;for(var i in e)if(!this.dataProps.includes(i)&&t[i]!=e[i])return!0;return!1},getTagTextNode(t){return t.querySelector(this.settings.classNames.tagTextSelector)},setTagTextNode(t,e){this.getTagTextNode(t).innerHTML=d(e)},editTag(t,e){t=t||this.getLastTag(),e=e||{},this.dropdown.hide();var i=this.settings,s=this.getTagTextNode(t),a=this.getNodeIndex(t),n=T(t),o=this.events.callbacks,r=this,l=!0;if(s){if(!(n instanceof Object&&\"editable\"in n)||n.editable)return n=T(t,{__originalData:g({},n),__originalHTML:t.cloneNode(!0)}),T(n.__originalHTML,n.__originalData),s.setAttribute(\"contenteditable\",!0),t.classList.add(i.classNames.tagEditing),s.addEventListener(\"focus\",o.onEditTagFocus.bind(this,t)),s.addEventListener(\"blur\",(function(){setTimeout((()=>o.onEditTagBlur.call(r,r.getTagTextNode(t))))})),s.addEventListener(\"input\",o.onEditTagInput.bind(this,s)),s.addEventListener(\"paste\",o.onEditTagPaste.bind(this,s)),s.addEventListener(\"keydown\",(e=>o.onEditTagkeydown.call(this,e,t))),s.addEventListener(\"compositionstart\",o.onCompositionStart.bind(this)),s.addEventListener(\"compositionend\",o.onCompositionEnd.bind(this)),e.skipValidation||(l=this.editTagToggleValidity(t)),s.originalIsValid=l,this.trigger(\"edit:start\",{tag:t,index:a,data:n,isValid:l}),s.focus(),this.setRangeAtStartEnd(!1,s),this}else console.warn(\"Cannot find element in Tag template: .\",i.classNames.tagTextSelector)},editTagToggleValidity(t,e){var i;if(e=e||T(t))return(i=!(\"__isValid\"in e)||!0===e.__isValid)||this.removeTagsFromValue(t),this.update(),t.classList.toggle(this.settings.classNames.tagNotAllowed,!i),e.__isValid;console.warn(\"tag has no data: \",t,e)},onEditTagDone(t,e){e=e||{};var i={tag:t=t||this.state.editing.scope,index:this.getNodeIndex(t),previousData:T(t),data:e};this.trigger(\"edit:beforeUpdate\",i,{cloneData:!1}),this.state.editing=!1,delete e.__originalData,delete e.__originalHTML,t&&e[this.settings.tagTextProp]?(t=this.replaceTag(t,e),this.editTagToggleValidity(t,e),this.settings.a11y.focusableTags?t.focus():this.placeCaretAfterNode(t)):t&&this.removeTags(t),this.trigger(\"edit:updated\",i),this.dropdown.hide(),this.settings.keepInvalidTags&&this.reCheckInvalidTags()},replaceTag(t,e){e&&e.value||(e=t.__tagifyTagData),e.__isValid&&1!=e.__isValid&&g(e,this.getInvalidTagAttrs(e,e.__isValid));var i=this.createTagElem(e);return t.parentNode.replaceChild(i,t),this.updateValueByDOMTags(),i},updateValueByDOMTags(){this.value.length=0,[].forEach.call(this.getTagElms(),(t=>{t.classList.contains(this.settings.classNames.tagNotAllowed.split(\" \")[0])||this.value.push(T(t))})),this.update()},injectAtCaret(t,e){return!(e=e||this.state.selection?.range)&&t?(this.appendMixTags(t),this):(f(t,e),this.setRangeAtStartEnd(!1,t),this.updateValueByDOMTags(),this.update(),this)},input:{set(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"\",e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];var i=this.settings.dropdown.closeOnSelect;this.state.inputText=t,e&&(this.DOM.input.innerHTML=d(\"\"+t)),!t&&i&&this.dropdown.hide.bind(this),this.input.autocomplete.suggest.call(this),this.input.validate.call(this)},raw(){return this.DOM.input.textContent},validate(){var t=!this.state.inputText||!0===this.validateTag({value:this.state.inputText});return this.DOM.input.classList.toggle(this.settings.classNames.inputInvalid,!t),t},normalize(t){var e=t||this.DOM.input,i=[];e.childNodes.forEach((t=>3==t.nodeType&&i.push(t.nodeValue))),i=i.join(\"\\n\");try{i=i.replace(/(?:\\r\\n|\\r|\\n)/g,this.settings.delimiters.source.charAt(0))}catch(t){}return i=i.replace(/\\s/g,\" \"),this.trim(i)},autocomplete:{suggest(t){if(this.settings.autoComplete.enabled){\"string\"==typeof(t=t||{value:\"\"})&&(t={value:t});var e=this.dropdown.getMappedValue(t);if(\"number\"!=typeof e){var i=e.substr(0,this.state.inputText.length).toLowerCase(),s=e.substring(this.state.inputText.length);e&&this.state.inputText&&i==this.state.inputText.toLowerCase()?(this.DOM.input.setAttribute(\"data-suggest\",s),this.state.inputSuggestion=t):(this.DOM.input.removeAttribute(\"data-suggest\"),delete this.state.inputSuggestion)}}},set(t){var e=this.DOM.input.getAttribute(\"data-suggest\"),i=t||(e?this.state.inputText+e:null);return!!i&&(\"mix\"==this.settings.mode?this.replaceTextWithNode(document.createTextNode(this.state.tag.prefix+i)):(this.input.set.call(this,i),this.setRangeAtStartEnd(!1,this.DOM.input)),this.input.autocomplete.suggest.call(this),this.dropdown.hide(),!0)}}},getTagIdx(t){return this.value.findIndex((e=>e.__tagId==(t||{}).__tagId))},getNodeIndex(t){var e=0;if(t)for(;t=t.previousElementSibling;)e++;return e},getTagElms(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var s=\".\"+[...this.settings.classNames.tag.split(\" \"),...e].join(\".\");return[].slice.call(this.DOM.scope.querySelectorAll(s))},getLastTag(){var t=this.DOM.scope.querySelectorAll(`${this.settings.classNames.tagSelector}:not(.${this.settings.classNames.tagHide}):not([readonly])`);return t[t.length-1]},isTagDuplicate(t,e,i){var a=0;if(\"select\"==this.settings.mode)return!1;for(let n of this.value){s(this.trim(\"\"+t),n.value,e)&&i!=n.__tagId&&a++}return a},getTagIndexByValue(t){var e=[];return this.getTagElms().forEach(((i,a)=>{s(this.trim(i.textContent),t,this.settings.dropdown.caseSensitive)&&e.push(a)})),e},getTagElmByValue(t){var e=this.getTagIndexByValue(t)[0];return this.getTagElms()[e]},flashTag(t){t&&(t.classList.add(this.settings.classNames.tagFlash),setTimeout((()=>{t.classList.remove(this.settings.classNames.tagFlash)}),100))},isTagBlacklisted(t){return t=this.trim(t.toLowerCase()),this.settings.blacklist.filter((e=>(\"\"+e).toLowerCase()==t)).length},isTagWhitelisted(t){return!!this.getWhitelistItem(t)},getWhitelistItem(t,e,i){e=e||\"value\";var a,n=this.settings;return(i=i||n.whitelist).some((i=>{var o=\"string\"==typeof i?i:i[e]||i.value;if(s(o,t,n.dropdown.caseSensitive,n.trim))return a=\"string\"==typeof i?{value:i}:i,!0})),a||\"value\"!=e||\"value\"==n.tagTextProp||(a=this.getWhitelistItem(t,n.tagTextProp,i)),a},validateTag(t){var e=this.settings,i=\"value\"in t?\"value\":e.tagTextProp,s=this.trim(t[i]+\"\");return(t[i]+\"\").trim()?e.pattern&&e.pattern instanceof RegExp&&!e.pattern.test(s)?this.TEXTS.pattern:!e.duplicates&&this.isTagDuplicate(s,e.dropdown.caseSensitive,t.__tagId)?this.TEXTS.duplicate:this.isTagBlacklisted(s)||e.enforceWhitelist&&!this.isTagWhitelisted(s)?this.TEXTS.notAllowed:!e.validate||e.validate(t):this.TEXTS.empty},getInvalidTagAttrs(t,e){return{\"aria-invalid\":!0,class:`${t.class||\"\"} ${this.settings.classNames.tagNotAllowed}`.trim(),title:e}},hasMaxTags(){return this.value.length>=this.settings.maxTags&&this.TEXTS.exceed},setReadonly(t,e){var i=this.settings;document.activeElement.blur(),i[e||\"readonly\"]=t,this.DOM.scope[(t?\"set\":\"remove\")+\"Attribute\"](e||\"readonly\",!0),this.setContentEditable(!t)},setContentEditable(t){this.settings.userInput&&(this.DOM.input.contentEditable=t,this.DOM.input.tabIndex=t?0:-1)},setDisabled(t){this.setReadonly(t,\"disabled\")},normalizeTags(t){var e=this.settings,i=e.whitelist,s=e.delimiters,a=e.mode,n=e.tagTextProp,o=[],r=!!i&&i[0]instanceof Object,l=Array.isArray(t),d=l&&t[0].value,h=t=>(t+\"\").split(s).filter((t=>t)).map((t=>({[n]:this.trim(t),value:this.trim(t)})));if(\"number\"==typeof t&&(t=t.toString()),\"string\"==typeof t){if(!t.trim())return[];t=h(t)}else l&&(t=[].concat(...t.map((t=>null!=t.value?t:h(t)))));return r&&!d&&(t.forEach((t=>{var e=o.map((t=>t.value)),i=this.dropdown.filterListItems.call(this,t[n],{exact:!0});this.settings.duplicates||(i=i.filter((t=>!e.includes(t.value))));var s=i.length>1?this.getWhitelistItem(t[n],n,i):i[0];s&&s instanceof Object?o.push(s):\"mix\"!=a&&(null==t.value&&(t.value=t[n]),o.push(t))})),o.length&&(t=o)),t},parseMixTags(t){var e=this.settings,i=e.mixTagsInterpolator,s=e.duplicates,a=e.transformTag,n=e.enforceWhitelist,o=e.maxTags,r=e.tagTextProp,l=[];return t=t.split(i[0]).map(((t,e)=>{var d,h,g,p=t.split(i[1]),c=p[0],u=l.length==o;try{if(c==+c)throw Error;h=JSON.parse(c)}catch(t){h=this.normalizeTags(c)[0]||{value:c}}if(a.call(this,h),u||!(p.length>1)||n&&!this.isTagWhitelisted(h.value)||!s&&this.isTagDuplicate(h.value)){if(t)return e?i[0]+t:t}else h[d=h[r]?r:\"value\"]=this.trim(h[d]),g=this.createTagElem(h),l.push(h),g.classList.add(this.settings.classNames.tagNoAnimation),p[0]=g.outerHTML,this.value.push(h);return p.join(\"\")})).join(\"\"),this.DOM.input.innerHTML=t,this.DOM.input.appendChild(document.createTextNode(\"\")),this.DOM.input.normalize(),this.getTagElms().forEach(((t,e)=>T(t,l[e]))),this.update({withoutChangeEvent:!0}),t},replaceTextWithNode(t,e){if(this.state.tag||e){e=e||this.state.tag.prefix+this.state.tag.value;var i,s,a=this.state.selection||window.getSelection(),n=a.anchorNode,o=this.state.tag.delimiters?this.state.tag.delimiters.length:0;return n.splitText(a.anchorOffset-o),-1==(i=n.nodeValue.lastIndexOf(e))?!0:(s=n.splitText(i),t&&n.parentNode.replaceChild(t,s),!0)}},selectTag(t,e){var i=this.settings;if(!i.enforceWhitelist||this.isTagWhitelisted(e.value)){this.input.set.call(this,e[i.tagTextProp]||e.value,!0),this.state.actions.selectOption&&setTimeout((()=>this.setRangeAtStartEnd(!1,this.DOM.input)));var s=this.getLastTag();return s?this.replaceTag(s,e):this.appendTag(t),this.value[0]=e,this.update(),this.trigger(\"add\",{tag:t,data:e}),[t]}},addEmptyTag(t){var e=g({value:\"\"},t||{}),i=this.createTagElem(e);T(i,e),this.appendTag(i),this.editTag(i,{skipValidation:!0})},addTags(t,e,i){var s=[],a=this.settings,n=[],o=document.createDocumentFragment();if(i=i||a.skipInvalid,!t||0==t.length)return s;switch(t=this.normalizeTags(t),a.mode){case\"mix\":return this.addMixTags(t);case\"select\":e=!1,this.removeAllTags()}return this.DOM.input.removeAttribute(\"style\"),t.forEach((t=>{var e,r={},l=Object.assign({},t,{value:t.value+\"\"});if(t=Object.assign({},l),a.transformTag.call(this,t),t.__isValid=this.hasMaxTags()||this.validateTag(t),!0!==t.__isValid){if(i)return;if(g(r,this.getInvalidTagAttrs(t,t.__isValid),{__preInvalidData:l}),t.__isValid==this.TEXTS.duplicate&&this.flashTag(this.getTagElmByValue(t.value)),!a.createInvalidTags)return void n.push(t.value)}if(\"readonly\"in t&&(t.readonly?r[\"aria-readonly\"]=!0:delete t.readonly),e=this.createTagElem(t,r),s.push(e),\"select\"==a.mode)return this.selectTag(e,t);o.appendChild(e),t.__isValid&&!0===t.__isValid?(this.value.push(t),this.trigger(\"add\",{tag:e,index:this.value.length-1,data:t})):(this.trigger(\"invalid\",{data:t,index:this.value.length,tag:e,message:t.__isValid}),a.keepInvalidTags||setTimeout((()=>this.removeTags(e,!0)),1e3)),this.dropdown.position()})),this.appendTag(o),this.update(),t.length&&e&&(this.input.set.call(this,a.createInvalidTags?\"\":n.join(a._delimiters)),this.setRangeAtStartEnd(!1,this.DOM.input)),a.dropdown.enabled&&this.dropdown.refilter(),s},addMixTags(t){if((t=this.normalizeTags(t))[0].prefix||this.state.tag)return this.prefixedTextToTag(t[0]);var e=document.createDocumentFragment();return t.forEach((t=>{var i=this.createTagElem(t);e.appendChild(i)})),this.appendMixTags(e),e},appendMixTags(t){var e=!!this.state.selection;e?this.injectAtCaret(t):(this.DOM.input.focus(),(e=this.setStateSelection()).range.setStart(this.DOM.input,e.range.endOffset),e.range.setEnd(this.DOM.input,e.range.endOffset),this.DOM.input.appendChild(t),this.updateValueByDOMTags(),this.update())},prefixedTextToTag(t){var e,i=this.settings,s=this.state.tag.delimiters;if(i.transformTag.call(this,t),t.prefix=t.prefix||this.state.tag?this.state.tag.prefix:(i.pattern.source||i.pattern)[0],e=this.createTagElem(t),this.replaceTextWithNode(e)||this.DOM.input.appendChild(e),setTimeout((()=>e.classList.add(this.settings.classNames.tagNoAnimation)),300),this.value.push(t),this.update(),!s){var a=this.insertAfterTag(e)||e;setTimeout(this.placeCaretAfterNode,0,a)}return this.state.tag=null,this.trigger(\"add\",g({},{tag:e},{data:t})),e},appendTag(t){var e=this.DOM,i=e.input;e.scope.insertBefore(t,i)},createTagElem(t,i){t.__tagId=m();var s,a=g({},t,e({value:d(t.value+\"\")},i));return function(t){for(var e,i=document.createNodeIterator(t,NodeFilter.SHOW_TEXT,null,!1);e=i.nextNode();)e.textContent.trim()||e.parentNode.removeChild(e)}(s=this.parseTemplate(\"tag\",[a,this])),T(s,t),s},reCheckInvalidTags(){var t=this.settings;this.getTagElms(t.classNames.tagNotAllowed).forEach(((e,i)=>{var s=T(e),a=this.hasMaxTags(),n=this.validateTag(s),o=!0===n&&!a;if(\"select\"==t.mode&&this.toggleScopeValidation(n),o)return s=s.__preInvalidData?s.__preInvalidData:{value:s.value},this.replaceTag(e,s);e.title=a||n}))},removeTags(t,e,i){var s,a=this.settings;if(t=t&&t instanceof HTMLElement?[t]:t instanceof Array?t:t?[t]:[this.getLastTag()],s=t.reduce(((t,e)=>{e&&\"string\"==typeof e&&(e=this.getTagElmByValue(e));var i=T(e);return e&&i&&!i.readonly&&t.push({node:e,idx:this.getTagIdx(i),data:T(e,{__removed:!0})}),t}),[]),i=\"number\"==typeof i?i:this.CSSVars.tagHideTransition,\"select\"==a.mode&&(i=0,this.input.set.call(this)),1==s.length&&\"select\"!=a.mode&&s[0].node.classList.contains(a.classNames.tagNotAllowed)&&(e=!0),s.length)return a.hooks.beforeRemoveTag(s,{tagify:this}).then((()=>{function t(t){t.node.parentNode&&(t.node.parentNode.removeChild(t.node),e?a.keepInvalidTags&&this.trigger(\"remove\",{tag:t.node,index:t.idx}):(this.trigger(\"remove\",{tag:t.node,index:t.idx,data:t.data}),this.dropdown.refilter(),this.dropdown.position(),this.DOM.input.normalize(),a.keepInvalidTags&&this.reCheckInvalidTags()))}i&&i>10&&1==s.length?function(e){e.node.style.width=parseFloat(window.getComputedStyle(e.node).width)+\"px\",document.body.clientTop,e.node.classList.add(a.classNames.tagHide),setTimeout(t.bind(this),i,e)}.call(this,s[0]):s.forEach(t.bind(this)),e||(this.removeTagsFromValue(s.map((t=>t.node))),this.update(),\"select\"==a.mode&&this.setContentEditable(!0))})).catch((t=>{}))},removeTagsFromDOM(){[].slice.call(this.getTagElms()).forEach((t=>t.parentNode.removeChild(t)))},removeTagsFromValue(t){(t=Array.isArray(t)?t:[t]).forEach((t=>{var e=T(t),i=this.getTagIdx(e);i>-1&&this.value.splice(i,1)}))},removeAllTags(t){t=t||{},this.value=[],\"mix\"==this.settings.mode?this.DOM.input.innerHTML=\"\":this.removeTagsFromDOM(),this.dropdown.refilter(),this.dropdown.position(),this.state.dropdown.visible&&setTimeout((()=>{this.DOM.input.focus()})),\"select\"==this.settings.mode&&(this.input.set.call(this),this.setContentEditable(!0)),this.update(t)},postUpdate(){this.state.blockChangeEvent=!1;var t=this.settings,e=t.classNames,i=\"mix\"==t.mode?t.mixMode.integrated?this.DOM.input.textContent:this.DOM.originalInput.value.trim():this.value.length+this.input.raw.call(this).length;this.toggleClass(e.hasMaxTags,this.value.length>=t.maxTags),this.toggleClass(e.hasNoTags,!this.value.length),this.toggleClass(e.empty,!i),\"select\"==t.mode&&this.toggleScopeValidation(this.value?.[0]?.__isValid)},setOriginalInputValue(t){var e=this.DOM.originalInput;this.settings.mixMode.integrated||(e.value=t,e.tagifyValue=e.value,this.setPersistedData(t,\"value\"))},update(t){clearTimeout(this.debouncedUpdateTimeout),this.debouncedUpdateTimeout=setTimeout(function(){var e=this.getInputValue();this.setOriginalInputValue(e),this.settings.onChangeAfterBlur&&(t||{}).withoutChangeEvent||this.state.blockChangeEvent||this.triggerChangeEvent();this.postUpdate()}.bind(this),100)},getInputValue(){var t=this.getCleanValue();return\"mix\"==this.settings.mode?this.getMixedTagsAsString(t):t.length?this.settings.originalInputValueFormat?this.settings.originalInputValueFormat(t):JSON.stringify(t):\"\"},getCleanValue(t){return a(t||this.value,this.dataProps)},getMixedTagsAsString(){var t=\"\",e=this,i=this.settings,s=i.originalInputValueFormat||JSON.stringify,a=i.mixTagsInterpolator;return function i(o){o.childNodes.forEach((o=>{if(1==o.nodeType){const r=T(o);if(\"BR\"==o.tagName&&(t+=\"\\r\\n\"),r&&v.call(e,o)){if(r.__removed)return;t+=a[0]+s(n(r,e.dataProps))+a[1]}else o.getAttribute(\"style\")||[\"B\",\"I\",\"U\"].includes(o.tagName)?t+=o.textContent:\"DIV\"!=o.tagName&&\"P\"!=o.tagName||(t+=\"\\r\\n\",i(o))}else t+=o.textContent}))}(this.DOM.input),t}},N.prototype.removeTag=N.prototype.removeTags,N}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@yaireo/tagify/dist/tagify.min.js\n");

/***/ }),

/***/ "./node_modules/alpinejs/dist/module.esm.js":
/*!**************************************************!*\
  !*** ./node_modules/alpinejs/dist/module.esm.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ module_default)\n/* harmony export */ });\n// packages/alpinejs/src/scheduler.js\nvar flushPending = false;\nvar flushing = false;\nvar queue = [];\nvar lastFlushedIndex = -1;\nfunction scheduler(callback) {\n  queueJob(callback);\n}\nfunction queueJob(job) {\n  if (!queue.includes(job))\n    queue.push(job);\n  queueFlush();\n}\nfunction dequeueJob(job) {\n  let index = queue.indexOf(job);\n  if (index !== -1 && index > lastFlushedIndex)\n    queue.splice(index, 1);\n}\nfunction queueFlush() {\n  if (!flushing && !flushPending) {\n    flushPending = true;\n    queueMicrotask(flushJobs);\n  }\n}\nfunction flushJobs() {\n  flushPending = false;\n  flushing = true;\n  for (let i = 0; i < queue.length; i++) {\n    queue[i]();\n    lastFlushedIndex = i;\n  }\n  queue.length = 0;\n  lastFlushedIndex = -1;\n  flushing = false;\n}\n\n// packages/alpinejs/src/reactivity.js\nvar reactive;\nvar effect;\nvar release;\nvar raw;\nvar shouldSchedule = true;\nfunction disableEffectScheduling(callback) {\n  shouldSchedule = false;\n  callback();\n  shouldSchedule = true;\n}\nfunction setReactivityEngine(engine) {\n  reactive = engine.reactive;\n  release = engine.release;\n  effect = (callback) => engine.effect(callback, {scheduler: (task) => {\n    if (shouldSchedule) {\n      scheduler(task);\n    } else {\n      task();\n    }\n  }});\n  raw = engine.raw;\n}\nfunction overrideEffect(override) {\n  effect = override;\n}\nfunction elementBoundEffect(el) {\n  let cleanup2 = () => {\n  };\n  let wrappedEffect = (callback) => {\n    let effectReference = effect(callback);\n    if (!el._x_effects) {\n      el._x_effects = new Set();\n      el._x_runEffects = () => {\n        el._x_effects.forEach((i) => i());\n      };\n    }\n    el._x_effects.add(effectReference);\n    cleanup2 = () => {\n      if (effectReference === void 0)\n        return;\n      el._x_effects.delete(effectReference);\n      release(effectReference);\n    };\n    return effectReference;\n  };\n  return [wrappedEffect, () => {\n    cleanup2();\n  }];\n}\n\n// packages/alpinejs/src/mutation.js\nvar onAttributeAddeds = [];\nvar onElRemoveds = [];\nvar onElAddeds = [];\nfunction onElAdded(callback) {\n  onElAddeds.push(callback);\n}\nfunction onElRemoved(el, callback) {\n  if (typeof callback === \"function\") {\n    if (!el._x_cleanups)\n      el._x_cleanups = [];\n    el._x_cleanups.push(callback);\n  } else {\n    callback = el;\n    onElRemoveds.push(callback);\n  }\n}\nfunction onAttributesAdded(callback) {\n  onAttributeAddeds.push(callback);\n}\nfunction onAttributeRemoved(el, name, callback) {\n  if (!el._x_attributeCleanups)\n    el._x_attributeCleanups = {};\n  if (!el._x_attributeCleanups[name])\n    el._x_attributeCleanups[name] = [];\n  el._x_attributeCleanups[name].push(callback);\n}\nfunction cleanupAttributes(el, names) {\n  if (!el._x_attributeCleanups)\n    return;\n  Object.entries(el._x_attributeCleanups).forEach(([name, value]) => {\n    if (names === void 0 || names.includes(name)) {\n      value.forEach((i) => i());\n      delete el._x_attributeCleanups[name];\n    }\n  });\n}\nvar observer = new MutationObserver(onMutate);\nvar currentlyObserving = false;\nfunction startObservingMutations() {\n  observer.observe(document, {subtree: true, childList: true, attributes: true, attributeOldValue: true});\n  currentlyObserving = true;\n}\nfunction stopObservingMutations() {\n  flushObserver();\n  observer.disconnect();\n  currentlyObserving = false;\n}\nvar recordQueue = [];\nvar willProcessRecordQueue = false;\nfunction flushObserver() {\n  recordQueue = recordQueue.concat(observer.takeRecords());\n  if (recordQueue.length && !willProcessRecordQueue) {\n    willProcessRecordQueue = true;\n    queueMicrotask(() => {\n      processRecordQueue();\n      willProcessRecordQueue = false;\n    });\n  }\n}\nfunction processRecordQueue() {\n  onMutate(recordQueue);\n  recordQueue.length = 0;\n}\nfunction mutateDom(callback) {\n  if (!currentlyObserving)\n    return callback();\n  stopObservingMutations();\n  let result = callback();\n  startObservingMutations();\n  return result;\n}\nvar isCollecting = false;\nvar deferredMutations = [];\nfunction deferMutations() {\n  isCollecting = true;\n}\nfunction flushAndStopDeferringMutations() {\n  isCollecting = false;\n  onMutate(deferredMutations);\n  deferredMutations = [];\n}\nfunction onMutate(mutations) {\n  if (isCollecting) {\n    deferredMutations = deferredMutations.concat(mutations);\n    return;\n  }\n  let addedNodes = [];\n  let removedNodes = [];\n  let addedAttributes = new Map();\n  let removedAttributes = new Map();\n  for (let i = 0; i < mutations.length; i++) {\n    if (mutations[i].target._x_ignoreMutationObserver)\n      continue;\n    if (mutations[i].type === \"childList\") {\n      mutations[i].addedNodes.forEach((node) => node.nodeType === 1 && addedNodes.push(node));\n      mutations[i].removedNodes.forEach((node) => node.nodeType === 1 && removedNodes.push(node));\n    }\n    if (mutations[i].type === \"attributes\") {\n      let el = mutations[i].target;\n      let name = mutations[i].attributeName;\n      let oldValue = mutations[i].oldValue;\n      let add2 = () => {\n        if (!addedAttributes.has(el))\n          addedAttributes.set(el, []);\n        addedAttributes.get(el).push({name, value: el.getAttribute(name)});\n      };\n      let remove = () => {\n        if (!removedAttributes.has(el))\n          removedAttributes.set(el, []);\n        removedAttributes.get(el).push(name);\n      };\n      if (el.hasAttribute(name) && oldValue === null) {\n        add2();\n      } else if (el.hasAttribute(name)) {\n        remove();\n        add2();\n      } else {\n        remove();\n      }\n    }\n  }\n  removedAttributes.forEach((attrs, el) => {\n    cleanupAttributes(el, attrs);\n  });\n  addedAttributes.forEach((attrs, el) => {\n    onAttributeAddeds.forEach((i) => i(el, attrs));\n  });\n  for (let node of removedNodes) {\n    if (addedNodes.includes(node))\n      continue;\n    onElRemoveds.forEach((i) => i(node));\n    if (node._x_cleanups) {\n      while (node._x_cleanups.length)\n        node._x_cleanups.pop()();\n    }\n  }\n  addedNodes.forEach((node) => {\n    node._x_ignoreSelf = true;\n    node._x_ignore = true;\n  });\n  for (let node of addedNodes) {\n    if (removedNodes.includes(node))\n      continue;\n    if (!node.isConnected)\n      continue;\n    delete node._x_ignoreSelf;\n    delete node._x_ignore;\n    onElAddeds.forEach((i) => i(node));\n    node._x_ignore = true;\n    node._x_ignoreSelf = true;\n  }\n  addedNodes.forEach((node) => {\n    delete node._x_ignoreSelf;\n    delete node._x_ignore;\n  });\n  addedNodes = null;\n  removedNodes = null;\n  addedAttributes = null;\n  removedAttributes = null;\n}\n\n// packages/alpinejs/src/scope.js\nfunction scope(node) {\n  return mergeProxies(closestDataStack(node));\n}\nfunction addScopeToNode(node, data2, referenceNode) {\n  node._x_dataStack = [data2, ...closestDataStack(referenceNode || node)];\n  return () => {\n    node._x_dataStack = node._x_dataStack.filter((i) => i !== data2);\n  };\n}\nfunction closestDataStack(node) {\n  if (node._x_dataStack)\n    return node._x_dataStack;\n  if (typeof ShadowRoot === \"function\" && node instanceof ShadowRoot) {\n    return closestDataStack(node.host);\n  }\n  if (!node.parentNode) {\n    return [];\n  }\n  return closestDataStack(node.parentNode);\n}\nfunction mergeProxies(objects) {\n  let thisProxy = new Proxy({}, {\n    ownKeys: () => {\n      return Array.from(new Set(objects.flatMap((i) => Object.keys(i))));\n    },\n    has: (target, name) => {\n      return objects.some((obj) => obj.hasOwnProperty(name));\n    },\n    get: (target, name) => {\n      return (objects.find((obj) => {\n        if (obj.hasOwnProperty(name)) {\n          let descriptor = Object.getOwnPropertyDescriptor(obj, name);\n          if (descriptor.get && descriptor.get._x_alreadyBound || descriptor.set && descriptor.set._x_alreadyBound) {\n            return true;\n          }\n          if ((descriptor.get || descriptor.set) && descriptor.enumerable) {\n            let getter = descriptor.get;\n            let setter = descriptor.set;\n            let property = descriptor;\n            getter = getter && getter.bind(thisProxy);\n            setter = setter && setter.bind(thisProxy);\n            if (getter)\n              getter._x_alreadyBound = true;\n            if (setter)\n              setter._x_alreadyBound = true;\n            Object.defineProperty(obj, name, {\n              ...property,\n              get: getter,\n              set: setter\n            });\n          }\n          return true;\n        }\n        return false;\n      }) || {})[name];\n    },\n    set: (target, name, value) => {\n      let closestObjectWithKey = objects.find((obj) => obj.hasOwnProperty(name));\n      if (closestObjectWithKey) {\n        closestObjectWithKey[name] = value;\n      } else {\n        objects[objects.length - 1][name] = value;\n      }\n      return true;\n    }\n  });\n  return thisProxy;\n}\n\n// packages/alpinejs/src/interceptor.js\nfunction initInterceptors(data2) {\n  let isObject2 = (val) => typeof val === \"object\" && !Array.isArray(val) && val !== null;\n  let recurse = (obj, basePath = \"\") => {\n    Object.entries(Object.getOwnPropertyDescriptors(obj)).forEach(([key, {value, enumerable}]) => {\n      if (enumerable === false || value === void 0)\n        return;\n      let path = basePath === \"\" ? key : `${basePath}.${key}`;\n      if (typeof value === \"object\" && value !== null && value._x_interceptor) {\n        obj[key] = value.initialize(data2, path, key);\n      } else {\n        if (isObject2(value) && value !== obj && !(value instanceof Element)) {\n          recurse(value, path);\n        }\n      }\n    });\n  };\n  return recurse(data2);\n}\nfunction interceptor(callback, mutateObj = () => {\n}) {\n  let obj = {\n    initialValue: void 0,\n    _x_interceptor: true,\n    initialize(data2, path, key) {\n      return callback(this.initialValue, () => get(data2, path), (value) => set(data2, path, value), path, key);\n    }\n  };\n  mutateObj(obj);\n  return (initialValue) => {\n    if (typeof initialValue === \"object\" && initialValue !== null && initialValue._x_interceptor) {\n      let initialize = obj.initialize.bind(obj);\n      obj.initialize = (data2, path, key) => {\n        let innerValue = initialValue.initialize(data2, path, key);\n        obj.initialValue = innerValue;\n        return initialize(data2, path, key);\n      };\n    } else {\n      obj.initialValue = initialValue;\n    }\n    return obj;\n  };\n}\nfunction get(obj, path) {\n  return path.split(\".\").reduce((carry, segment) => carry[segment], obj);\n}\nfunction set(obj, path, value) {\n  if (typeof path === \"string\")\n    path = path.split(\".\");\n  if (path.length === 1)\n    obj[path[0]] = value;\n  else if (path.length === 0)\n    throw error;\n  else {\n    if (obj[path[0]])\n      return set(obj[path[0]], path.slice(1), value);\n    else {\n      obj[path[0]] = {};\n      return set(obj[path[0]], path.slice(1), value);\n    }\n  }\n}\n\n// packages/alpinejs/src/magics.js\nvar magics = {};\nfunction magic(name, callback) {\n  magics[name] = callback;\n}\nfunction injectMagics(obj, el) {\n  Object.entries(magics).forEach(([name, callback]) => {\n    let memoizedUtilities = null;\n    function getUtilities() {\n      if (memoizedUtilities) {\n        return memoizedUtilities;\n      } else {\n        let [utilities, cleanup2] = getElementBoundUtilities(el);\n        memoizedUtilities = {interceptor, ...utilities};\n        onElRemoved(el, cleanup2);\n        return memoizedUtilities;\n      }\n    }\n    Object.defineProperty(obj, `$${name}`, {\n      get() {\n        return callback(el, getUtilities());\n      },\n      enumerable: false\n    });\n  });\n  return obj;\n}\n\n// packages/alpinejs/src/utils/error.js\nfunction tryCatch(el, expression, callback, ...args) {\n  try {\n    return callback(...args);\n  } catch (e) {\n    handleError(e, el, expression);\n  }\n}\nfunction handleError(error2, el, expression = void 0) {\n  Object.assign(error2, {el, expression});\n  console.warn(`Alpine Expression Error: ${error2.message}\n\n${expression ? 'Expression: \"' + expression + '\"\\n\\n' : \"\"}`, el);\n  setTimeout(() => {\n    throw error2;\n  }, 0);\n}\n\n// packages/alpinejs/src/evaluator.js\nvar shouldAutoEvaluateFunctions = true;\nfunction dontAutoEvaluateFunctions(callback) {\n  let cache = shouldAutoEvaluateFunctions;\n  shouldAutoEvaluateFunctions = false;\n  let result = callback();\n  shouldAutoEvaluateFunctions = cache;\n  return result;\n}\nfunction evaluate(el, expression, extras = {}) {\n  let result;\n  evaluateLater(el, expression)((value) => result = value, extras);\n  return result;\n}\nfunction evaluateLater(...args) {\n  return theEvaluatorFunction(...args);\n}\nvar theEvaluatorFunction = normalEvaluator;\nfunction setEvaluator(newEvaluator) {\n  theEvaluatorFunction = newEvaluator;\n}\nfunction normalEvaluator(el, expression) {\n  let overriddenMagics = {};\n  injectMagics(overriddenMagics, el);\n  let dataStack = [overriddenMagics, ...closestDataStack(el)];\n  let evaluator = typeof expression === \"function\" ? generateEvaluatorFromFunction(dataStack, expression) : generateEvaluatorFromString(dataStack, expression, el);\n  return tryCatch.bind(null, el, expression, evaluator);\n}\nfunction generateEvaluatorFromFunction(dataStack, func) {\n  return (receiver = () => {\n  }, {scope: scope2 = {}, params = []} = {}) => {\n    let result = func.apply(mergeProxies([scope2, ...dataStack]), params);\n    runIfTypeOfFunction(receiver, result);\n  };\n}\nvar evaluatorMemo = {};\nfunction generateFunctionFromString(expression, el) {\n  if (evaluatorMemo[expression]) {\n    return evaluatorMemo[expression];\n  }\n  let AsyncFunction = Object.getPrototypeOf(async function() {\n  }).constructor;\n  let rightSideSafeExpression = /^[\\n\\s]*if.*\\(.*\\)/.test(expression) || /^(let|const)\\s/.test(expression) ? `(async()=>{ ${expression} })()` : expression;\n  const safeAsyncFunction = () => {\n    try {\n      return new AsyncFunction([\"__self\", \"scope\"], `with (scope) { __self.result = ${rightSideSafeExpression} }; __self.finished = true; return __self.result;`);\n    } catch (error2) {\n      handleError(error2, el, expression);\n      return Promise.resolve();\n    }\n  };\n  let func = safeAsyncFunction();\n  evaluatorMemo[expression] = func;\n  return func;\n}\nfunction generateEvaluatorFromString(dataStack, expression, el) {\n  let func = generateFunctionFromString(expression, el);\n  return (receiver = () => {\n  }, {scope: scope2 = {}, params = []} = {}) => {\n    func.result = void 0;\n    func.finished = false;\n    let completeScope = mergeProxies([scope2, ...dataStack]);\n    if (typeof func === \"function\") {\n      let promise = func(func, completeScope).catch((error2) => handleError(error2, el, expression));\n      if (func.finished) {\n        runIfTypeOfFunction(receiver, func.result, completeScope, params, el);\n        func.result = void 0;\n      } else {\n        promise.then((result) => {\n          runIfTypeOfFunction(receiver, result, completeScope, params, el);\n        }).catch((error2) => handleError(error2, el, expression)).finally(() => func.result = void 0);\n      }\n    }\n  };\n}\nfunction runIfTypeOfFunction(receiver, value, scope2, params, el) {\n  if (shouldAutoEvaluateFunctions && typeof value === \"function\") {\n    let result = value.apply(scope2, params);\n    if (result instanceof Promise) {\n      result.then((i) => runIfTypeOfFunction(receiver, i, scope2, params)).catch((error2) => handleError(error2, el, value));\n    } else {\n      receiver(result);\n    }\n  } else if (typeof value === \"object\" && value instanceof Promise) {\n    value.then((i) => receiver(i));\n  } else {\n    receiver(value);\n  }\n}\n\n// packages/alpinejs/src/directives.js\nvar prefixAsString = \"x-\";\nfunction prefix(subject = \"\") {\n  return prefixAsString + subject;\n}\nfunction setPrefix(newPrefix) {\n  prefixAsString = newPrefix;\n}\nvar directiveHandlers = {};\nfunction directive(name, callback) {\n  directiveHandlers[name] = callback;\n  return {\n    before(directive2) {\n      if (!directiveHandlers[directive2]) {\n        console.warn(\"Cannot find directive `${directive}`. `${name}` will use the default order of execution\");\n        return;\n      }\n      const pos = directiveOrder.indexOf(directive2);\n      directiveOrder.splice(pos >= 0 ? pos : directiveOrder.indexOf(\"DEFAULT\"), 0, name);\n    }\n  };\n}\nfunction directives(el, attributes, originalAttributeOverride) {\n  attributes = Array.from(attributes);\n  if (el._x_virtualDirectives) {\n    let vAttributes = Object.entries(el._x_virtualDirectives).map(([name, value]) => ({name, value}));\n    let staticAttributes = attributesOnly(vAttributes);\n    vAttributes = vAttributes.map((attribute) => {\n      if (staticAttributes.find((attr) => attr.name === attribute.name)) {\n        return {\n          name: `x-bind:${attribute.name}`,\n          value: `\"${attribute.value}\"`\n        };\n      }\n      return attribute;\n    });\n    attributes = attributes.concat(vAttributes);\n  }\n  let transformedAttributeMap = {};\n  let directives2 = attributes.map(toTransformedAttributes((newName, oldName) => transformedAttributeMap[newName] = oldName)).filter(outNonAlpineAttributes).map(toParsedDirectives(transformedAttributeMap, originalAttributeOverride)).sort(byPriority);\n  return directives2.map((directive2) => {\n    return getDirectiveHandler(el, directive2);\n  });\n}\nfunction attributesOnly(attributes) {\n  return Array.from(attributes).map(toTransformedAttributes()).filter((attr) => !outNonAlpineAttributes(attr));\n}\nvar isDeferringHandlers = false;\nvar directiveHandlerStacks = new Map();\nvar currentHandlerStackKey = Symbol();\nfunction deferHandlingDirectives(callback) {\n  isDeferringHandlers = true;\n  let key = Symbol();\n  currentHandlerStackKey = key;\n  directiveHandlerStacks.set(key, []);\n  let flushHandlers = () => {\n    while (directiveHandlerStacks.get(key).length)\n      directiveHandlerStacks.get(key).shift()();\n    directiveHandlerStacks.delete(key);\n  };\n  let stopDeferring = () => {\n    isDeferringHandlers = false;\n    flushHandlers();\n  };\n  callback(flushHandlers);\n  stopDeferring();\n}\nfunction getElementBoundUtilities(el) {\n  let cleanups = [];\n  let cleanup2 = (callback) => cleanups.push(callback);\n  let [effect3, cleanupEffect] = elementBoundEffect(el);\n  cleanups.push(cleanupEffect);\n  let utilities = {\n    Alpine: alpine_default,\n    effect: effect3,\n    cleanup: cleanup2,\n    evaluateLater: evaluateLater.bind(evaluateLater, el),\n    evaluate: evaluate.bind(evaluate, el)\n  };\n  let doCleanup = () => cleanups.forEach((i) => i());\n  return [utilities, doCleanup];\n}\nfunction getDirectiveHandler(el, directive2) {\n  let noop = () => {\n  };\n  let handler4 = directiveHandlers[directive2.type] || noop;\n  let [utilities, cleanup2] = getElementBoundUtilities(el);\n  onAttributeRemoved(el, directive2.original, cleanup2);\n  let fullHandler = () => {\n    if (el._x_ignore || el._x_ignoreSelf)\n      return;\n    handler4.inline && handler4.inline(el, directive2, utilities);\n    handler4 = handler4.bind(handler4, el, directive2, utilities);\n    isDeferringHandlers ? directiveHandlerStacks.get(currentHandlerStackKey).push(handler4) : handler4();\n  };\n  fullHandler.runCleanups = cleanup2;\n  return fullHandler;\n}\nvar startingWith = (subject, replacement) => ({name, value}) => {\n  if (name.startsWith(subject))\n    name = name.replace(subject, replacement);\n  return {name, value};\n};\nvar into = (i) => i;\nfunction toTransformedAttributes(callback = () => {\n}) {\n  return ({name, value}) => {\n    let {name: newName, value: newValue} = attributeTransformers.reduce((carry, transform) => {\n      return transform(carry);\n    }, {name, value});\n    if (newName !== name)\n      callback(newName, name);\n    return {name: newName, value: newValue};\n  };\n}\nvar attributeTransformers = [];\nfunction mapAttributes(callback) {\n  attributeTransformers.push(callback);\n}\nfunction outNonAlpineAttributes({name}) {\n  return alpineAttributeRegex().test(name);\n}\nvar alpineAttributeRegex = () => new RegExp(`^${prefixAsString}([^:^.]+)\\\\b`);\nfunction toParsedDirectives(transformedAttributeMap, originalAttributeOverride) {\n  return ({name, value}) => {\n    let typeMatch = name.match(alpineAttributeRegex());\n    let valueMatch = name.match(/:([a-zA-Z0-9\\-:]+)/);\n    let modifiers = name.match(/\\.[^.\\]]+(?=[^\\]]*$)/g) || [];\n    let original = originalAttributeOverride || transformedAttributeMap[name] || name;\n    return {\n      type: typeMatch ? typeMatch[1] : null,\n      value: valueMatch ? valueMatch[1] : null,\n      modifiers: modifiers.map((i) => i.replace(\".\", \"\")),\n      expression: value,\n      original\n    };\n  };\n}\nvar DEFAULT = \"DEFAULT\";\nvar directiveOrder = [\n  \"ignore\",\n  \"ref\",\n  \"data\",\n  \"id\",\n  \"bind\",\n  \"init\",\n  \"for\",\n  \"model\",\n  \"modelable\",\n  \"transition\",\n  \"show\",\n  \"if\",\n  DEFAULT,\n  \"teleport\"\n];\nfunction byPriority(a, b) {\n  let typeA = directiveOrder.indexOf(a.type) === -1 ? DEFAULT : a.type;\n  let typeB = directiveOrder.indexOf(b.type) === -1 ? DEFAULT : b.type;\n  return directiveOrder.indexOf(typeA) - directiveOrder.indexOf(typeB);\n}\n\n// packages/alpinejs/src/utils/dispatch.js\nfunction dispatch(el, name, detail = {}) {\n  el.dispatchEvent(new CustomEvent(name, {\n    detail,\n    bubbles: true,\n    composed: true,\n    cancelable: true\n  }));\n}\n\n// packages/alpinejs/src/utils/walk.js\nfunction walk(el, callback) {\n  if (typeof ShadowRoot === \"function\" && el instanceof ShadowRoot) {\n    Array.from(el.children).forEach((el2) => walk(el2, callback));\n    return;\n  }\n  let skip = false;\n  callback(el, () => skip = true);\n  if (skip)\n    return;\n  let node = el.firstElementChild;\n  while (node) {\n    walk(node, callback, false);\n    node = node.nextElementSibling;\n  }\n}\n\n// packages/alpinejs/src/utils/warn.js\nfunction warn(message, ...args) {\n  console.warn(`Alpine Warning: ${message}`, ...args);\n}\n\n// packages/alpinejs/src/lifecycle.js\nvar started = false;\nfunction start() {\n  if (started)\n    warn(\"Alpine has already been initialized on this page. Calling Alpine.start() more than once can cause problems.\");\n  started = true;\n  if (!document.body)\n    warn(\"Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?\");\n  dispatch(document, \"alpine:init\");\n  dispatch(document, \"alpine:initializing\");\n  startObservingMutations();\n  onElAdded((el) => initTree(el, walk));\n  onElRemoved((el) => destroyTree(el));\n  onAttributesAdded((el, attrs) => {\n    directives(el, attrs).forEach((handle) => handle());\n  });\n  let outNestedComponents = (el) => !closestRoot(el.parentElement, true);\n  Array.from(document.querySelectorAll(allSelectors())).filter(outNestedComponents).forEach((el) => {\n    initTree(el);\n  });\n  dispatch(document, \"alpine:initialized\");\n}\nvar rootSelectorCallbacks = [];\nvar initSelectorCallbacks = [];\nfunction rootSelectors() {\n  return rootSelectorCallbacks.map((fn) => fn());\n}\nfunction allSelectors() {\n  return rootSelectorCallbacks.concat(initSelectorCallbacks).map((fn) => fn());\n}\nfunction addRootSelector(selectorCallback) {\n  rootSelectorCallbacks.push(selectorCallback);\n}\nfunction addInitSelector(selectorCallback) {\n  initSelectorCallbacks.push(selectorCallback);\n}\nfunction closestRoot(el, includeInitSelectors = false) {\n  return findClosest(el, (element) => {\n    const selectors = includeInitSelectors ? allSelectors() : rootSelectors();\n    if (selectors.some((selector) => element.matches(selector)))\n      return true;\n  });\n}\nfunction findClosest(el, callback) {\n  if (!el)\n    return;\n  if (callback(el))\n    return el;\n  if (el._x_teleportBack)\n    el = el._x_teleportBack;\n  if (!el.parentElement)\n    return;\n  return findClosest(el.parentElement, callback);\n}\nfunction isRoot(el) {\n  return rootSelectors().some((selector) => el.matches(selector));\n}\nvar initInterceptors2 = [];\nfunction interceptInit(callback) {\n  initInterceptors2.push(callback);\n}\nfunction initTree(el, walker = walk, intercept = () => {\n}) {\n  deferHandlingDirectives(() => {\n    walker(el, (el2, skip) => {\n      intercept(el2, skip);\n      initInterceptors2.forEach((i) => i(el2, skip));\n      directives(el2, el2.attributes).forEach((handle) => handle());\n      el2._x_ignore && skip();\n    });\n  });\n}\nfunction destroyTree(root) {\n  walk(root, (el) => cleanupAttributes(el));\n}\n\n// packages/alpinejs/src/nextTick.js\nvar tickStack = [];\nvar isHolding = false;\nfunction nextTick(callback = () => {\n}) {\n  queueMicrotask(() => {\n    isHolding || setTimeout(() => {\n      releaseNextTicks();\n    });\n  });\n  return new Promise((res) => {\n    tickStack.push(() => {\n      callback();\n      res();\n    });\n  });\n}\nfunction releaseNextTicks() {\n  isHolding = false;\n  while (tickStack.length)\n    tickStack.shift()();\n}\nfunction holdNextTicks() {\n  isHolding = true;\n}\n\n// packages/alpinejs/src/utils/classes.js\nfunction setClasses(el, value) {\n  if (Array.isArray(value)) {\n    return setClassesFromString(el, value.join(\" \"));\n  } else if (typeof value === \"object\" && value !== null) {\n    return setClassesFromObject(el, value);\n  } else if (typeof value === \"function\") {\n    return setClasses(el, value());\n  }\n  return setClassesFromString(el, value);\n}\nfunction setClassesFromString(el, classString) {\n  let split = (classString2) => classString2.split(\" \").filter(Boolean);\n  let missingClasses = (classString2) => classString2.split(\" \").filter((i) => !el.classList.contains(i)).filter(Boolean);\n  let addClassesAndReturnUndo = (classes) => {\n    el.classList.add(...classes);\n    return () => {\n      el.classList.remove(...classes);\n    };\n  };\n  classString = classString === true ? classString = \"\" : classString || \"\";\n  return addClassesAndReturnUndo(missingClasses(classString));\n}\nfunction setClassesFromObject(el, classObject) {\n  let split = (classString) => classString.split(\" \").filter(Boolean);\n  let forAdd = Object.entries(classObject).flatMap(([classString, bool]) => bool ? split(classString) : false).filter(Boolean);\n  let forRemove = Object.entries(classObject).flatMap(([classString, bool]) => !bool ? split(classString) : false).filter(Boolean);\n  let added = [];\n  let removed = [];\n  forRemove.forEach((i) => {\n    if (el.classList.contains(i)) {\n      el.classList.remove(i);\n      removed.push(i);\n    }\n  });\n  forAdd.forEach((i) => {\n    if (!el.classList.contains(i)) {\n      el.classList.add(i);\n      added.push(i);\n    }\n  });\n  return () => {\n    removed.forEach((i) => el.classList.add(i));\n    added.forEach((i) => el.classList.remove(i));\n  };\n}\n\n// packages/alpinejs/src/utils/styles.js\nfunction setStyles(el, value) {\n  if (typeof value === \"object\" && value !== null) {\n    return setStylesFromObject(el, value);\n  }\n  return setStylesFromString(el, value);\n}\nfunction setStylesFromObject(el, value) {\n  let previousStyles = {};\n  Object.entries(value).forEach(([key, value2]) => {\n    previousStyles[key] = el.style[key];\n    if (!key.startsWith(\"--\")) {\n      key = kebabCase(key);\n    }\n    el.style.setProperty(key, value2);\n  });\n  setTimeout(() => {\n    if (el.style.length === 0) {\n      el.removeAttribute(\"style\");\n    }\n  });\n  return () => {\n    setStyles(el, previousStyles);\n  };\n}\nfunction setStylesFromString(el, value) {\n  let cache = el.getAttribute(\"style\", value);\n  el.setAttribute(\"style\", value);\n  return () => {\n    el.setAttribute(\"style\", cache || \"\");\n  };\n}\nfunction kebabCase(subject) {\n  return subject.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\n\n// packages/alpinejs/src/utils/once.js\nfunction once(callback, fallback = () => {\n}) {\n  let called = false;\n  return function() {\n    if (!called) {\n      called = true;\n      callback.apply(this, arguments);\n    } else {\n      fallback.apply(this, arguments);\n    }\n  };\n}\n\n// packages/alpinejs/src/directives/x-transition.js\ndirective(\"transition\", (el, {value, modifiers, expression}, {evaluate: evaluate2}) => {\n  if (typeof expression === \"function\")\n    expression = evaluate2(expression);\n  if (expression === false)\n    return;\n  if (!expression || typeof expression === \"boolean\") {\n    registerTransitionsFromHelper(el, modifiers, value);\n  } else {\n    registerTransitionsFromClassString(el, expression, value);\n  }\n});\nfunction registerTransitionsFromClassString(el, classString, stage) {\n  registerTransitionObject(el, setClasses, \"\");\n  let directiveStorageMap = {\n    enter: (classes) => {\n      el._x_transition.enter.during = classes;\n    },\n    \"enter-start\": (classes) => {\n      el._x_transition.enter.start = classes;\n    },\n    \"enter-end\": (classes) => {\n      el._x_transition.enter.end = classes;\n    },\n    leave: (classes) => {\n      el._x_transition.leave.during = classes;\n    },\n    \"leave-start\": (classes) => {\n      el._x_transition.leave.start = classes;\n    },\n    \"leave-end\": (classes) => {\n      el._x_transition.leave.end = classes;\n    }\n  };\n  directiveStorageMap[stage](classString);\n}\nfunction registerTransitionsFromHelper(el, modifiers, stage) {\n  registerTransitionObject(el, setStyles);\n  let doesntSpecify = !modifiers.includes(\"in\") && !modifiers.includes(\"out\") && !stage;\n  let transitioningIn = doesntSpecify || modifiers.includes(\"in\") || [\"enter\"].includes(stage);\n  let transitioningOut = doesntSpecify || modifiers.includes(\"out\") || [\"leave\"].includes(stage);\n  if (modifiers.includes(\"in\") && !doesntSpecify) {\n    modifiers = modifiers.filter((i, index) => index < modifiers.indexOf(\"out\"));\n  }\n  if (modifiers.includes(\"out\") && !doesntSpecify) {\n    modifiers = modifiers.filter((i, index) => index > modifiers.indexOf(\"out\"));\n  }\n  let wantsAll = !modifiers.includes(\"opacity\") && !modifiers.includes(\"scale\");\n  let wantsOpacity = wantsAll || modifiers.includes(\"opacity\");\n  let wantsScale = wantsAll || modifiers.includes(\"scale\");\n  let opacityValue = wantsOpacity ? 0 : 1;\n  let scaleValue = wantsScale ? modifierValue(modifiers, \"scale\", 95) / 100 : 1;\n  let delay = modifierValue(modifiers, \"delay\", 0) / 1e3;\n  let origin = modifierValue(modifiers, \"origin\", \"center\");\n  let property = \"opacity, transform\";\n  let durationIn = modifierValue(modifiers, \"duration\", 150) / 1e3;\n  let durationOut = modifierValue(modifiers, \"duration\", 75) / 1e3;\n  let easing = `cubic-bezier(0.4, 0.0, 0.2, 1)`;\n  if (transitioningIn) {\n    el._x_transition.enter.during = {\n      transformOrigin: origin,\n      transitionDelay: `${delay}s`,\n      transitionProperty: property,\n      transitionDuration: `${durationIn}s`,\n      transitionTimingFunction: easing\n    };\n    el._x_transition.enter.start = {\n      opacity: opacityValue,\n      transform: `scale(${scaleValue})`\n    };\n    el._x_transition.enter.end = {\n      opacity: 1,\n      transform: `scale(1)`\n    };\n  }\n  if (transitioningOut) {\n    el._x_transition.leave.during = {\n      transformOrigin: origin,\n      transitionDelay: `${delay}s`,\n      transitionProperty: property,\n      transitionDuration: `${durationOut}s`,\n      transitionTimingFunction: easing\n    };\n    el._x_transition.leave.start = {\n      opacity: 1,\n      transform: `scale(1)`\n    };\n    el._x_transition.leave.end = {\n      opacity: opacityValue,\n      transform: `scale(${scaleValue})`\n    };\n  }\n}\nfunction registerTransitionObject(el, setFunction, defaultValue = {}) {\n  if (!el._x_transition)\n    el._x_transition = {\n      enter: {during: defaultValue, start: defaultValue, end: defaultValue},\n      leave: {during: defaultValue, start: defaultValue, end: defaultValue},\n      in(before = () => {\n      }, after = () => {\n      }) {\n        transition(el, setFunction, {\n          during: this.enter.during,\n          start: this.enter.start,\n          end: this.enter.end\n        }, before, after);\n      },\n      out(before = () => {\n      }, after = () => {\n      }) {\n        transition(el, setFunction, {\n          during: this.leave.during,\n          start: this.leave.start,\n          end: this.leave.end\n        }, before, after);\n      }\n    };\n}\nwindow.Element.prototype._x_toggleAndCascadeWithTransitions = function(el, value, show, hide) {\n  const nextTick2 = document.visibilityState === \"visible\" ? requestAnimationFrame : setTimeout;\n  let clickAwayCompatibleShow = () => nextTick2(show);\n  if (value) {\n    if (el._x_transition && (el._x_transition.enter || el._x_transition.leave)) {\n      el._x_transition.enter && (Object.entries(el._x_transition.enter.during).length || Object.entries(el._x_transition.enter.start).length || Object.entries(el._x_transition.enter.end).length) ? el._x_transition.in(show) : clickAwayCompatibleShow();\n    } else {\n      el._x_transition ? el._x_transition.in(show) : clickAwayCompatibleShow();\n    }\n    return;\n  }\n  el._x_hidePromise = el._x_transition ? new Promise((resolve, reject) => {\n    el._x_transition.out(() => {\n    }, () => resolve(hide));\n    el._x_transitioning.beforeCancel(() => reject({isFromCancelledTransition: true}));\n  }) : Promise.resolve(hide);\n  queueMicrotask(() => {\n    let closest = closestHide(el);\n    if (closest) {\n      if (!closest._x_hideChildren)\n        closest._x_hideChildren = [];\n      closest._x_hideChildren.push(el);\n    } else {\n      nextTick2(() => {\n        let hideAfterChildren = (el2) => {\n          let carry = Promise.all([\n            el2._x_hidePromise,\n            ...(el2._x_hideChildren || []).map(hideAfterChildren)\n          ]).then(([i]) => i());\n          delete el2._x_hidePromise;\n          delete el2._x_hideChildren;\n          return carry;\n        };\n        hideAfterChildren(el).catch((e) => {\n          if (!e.isFromCancelledTransition)\n            throw e;\n        });\n      });\n    }\n  });\n};\nfunction closestHide(el) {\n  let parent = el.parentNode;\n  if (!parent)\n    return;\n  return parent._x_hidePromise ? parent : closestHide(parent);\n}\nfunction transition(el, setFunction, {during, start: start2, end} = {}, before = () => {\n}, after = () => {\n}) {\n  if (el._x_transitioning)\n    el._x_transitioning.cancel();\n  if (Object.keys(during).length === 0 && Object.keys(start2).length === 0 && Object.keys(end).length === 0) {\n    before();\n    after();\n    return;\n  }\n  let undoStart, undoDuring, undoEnd;\n  performTransition(el, {\n    start() {\n      undoStart = setFunction(el, start2);\n    },\n    during() {\n      undoDuring = setFunction(el, during);\n    },\n    before,\n    end() {\n      undoStart();\n      undoEnd = setFunction(el, end);\n    },\n    after,\n    cleanup() {\n      undoDuring();\n      undoEnd();\n    }\n  });\n}\nfunction performTransition(el, stages) {\n  let interrupted, reachedBefore, reachedEnd;\n  let finish = once(() => {\n    mutateDom(() => {\n      interrupted = true;\n      if (!reachedBefore)\n        stages.before();\n      if (!reachedEnd) {\n        stages.end();\n        releaseNextTicks();\n      }\n      stages.after();\n      if (el.isConnected)\n        stages.cleanup();\n      delete el._x_transitioning;\n    });\n  });\n  el._x_transitioning = {\n    beforeCancels: [],\n    beforeCancel(callback) {\n      this.beforeCancels.push(callback);\n    },\n    cancel: once(function() {\n      while (this.beforeCancels.length) {\n        this.beforeCancels.shift()();\n      }\n      ;\n      finish();\n    }),\n    finish\n  };\n  mutateDom(() => {\n    stages.start();\n    stages.during();\n  });\n  holdNextTicks();\n  requestAnimationFrame(() => {\n    if (interrupted)\n      return;\n    let duration = Number(getComputedStyle(el).transitionDuration.replace(/,.*/, \"\").replace(\"s\", \"\")) * 1e3;\n    let delay = Number(getComputedStyle(el).transitionDelay.replace(/,.*/, \"\").replace(\"s\", \"\")) * 1e3;\n    if (duration === 0)\n      duration = Number(getComputedStyle(el).animationDuration.replace(\"s\", \"\")) * 1e3;\n    mutateDom(() => {\n      stages.before();\n    });\n    reachedBefore = true;\n    requestAnimationFrame(() => {\n      if (interrupted)\n        return;\n      mutateDom(() => {\n        stages.end();\n      });\n      releaseNextTicks();\n      setTimeout(el._x_transitioning.finish, duration + delay);\n      reachedEnd = true;\n    });\n  });\n}\nfunction modifierValue(modifiers, key, fallback) {\n  if (modifiers.indexOf(key) === -1)\n    return fallback;\n  const rawValue = modifiers[modifiers.indexOf(key) + 1];\n  if (!rawValue)\n    return fallback;\n  if (key === \"scale\") {\n    if (isNaN(rawValue))\n      return fallback;\n  }\n  if (key === \"duration\" || key === \"delay\") {\n    let match = rawValue.match(/([0-9]+)ms/);\n    if (match)\n      return match[1];\n  }\n  if (key === \"origin\") {\n    if ([\"top\", \"right\", \"left\", \"center\", \"bottom\"].includes(modifiers[modifiers.indexOf(key) + 2])) {\n      return [rawValue, modifiers[modifiers.indexOf(key) + 2]].join(\" \");\n    }\n  }\n  return rawValue;\n}\n\n// packages/alpinejs/src/clone.js\nvar isCloning = false;\nfunction skipDuringClone(callback, fallback = () => {\n}) {\n  return (...args) => isCloning ? fallback(...args) : callback(...args);\n}\nfunction onlyDuringClone(callback) {\n  return (...args) => isCloning && callback(...args);\n}\nfunction clone(oldEl, newEl) {\n  if (!newEl._x_dataStack)\n    newEl._x_dataStack = oldEl._x_dataStack;\n  isCloning = true;\n  dontRegisterReactiveSideEffects(() => {\n    cloneTree(newEl);\n  });\n  isCloning = false;\n}\nfunction cloneTree(el) {\n  let hasRunThroughFirstEl = false;\n  let shallowWalker = (el2, callback) => {\n    walk(el2, (el3, skip) => {\n      if (hasRunThroughFirstEl && isRoot(el3))\n        return skip();\n      hasRunThroughFirstEl = true;\n      callback(el3, skip);\n    });\n  };\n  initTree(el, shallowWalker);\n}\nfunction dontRegisterReactiveSideEffects(callback) {\n  let cache = effect;\n  overrideEffect((callback2, el) => {\n    let storedEffect = cache(callback2);\n    release(storedEffect);\n    return () => {\n    };\n  });\n  callback();\n  overrideEffect(cache);\n}\n\n// packages/alpinejs/src/utils/bind.js\nfunction bind(el, name, value, modifiers = []) {\n  if (!el._x_bindings)\n    el._x_bindings = reactive({});\n  el._x_bindings[name] = value;\n  name = modifiers.includes(\"camel\") ? camelCase(name) : name;\n  switch (name) {\n    case \"value\":\n      bindInputValue(el, value);\n      break;\n    case \"style\":\n      bindStyles(el, value);\n      break;\n    case \"class\":\n      bindClasses(el, value);\n      break;\n    case \"selected\":\n    case \"checked\":\n      bindAttributeAndProperty(el, name, value);\n      break;\n    default:\n      bindAttribute(el, name, value);\n      break;\n  }\n}\nfunction bindInputValue(el, value) {\n  if (el.type === \"radio\") {\n    if (el.attributes.value === void 0) {\n      el.value = value;\n    }\n    if (window.fromModel) {\n      el.checked = checkedAttrLooseCompare(el.value, value);\n    }\n  } else if (el.type === \"checkbox\") {\n    if (Number.isInteger(value)) {\n      el.value = value;\n    } else if (!Number.isInteger(value) && !Array.isArray(value) && typeof value !== \"boolean\" && ![null, void 0].includes(value)) {\n      el.value = String(value);\n    } else {\n      if (Array.isArray(value)) {\n        el.checked = value.some((val) => checkedAttrLooseCompare(val, el.value));\n      } else {\n        el.checked = !!value;\n      }\n    }\n  } else if (el.tagName === \"SELECT\") {\n    updateSelect(el, value);\n  } else {\n    if (el.value === value)\n      return;\n    el.value = value;\n  }\n}\nfunction bindClasses(el, value) {\n  if (el._x_undoAddedClasses)\n    el._x_undoAddedClasses();\n  el._x_undoAddedClasses = setClasses(el, value);\n}\nfunction bindStyles(el, value) {\n  if (el._x_undoAddedStyles)\n    el._x_undoAddedStyles();\n  el._x_undoAddedStyles = setStyles(el, value);\n}\nfunction bindAttributeAndProperty(el, name, value) {\n  bindAttribute(el, name, value);\n  setPropertyIfChanged(el, name, value);\n}\nfunction bindAttribute(el, name, value) {\n  if ([null, void 0, false].includes(value) && attributeShouldntBePreservedIfFalsy(name)) {\n    el.removeAttribute(name);\n  } else {\n    if (isBooleanAttr(name))\n      value = name;\n    setIfChanged(el, name, value);\n  }\n}\nfunction setIfChanged(el, attrName, value) {\n  if (el.getAttribute(attrName) != value) {\n    el.setAttribute(attrName, value);\n  }\n}\nfunction setPropertyIfChanged(el, propName, value) {\n  if (el[propName] !== value) {\n    el[propName] = value;\n  }\n}\nfunction updateSelect(el, value) {\n  const arrayWrappedValue = [].concat(value).map((value2) => {\n    return value2 + \"\";\n  });\n  Array.from(el.options).forEach((option) => {\n    option.selected = arrayWrappedValue.includes(option.value);\n  });\n}\nfunction camelCase(subject) {\n  return subject.toLowerCase().replace(/-(\\w)/g, (match, char) => char.toUpperCase());\n}\nfunction checkedAttrLooseCompare(valueA, valueB) {\n  return valueA == valueB;\n}\nfunction isBooleanAttr(attrName) {\n  const booleanAttributes = [\n    \"disabled\",\n    \"checked\",\n    \"required\",\n    \"readonly\",\n    \"hidden\",\n    \"open\",\n    \"selected\",\n    \"autofocus\",\n    \"itemscope\",\n    \"multiple\",\n    \"novalidate\",\n    \"allowfullscreen\",\n    \"allowpaymentrequest\",\n    \"formnovalidate\",\n    \"autoplay\",\n    \"controls\",\n    \"loop\",\n    \"muted\",\n    \"playsinline\",\n    \"default\",\n    \"ismap\",\n    \"reversed\",\n    \"async\",\n    \"defer\",\n    \"nomodule\"\n  ];\n  return booleanAttributes.includes(attrName);\n}\nfunction attributeShouldntBePreservedIfFalsy(name) {\n  return ![\"aria-pressed\", \"aria-checked\", \"aria-expanded\", \"aria-selected\"].includes(name);\n}\nfunction getBinding(el, name, fallback) {\n  if (el._x_bindings && el._x_bindings[name] !== void 0)\n    return el._x_bindings[name];\n  return getAttributeBinding(el, name, fallback);\n}\nfunction extractProp(el, name, fallback, extract = true) {\n  if (el._x_bindings && el._x_bindings[name] !== void 0)\n    return el._x_bindings[name];\n  if (el._x_inlineBindings && el._x_inlineBindings[name] !== void 0) {\n    let binding = el._x_inlineBindings[name];\n    binding.extract = extract;\n    return dontAutoEvaluateFunctions(() => {\n      return evaluate(el, binding.expression);\n    });\n  }\n  return getAttributeBinding(el, name, fallback);\n}\nfunction getAttributeBinding(el, name, fallback) {\n  let attr = el.getAttribute(name);\n  if (attr === null)\n    return typeof fallback === \"function\" ? fallback() : fallback;\n  if (attr === \"\")\n    return true;\n  if (isBooleanAttr(name)) {\n    return !![name, \"true\"].includes(attr);\n  }\n  return attr;\n}\n\n// packages/alpinejs/src/utils/debounce.js\nfunction debounce(func, wait) {\n  var timeout;\n  return function() {\n    var context = this, args = arguments;\n    var later = function() {\n      timeout = null;\n      func.apply(context, args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n\n// packages/alpinejs/src/utils/throttle.js\nfunction throttle(func, limit) {\n  let inThrottle;\n  return function() {\n    let context = this, args = arguments;\n    if (!inThrottle) {\n      func.apply(context, args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n}\n\n// packages/alpinejs/src/plugin.js\nfunction plugin(callback) {\n  let callbacks = Array.isArray(callback) ? callback : [callback];\n  callbacks.forEach((i) => i(alpine_default));\n}\n\n// packages/alpinejs/src/store.js\nvar stores = {};\nvar isReactive = false;\nfunction store(name, value) {\n  if (!isReactive) {\n    stores = reactive(stores);\n    isReactive = true;\n  }\n  if (value === void 0) {\n    return stores[name];\n  }\n  stores[name] = value;\n  if (typeof value === \"object\" && value !== null && value.hasOwnProperty(\"init\") && typeof value.init === \"function\") {\n    stores[name].init();\n  }\n  initInterceptors(stores[name]);\n}\nfunction getStores() {\n  return stores;\n}\n\n// packages/alpinejs/src/binds.js\nvar binds = {};\nfunction bind2(name, bindings) {\n  let getBindings = typeof bindings !== \"function\" ? () => bindings : bindings;\n  if (name instanceof Element) {\n    applyBindingsObject(name, getBindings());\n  } else {\n    binds[name] = getBindings;\n  }\n}\nfunction injectBindingProviders(obj) {\n  Object.entries(binds).forEach(([name, callback]) => {\n    Object.defineProperty(obj, name, {\n      get() {\n        return (...args) => {\n          return callback(...args);\n        };\n      }\n    });\n  });\n  return obj;\n}\nfunction applyBindingsObject(el, obj, original) {\n  let cleanupRunners = [];\n  while (cleanupRunners.length)\n    cleanupRunners.pop()();\n  let attributes = Object.entries(obj).map(([name, value]) => ({name, value}));\n  let staticAttributes = attributesOnly(attributes);\n  attributes = attributes.map((attribute) => {\n    if (staticAttributes.find((attr) => attr.name === attribute.name)) {\n      return {\n        name: `x-bind:${attribute.name}`,\n        value: `\"${attribute.value}\"`\n      };\n    }\n    return attribute;\n  });\n  directives(el, attributes, original).map((handle) => {\n    cleanupRunners.push(handle.runCleanups);\n    handle();\n  });\n}\n\n// packages/alpinejs/src/datas.js\nvar datas = {};\nfunction data(name, callback) {\n  datas[name] = callback;\n}\nfunction injectDataProviders(obj, context) {\n  Object.entries(datas).forEach(([name, callback]) => {\n    Object.defineProperty(obj, name, {\n      get() {\n        return (...args) => {\n          return callback.bind(context)(...args);\n        };\n      },\n      enumerable: false\n    });\n  });\n  return obj;\n}\n\n// packages/alpinejs/src/alpine.js\nvar Alpine = {\n  get reactive() {\n    return reactive;\n  },\n  get release() {\n    return release;\n  },\n  get effect() {\n    return effect;\n  },\n  get raw() {\n    return raw;\n  },\n  version: \"3.12.3\",\n  flushAndStopDeferringMutations,\n  dontAutoEvaluateFunctions,\n  disableEffectScheduling,\n  startObservingMutations,\n  stopObservingMutations,\n  setReactivityEngine,\n  closestDataStack,\n  skipDuringClone,\n  onlyDuringClone,\n  addRootSelector,\n  addInitSelector,\n  addScopeToNode,\n  deferMutations,\n  mapAttributes,\n  evaluateLater,\n  interceptInit,\n  setEvaluator,\n  mergeProxies,\n  extractProp,\n  findClosest,\n  closestRoot,\n  destroyTree,\n  interceptor,\n  transition,\n  setStyles,\n  mutateDom,\n  directive,\n  throttle,\n  debounce,\n  evaluate,\n  initTree,\n  nextTick,\n  prefixed: prefix,\n  prefix: setPrefix,\n  plugin,\n  magic,\n  store,\n  start,\n  clone,\n  bound: getBinding,\n  $data: scope,\n  walk,\n  data,\n  bind: bind2\n};\nvar alpine_default = Alpine;\n\n// node_modules/@vue/shared/dist/shared.esm-bundler.js\nfunction makeMap(str, expectsLowerCase) {\n  const map = Object.create(null);\n  const list = str.split(\",\");\n  for (let i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase ? (val) => !!map[val.toLowerCase()] : (val) => !!map[val];\n}\nvar PatchFlagNames = {\n  [1]: `TEXT`,\n  [2]: `CLASS`,\n  [4]: `STYLE`,\n  [8]: `PROPS`,\n  [16]: `FULL_PROPS`,\n  [32]: `HYDRATE_EVENTS`,\n  [64]: `STABLE_FRAGMENT`,\n  [128]: `KEYED_FRAGMENT`,\n  [256]: `UNKEYED_FRAGMENT`,\n  [512]: `NEED_PATCH`,\n  [1024]: `DYNAMIC_SLOTS`,\n  [2048]: `DEV_ROOT_FRAGMENT`,\n  [-1]: `HOISTED`,\n  [-2]: `BAIL`\n};\nvar slotFlagsText = {\n  [1]: \"STABLE\",\n  [2]: \"DYNAMIC\",\n  [3]: \"FORWARDED\"\n};\nvar specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;\nvar isBooleanAttr2 = /* @__PURE__ */ makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`);\nvar EMPTY_OBJ =  true ? Object.freeze({}) : 0;\nvar EMPTY_ARR =  true ? Object.freeze([]) : 0;\nvar extend = Object.assign;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar hasOwn = (val, key) => hasOwnProperty.call(val, key);\nvar isArray = Array.isArray;\nvar isMap = (val) => toTypeString(val) === \"[object Map]\";\nvar isString = (val) => typeof val === \"string\";\nvar isSymbol = (val) => typeof val === \"symbol\";\nvar isObject = (val) => val !== null && typeof val === \"object\";\nvar objectToString = Object.prototype.toString;\nvar toTypeString = (value) => objectToString.call(value);\nvar toRawType = (value) => {\n  return toTypeString(value).slice(8, -1);\n};\nvar isIntegerKey = (key) => isString(key) && key !== \"NaN\" && key[0] !== \"-\" && \"\" + parseInt(key, 10) === key;\nvar cacheStringFunction = (fn) => {\n  const cache = Object.create(null);\n  return (str) => {\n    const hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n};\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cacheStringFunction((str) => {\n  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : \"\");\n});\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, \"-$1\").toLowerCase());\nvar capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));\nvar toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize(str)}` : ``);\nvar hasChanged = (value, oldValue) => value !== oldValue && (value === value || oldValue === oldValue);\n\n// node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\nvar targetMap = new WeakMap();\nvar effectStack = [];\nvar activeEffect;\nvar ITERATE_KEY = Symbol( true ? \"iterate\" : 0);\nvar MAP_KEY_ITERATE_KEY = Symbol( true ? \"Map key iterate\" : 0);\nfunction isEffect(fn) {\n  return fn && fn._isEffect === true;\n}\nfunction effect2(fn, options = EMPTY_OBJ) {\n  if (isEffect(fn)) {\n    fn = fn.raw;\n  }\n  const effect3 = createReactiveEffect(fn, options);\n  if (!options.lazy) {\n    effect3();\n  }\n  return effect3;\n}\nfunction stop(effect3) {\n  if (effect3.active) {\n    cleanup(effect3);\n    if (effect3.options.onStop) {\n      effect3.options.onStop();\n    }\n    effect3.active = false;\n  }\n}\nvar uid = 0;\nfunction createReactiveEffect(fn, options) {\n  const effect3 = function reactiveEffect() {\n    if (!effect3.active) {\n      return fn();\n    }\n    if (!effectStack.includes(effect3)) {\n      cleanup(effect3);\n      try {\n        enableTracking();\n        effectStack.push(effect3);\n        activeEffect = effect3;\n        return fn();\n      } finally {\n        effectStack.pop();\n        resetTracking();\n        activeEffect = effectStack[effectStack.length - 1];\n      }\n    }\n  };\n  effect3.id = uid++;\n  effect3.allowRecurse = !!options.allowRecurse;\n  effect3._isEffect = true;\n  effect3.active = true;\n  effect3.raw = fn;\n  effect3.deps = [];\n  effect3.options = options;\n  return effect3;\n}\nfunction cleanup(effect3) {\n  const {deps} = effect3;\n  if (deps.length) {\n    for (let i = 0; i < deps.length; i++) {\n      deps[i].delete(effect3);\n    }\n    deps.length = 0;\n  }\n}\nvar shouldTrack = true;\nvar trackStack = [];\nfunction pauseTracking() {\n  trackStack.push(shouldTrack);\n  shouldTrack = false;\n}\nfunction enableTracking() {\n  trackStack.push(shouldTrack);\n  shouldTrack = true;\n}\nfunction resetTracking() {\n  const last = trackStack.pop();\n  shouldTrack = last === void 0 ? true : last;\n}\nfunction track(target, type, key) {\n  if (!shouldTrack || activeEffect === void 0) {\n    return;\n  }\n  let depsMap = targetMap.get(target);\n  if (!depsMap) {\n    targetMap.set(target, depsMap = new Map());\n  }\n  let dep = depsMap.get(key);\n  if (!dep) {\n    depsMap.set(key, dep = new Set());\n  }\n  if (!dep.has(activeEffect)) {\n    dep.add(activeEffect);\n    activeEffect.deps.push(dep);\n    if (activeEffect.options.onTrack) {\n      activeEffect.options.onTrack({\n        effect: activeEffect,\n        target,\n        type,\n        key\n      });\n    }\n  }\n}\nfunction trigger(target, type, key, newValue, oldValue, oldTarget) {\n  const depsMap = targetMap.get(target);\n  if (!depsMap) {\n    return;\n  }\n  const effects = new Set();\n  const add2 = (effectsToAdd) => {\n    if (effectsToAdd) {\n      effectsToAdd.forEach((effect3) => {\n        if (effect3 !== activeEffect || effect3.allowRecurse) {\n          effects.add(effect3);\n        }\n      });\n    }\n  };\n  if (type === \"clear\") {\n    depsMap.forEach(add2);\n  } else if (key === \"length\" && isArray(target)) {\n    depsMap.forEach((dep, key2) => {\n      if (key2 === \"length\" || key2 >= newValue) {\n        add2(dep);\n      }\n    });\n  } else {\n    if (key !== void 0) {\n      add2(depsMap.get(key));\n    }\n    switch (type) {\n      case \"add\":\n        if (!isArray(target)) {\n          add2(depsMap.get(ITERATE_KEY));\n          if (isMap(target)) {\n            add2(depsMap.get(MAP_KEY_ITERATE_KEY));\n          }\n        } else if (isIntegerKey(key)) {\n          add2(depsMap.get(\"length\"));\n        }\n        break;\n      case \"delete\":\n        if (!isArray(target)) {\n          add2(depsMap.get(ITERATE_KEY));\n          if (isMap(target)) {\n            add2(depsMap.get(MAP_KEY_ITERATE_KEY));\n          }\n        }\n        break;\n      case \"set\":\n        if (isMap(target)) {\n          add2(depsMap.get(ITERATE_KEY));\n        }\n        break;\n    }\n  }\n  const run = (effect3) => {\n    if (effect3.options.onTrigger) {\n      effect3.options.onTrigger({\n        effect: effect3,\n        target,\n        key,\n        type,\n        newValue,\n        oldValue,\n        oldTarget\n      });\n    }\n    if (effect3.options.scheduler) {\n      effect3.options.scheduler(effect3);\n    } else {\n      effect3();\n    }\n  };\n  effects.forEach(run);\n}\nvar isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);\nvar builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map((key) => Symbol[key]).filter(isSymbol));\nvar get2 = /* @__PURE__ */ createGetter();\nvar shallowGet = /* @__PURE__ */ createGetter(false, true);\nvar readonlyGet = /* @__PURE__ */ createGetter(true);\nvar shallowReadonlyGet = /* @__PURE__ */ createGetter(true, true);\nvar arrayInstrumentations = {};\n[\"includes\", \"indexOf\", \"lastIndexOf\"].forEach((key) => {\n  const method = Array.prototype[key];\n  arrayInstrumentations[key] = function(...args) {\n    const arr = toRaw(this);\n    for (let i = 0, l = this.length; i < l; i++) {\n      track(arr, \"get\", i + \"\");\n    }\n    const res = method.apply(arr, args);\n    if (res === -1 || res === false) {\n      return method.apply(arr, args.map(toRaw));\n    } else {\n      return res;\n    }\n  };\n});\n[\"push\", \"pop\", \"shift\", \"unshift\", \"splice\"].forEach((key) => {\n  const method = Array.prototype[key];\n  arrayInstrumentations[key] = function(...args) {\n    pauseTracking();\n    const res = method.apply(this, args);\n    resetTracking();\n    return res;\n  };\n});\nfunction createGetter(isReadonly = false, shallow = false) {\n  return function get3(target, key, receiver) {\n    if (key === \"__v_isReactive\") {\n      return !isReadonly;\n    } else if (key === \"__v_isReadonly\") {\n      return isReadonly;\n    } else if (key === \"__v_raw\" && receiver === (isReadonly ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {\n      return target;\n    }\n    const targetIsArray = isArray(target);\n    if (!isReadonly && targetIsArray && hasOwn(arrayInstrumentations, key)) {\n      return Reflect.get(arrayInstrumentations, key, receiver);\n    }\n    const res = Reflect.get(target, key, receiver);\n    if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {\n      return res;\n    }\n    if (!isReadonly) {\n      track(target, \"get\", key);\n    }\n    if (shallow) {\n      return res;\n    }\n    if (isRef(res)) {\n      const shouldUnwrap = !targetIsArray || !isIntegerKey(key);\n      return shouldUnwrap ? res.value : res;\n    }\n    if (isObject(res)) {\n      return isReadonly ? readonly(res) : reactive2(res);\n    }\n    return res;\n  };\n}\nvar set2 = /* @__PURE__ */ createSetter();\nvar shallowSet = /* @__PURE__ */ createSetter(true);\nfunction createSetter(shallow = false) {\n  return function set3(target, key, value, receiver) {\n    let oldValue = target[key];\n    if (!shallow) {\n      value = toRaw(value);\n      oldValue = toRaw(oldValue);\n      if (!isArray(target) && isRef(oldValue) && !isRef(value)) {\n        oldValue.value = value;\n        return true;\n      }\n    }\n    const hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);\n    const result = Reflect.set(target, key, value, receiver);\n    if (target === toRaw(receiver)) {\n      if (!hadKey) {\n        trigger(target, \"add\", key, value);\n      } else if (hasChanged(value, oldValue)) {\n        trigger(target, \"set\", key, value, oldValue);\n      }\n    }\n    return result;\n  };\n}\nfunction deleteProperty(target, key) {\n  const hadKey = hasOwn(target, key);\n  const oldValue = target[key];\n  const result = Reflect.deleteProperty(target, key);\n  if (result && hadKey) {\n    trigger(target, \"delete\", key, void 0, oldValue);\n  }\n  return result;\n}\nfunction has(target, key) {\n  const result = Reflect.has(target, key);\n  if (!isSymbol(key) || !builtInSymbols.has(key)) {\n    track(target, \"has\", key);\n  }\n  return result;\n}\nfunction ownKeys(target) {\n  track(target, \"iterate\", isArray(target) ? \"length\" : ITERATE_KEY);\n  return Reflect.ownKeys(target);\n}\nvar mutableHandlers = {\n  get: get2,\n  set: set2,\n  deleteProperty,\n  has,\n  ownKeys\n};\nvar readonlyHandlers = {\n  get: readonlyGet,\n  set(target, key) {\n    if (true) {\n      console.warn(`Set operation on key \"${String(key)}\" failed: target is readonly.`, target);\n    }\n    return true;\n  },\n  deleteProperty(target, key) {\n    if (true) {\n      console.warn(`Delete operation on key \"${String(key)}\" failed: target is readonly.`, target);\n    }\n    return true;\n  }\n};\nvar shallowReactiveHandlers = extend({}, mutableHandlers, {\n  get: shallowGet,\n  set: shallowSet\n});\nvar shallowReadonlyHandlers = extend({}, readonlyHandlers, {\n  get: shallowReadonlyGet\n});\nvar toReactive = (value) => isObject(value) ? reactive2(value) : value;\nvar toReadonly = (value) => isObject(value) ? readonly(value) : value;\nvar toShallow = (value) => value;\nvar getProto = (v) => Reflect.getPrototypeOf(v);\nfunction get$1(target, key, isReadonly = false, isShallow = false) {\n  target = target[\"__v_raw\"];\n  const rawTarget = toRaw(target);\n  const rawKey = toRaw(key);\n  if (key !== rawKey) {\n    !isReadonly && track(rawTarget, \"get\", key);\n  }\n  !isReadonly && track(rawTarget, \"get\", rawKey);\n  const {has: has2} = getProto(rawTarget);\n  const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\n  if (has2.call(rawTarget, key)) {\n    return wrap(target.get(key));\n  } else if (has2.call(rawTarget, rawKey)) {\n    return wrap(target.get(rawKey));\n  } else if (target !== rawTarget) {\n    target.get(key);\n  }\n}\nfunction has$1(key, isReadonly = false) {\n  const target = this[\"__v_raw\"];\n  const rawTarget = toRaw(target);\n  const rawKey = toRaw(key);\n  if (key !== rawKey) {\n    !isReadonly && track(rawTarget, \"has\", key);\n  }\n  !isReadonly && track(rawTarget, \"has\", rawKey);\n  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);\n}\nfunction size(target, isReadonly = false) {\n  target = target[\"__v_raw\"];\n  !isReadonly && track(toRaw(target), \"iterate\", ITERATE_KEY);\n  return Reflect.get(target, \"size\", target);\n}\nfunction add(value) {\n  value = toRaw(value);\n  const target = toRaw(this);\n  const proto = getProto(target);\n  const hadKey = proto.has.call(target, value);\n  if (!hadKey) {\n    target.add(value);\n    trigger(target, \"add\", value, value);\n  }\n  return this;\n}\nfunction set$1(key, value) {\n  value = toRaw(value);\n  const target = toRaw(this);\n  const {has: has2, get: get3} = getProto(target);\n  let hadKey = has2.call(target, key);\n  if (!hadKey) {\n    key = toRaw(key);\n    hadKey = has2.call(target, key);\n  } else if (true) {\n    checkIdentityKeys(target, has2, key);\n  }\n  const oldValue = get3.call(target, key);\n  target.set(key, value);\n  if (!hadKey) {\n    trigger(target, \"add\", key, value);\n  } else if (hasChanged(value, oldValue)) {\n    trigger(target, \"set\", key, value, oldValue);\n  }\n  return this;\n}\nfunction deleteEntry(key) {\n  const target = toRaw(this);\n  const {has: has2, get: get3} = getProto(target);\n  let hadKey = has2.call(target, key);\n  if (!hadKey) {\n    key = toRaw(key);\n    hadKey = has2.call(target, key);\n  } else if (true) {\n    checkIdentityKeys(target, has2, key);\n  }\n  const oldValue = get3 ? get3.call(target, key) : void 0;\n  const result = target.delete(key);\n  if (hadKey) {\n    trigger(target, \"delete\", key, void 0, oldValue);\n  }\n  return result;\n}\nfunction clear() {\n  const target = toRaw(this);\n  const hadItems = target.size !== 0;\n  const oldTarget =  true ? isMap(target) ? new Map(target) : new Set(target) : 0;\n  const result = target.clear();\n  if (hadItems) {\n    trigger(target, \"clear\", void 0, void 0, oldTarget);\n  }\n  return result;\n}\nfunction createForEach(isReadonly, isShallow) {\n  return function forEach(callback, thisArg) {\n    const observed = this;\n    const target = observed[\"__v_raw\"];\n    const rawTarget = toRaw(target);\n    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\n    !isReadonly && track(rawTarget, \"iterate\", ITERATE_KEY);\n    return target.forEach((value, key) => {\n      return callback.call(thisArg, wrap(value), wrap(key), observed);\n    });\n  };\n}\nfunction createIterableMethod(method, isReadonly, isShallow) {\n  return function(...args) {\n    const target = this[\"__v_raw\"];\n    const rawTarget = toRaw(target);\n    const targetIsMap = isMap(rawTarget);\n    const isPair = method === \"entries\" || method === Symbol.iterator && targetIsMap;\n    const isKeyOnly = method === \"keys\" && targetIsMap;\n    const innerIterator = target[method](...args);\n    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\n    !isReadonly && track(rawTarget, \"iterate\", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);\n    return {\n      next() {\n        const {value, done} = innerIterator.next();\n        return done ? {value, done} : {\n          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),\n          done\n        };\n      },\n      [Symbol.iterator]() {\n        return this;\n      }\n    };\n  };\n}\nfunction createReadonlyMethod(type) {\n  return function(...args) {\n    if (true) {\n      const key = args[0] ? `on key \"${args[0]}\" ` : ``;\n      console.warn(`${capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));\n    }\n    return type === \"delete\" ? false : this;\n  };\n}\nvar mutableInstrumentations = {\n  get(key) {\n    return get$1(this, key);\n  },\n  get size() {\n    return size(this);\n  },\n  has: has$1,\n  add,\n  set: set$1,\n  delete: deleteEntry,\n  clear,\n  forEach: createForEach(false, false)\n};\nvar shallowInstrumentations = {\n  get(key) {\n    return get$1(this, key, false, true);\n  },\n  get size() {\n    return size(this);\n  },\n  has: has$1,\n  add,\n  set: set$1,\n  delete: deleteEntry,\n  clear,\n  forEach: createForEach(false, true)\n};\nvar readonlyInstrumentations = {\n  get(key) {\n    return get$1(this, key, true);\n  },\n  get size() {\n    return size(this, true);\n  },\n  has(key) {\n    return has$1.call(this, key, true);\n  },\n  add: createReadonlyMethod(\"add\"),\n  set: createReadonlyMethod(\"set\"),\n  delete: createReadonlyMethod(\"delete\"),\n  clear: createReadonlyMethod(\"clear\"),\n  forEach: createForEach(true, false)\n};\nvar shallowReadonlyInstrumentations = {\n  get(key) {\n    return get$1(this, key, true, true);\n  },\n  get size() {\n    return size(this, true);\n  },\n  has(key) {\n    return has$1.call(this, key, true);\n  },\n  add: createReadonlyMethod(\"add\"),\n  set: createReadonlyMethod(\"set\"),\n  delete: createReadonlyMethod(\"delete\"),\n  clear: createReadonlyMethod(\"clear\"),\n  forEach: createForEach(true, true)\n};\nvar iteratorMethods = [\"keys\", \"values\", \"entries\", Symbol.iterator];\niteratorMethods.forEach((method) => {\n  mutableInstrumentations[method] = createIterableMethod(method, false, false);\n  readonlyInstrumentations[method] = createIterableMethod(method, true, false);\n  shallowInstrumentations[method] = createIterableMethod(method, false, true);\n  shallowReadonlyInstrumentations[method] = createIterableMethod(method, true, true);\n});\nfunction createInstrumentationGetter(isReadonly, shallow) {\n  const instrumentations = shallow ? isReadonly ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly ? readonlyInstrumentations : mutableInstrumentations;\n  return (target, key, receiver) => {\n    if (key === \"__v_isReactive\") {\n      return !isReadonly;\n    } else if (key === \"__v_isReadonly\") {\n      return isReadonly;\n    } else if (key === \"__v_raw\") {\n      return target;\n    }\n    return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);\n  };\n}\nvar mutableCollectionHandlers = {\n  get: createInstrumentationGetter(false, false)\n};\nvar shallowCollectionHandlers = {\n  get: createInstrumentationGetter(false, true)\n};\nvar readonlyCollectionHandlers = {\n  get: createInstrumentationGetter(true, false)\n};\nvar shallowReadonlyCollectionHandlers = {\n  get: createInstrumentationGetter(true, true)\n};\nfunction checkIdentityKeys(target, has2, key) {\n  const rawKey = toRaw(key);\n  if (rawKey !== key && has2.call(target, rawKey)) {\n    const type = toRawType(target);\n    console.warn(`Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`);\n  }\n}\nvar reactiveMap = new WeakMap();\nvar shallowReactiveMap = new WeakMap();\nvar readonlyMap = new WeakMap();\nvar shallowReadonlyMap = new WeakMap();\nfunction targetTypeMap(rawType) {\n  switch (rawType) {\n    case \"Object\":\n    case \"Array\":\n      return 1;\n    case \"Map\":\n    case \"Set\":\n    case \"WeakMap\":\n    case \"WeakSet\":\n      return 2;\n    default:\n      return 0;\n  }\n}\nfunction getTargetType(value) {\n  return value[\"__v_skip\"] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));\n}\nfunction reactive2(target) {\n  if (target && target[\"__v_isReadonly\"]) {\n    return target;\n  }\n  return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);\n}\nfunction readonly(target) {\n  return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);\n}\nfunction createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers, proxyMap) {\n  if (!isObject(target)) {\n    if (true) {\n      console.warn(`value cannot be made reactive: ${String(target)}`);\n    }\n    return target;\n  }\n  if (target[\"__v_raw\"] && !(isReadonly && target[\"__v_isReactive\"])) {\n    return target;\n  }\n  const existingProxy = proxyMap.get(target);\n  if (existingProxy) {\n    return existingProxy;\n  }\n  const targetType = getTargetType(target);\n  if (targetType === 0) {\n    return target;\n  }\n  const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);\n  proxyMap.set(target, proxy);\n  return proxy;\n}\nfunction toRaw(observed) {\n  return observed && toRaw(observed[\"__v_raw\"]) || observed;\n}\nfunction isRef(r) {\n  return Boolean(r && r.__v_isRef === true);\n}\n\n// packages/alpinejs/src/magics/$nextTick.js\nmagic(\"nextTick\", () => nextTick);\n\n// packages/alpinejs/src/magics/$dispatch.js\nmagic(\"dispatch\", (el) => dispatch.bind(dispatch, el));\n\n// packages/alpinejs/src/magics/$watch.js\nmagic(\"watch\", (el, {evaluateLater: evaluateLater2, effect: effect3}) => (key, callback) => {\n  let evaluate2 = evaluateLater2(key);\n  let firstTime = true;\n  let oldValue;\n  let effectReference = effect3(() => evaluate2((value) => {\n    JSON.stringify(value);\n    if (!firstTime) {\n      queueMicrotask(() => {\n        callback(value, oldValue);\n        oldValue = value;\n      });\n    } else {\n      oldValue = value;\n    }\n    firstTime = false;\n  }));\n  el._x_effects.delete(effectReference);\n});\n\n// packages/alpinejs/src/magics/$store.js\nmagic(\"store\", getStores);\n\n// packages/alpinejs/src/magics/$data.js\nmagic(\"data\", (el) => scope(el));\n\n// packages/alpinejs/src/magics/$root.js\nmagic(\"root\", (el) => closestRoot(el));\n\n// packages/alpinejs/src/magics/$refs.js\nmagic(\"refs\", (el) => {\n  if (el._x_refs_proxy)\n    return el._x_refs_proxy;\n  el._x_refs_proxy = mergeProxies(getArrayOfRefObject(el));\n  return el._x_refs_proxy;\n});\nfunction getArrayOfRefObject(el) {\n  let refObjects = [];\n  let currentEl = el;\n  while (currentEl) {\n    if (currentEl._x_refs)\n      refObjects.push(currentEl._x_refs);\n    currentEl = currentEl.parentNode;\n  }\n  return refObjects;\n}\n\n// packages/alpinejs/src/ids.js\nvar globalIdMemo = {};\nfunction findAndIncrementId(name) {\n  if (!globalIdMemo[name])\n    globalIdMemo[name] = 0;\n  return ++globalIdMemo[name];\n}\nfunction closestIdRoot(el, name) {\n  return findClosest(el, (element) => {\n    if (element._x_ids && element._x_ids[name])\n      return true;\n  });\n}\nfunction setIdRoot(el, name) {\n  if (!el._x_ids)\n    el._x_ids = {};\n  if (!el._x_ids[name])\n    el._x_ids[name] = findAndIncrementId(name);\n}\n\n// packages/alpinejs/src/magics/$id.js\nmagic(\"id\", (el) => (name, key = null) => {\n  let root = closestIdRoot(el, name);\n  let id = root ? root._x_ids[name] : findAndIncrementId(name);\n  return key ? `${name}-${id}-${key}` : `${name}-${id}`;\n});\n\n// packages/alpinejs/src/magics/$el.js\nmagic(\"el\", (el) => el);\n\n// packages/alpinejs/src/magics/index.js\nwarnMissingPluginMagic(\"Focus\", \"focus\", \"focus\");\nwarnMissingPluginMagic(\"Persist\", \"persist\", \"persist\");\nfunction warnMissingPluginMagic(name, magicName, slug) {\n  magic(magicName, (el) => warn(`You can't use [$${directiveName}] without first installing the \"${name}\" plugin here: https://alpinejs.dev/plugins/${slug}`, el));\n}\n\n// packages/alpinejs/src/entangle.js\nfunction entangle({get: outerGet, set: outerSet}, {get: innerGet, set: innerSet}) {\n  let firstRun = true;\n  let outerHash, innerHash, outerHashLatest, innerHashLatest;\n  let reference = effect(() => {\n    let outer, inner;\n    if (firstRun) {\n      outer = outerGet();\n      innerSet(outer);\n      inner = innerGet();\n      firstRun = false;\n    } else {\n      outer = outerGet();\n      inner = innerGet();\n      outerHashLatest = JSON.stringify(outer);\n      innerHashLatest = JSON.stringify(inner);\n      if (outerHashLatest !== outerHash) {\n        inner = innerGet();\n        innerSet(outer);\n        inner = outer;\n      } else {\n        outerSet(inner);\n        outer = inner;\n      }\n    }\n    outerHash = JSON.stringify(outer);\n    innerHash = JSON.stringify(inner);\n  });\n  return () => {\n    release(reference);\n  };\n}\n\n// packages/alpinejs/src/directives/x-modelable.js\ndirective(\"modelable\", (el, {expression}, {effect: effect3, evaluateLater: evaluateLater2, cleanup: cleanup2}) => {\n  let func = evaluateLater2(expression);\n  let innerGet = () => {\n    let result;\n    func((i) => result = i);\n    return result;\n  };\n  let evaluateInnerSet = evaluateLater2(`${expression} = __placeholder`);\n  let innerSet = (val) => evaluateInnerSet(() => {\n  }, {scope: {__placeholder: val}});\n  let initialValue = innerGet();\n  innerSet(initialValue);\n  queueMicrotask(() => {\n    if (!el._x_model)\n      return;\n    el._x_removeModelListeners[\"default\"]();\n    let outerGet = el._x_model.get;\n    let outerSet = el._x_model.set;\n    let releaseEntanglement = entangle({\n      get() {\n        return outerGet();\n      },\n      set(value) {\n        outerSet(value);\n      }\n    }, {\n      get() {\n        return innerGet();\n      },\n      set(value) {\n        innerSet(value);\n      }\n    });\n    cleanup2(releaseEntanglement);\n  });\n});\n\n// packages/alpinejs/src/directives/x-teleport.js\nvar teleportContainerDuringClone = document.createElement(\"div\");\ndirective(\"teleport\", (el, {modifiers, expression}, {cleanup: cleanup2}) => {\n  if (el.tagName.toLowerCase() !== \"template\")\n    warn(\"x-teleport can only be used on a <template> tag\", el);\n  let target = skipDuringClone(() => {\n    return document.querySelector(expression);\n  }, () => {\n    return teleportContainerDuringClone;\n  })();\n  if (!target)\n    warn(`Cannot find x-teleport element for selector: \"${expression}\"`);\n  let clone2 = el.content.cloneNode(true).firstElementChild;\n  el._x_teleport = clone2;\n  clone2._x_teleportBack = el;\n  if (el._x_forwardEvents) {\n    el._x_forwardEvents.forEach((eventName) => {\n      clone2.addEventListener(eventName, (e) => {\n        e.stopPropagation();\n        el.dispatchEvent(new e.constructor(e.type, e));\n      });\n    });\n  }\n  addScopeToNode(clone2, {}, el);\n  mutateDom(() => {\n    if (modifiers.includes(\"prepend\")) {\n      target.parentNode.insertBefore(clone2, target);\n    } else if (modifiers.includes(\"append\")) {\n      target.parentNode.insertBefore(clone2, target.nextSibling);\n    } else {\n      target.appendChild(clone2);\n    }\n    initTree(clone2);\n    clone2._x_ignore = true;\n  });\n  cleanup2(() => clone2.remove());\n});\n\n// packages/alpinejs/src/directives/x-ignore.js\nvar handler = () => {\n};\nhandler.inline = (el, {modifiers}, {cleanup: cleanup2}) => {\n  modifiers.includes(\"self\") ? el._x_ignoreSelf = true : el._x_ignore = true;\n  cleanup2(() => {\n    modifiers.includes(\"self\") ? delete el._x_ignoreSelf : delete el._x_ignore;\n  });\n};\ndirective(\"ignore\", handler);\n\n// packages/alpinejs/src/directives/x-effect.js\ndirective(\"effect\", (el, {expression}, {effect: effect3}) => effect3(evaluateLater(el, expression)));\n\n// packages/alpinejs/src/utils/on.js\nfunction on(el, event, modifiers, callback) {\n  let listenerTarget = el;\n  let handler4 = (e) => callback(e);\n  let options = {};\n  let wrapHandler = (callback2, wrapper) => (e) => wrapper(callback2, e);\n  if (modifiers.includes(\"dot\"))\n    event = dotSyntax(event);\n  if (modifiers.includes(\"camel\"))\n    event = camelCase2(event);\n  if (modifiers.includes(\"passive\"))\n    options.passive = true;\n  if (modifiers.includes(\"capture\"))\n    options.capture = true;\n  if (modifiers.includes(\"window\"))\n    listenerTarget = window;\n  if (modifiers.includes(\"document\"))\n    listenerTarget = document;\n  if (modifiers.includes(\"debounce\")) {\n    let nextModifier = modifiers[modifiers.indexOf(\"debounce\") + 1] || \"invalid-wait\";\n    let wait = isNumeric(nextModifier.split(\"ms\")[0]) ? Number(nextModifier.split(\"ms\")[0]) : 250;\n    handler4 = debounce(handler4, wait);\n  }\n  if (modifiers.includes(\"throttle\")) {\n    let nextModifier = modifiers[modifiers.indexOf(\"throttle\") + 1] || \"invalid-wait\";\n    let wait = isNumeric(nextModifier.split(\"ms\")[0]) ? Number(nextModifier.split(\"ms\")[0]) : 250;\n    handler4 = throttle(handler4, wait);\n  }\n  if (modifiers.includes(\"prevent\"))\n    handler4 = wrapHandler(handler4, (next, e) => {\n      e.preventDefault();\n      next(e);\n    });\n  if (modifiers.includes(\"stop\"))\n    handler4 = wrapHandler(handler4, (next, e) => {\n      e.stopPropagation();\n      next(e);\n    });\n  if (modifiers.includes(\"self\"))\n    handler4 = wrapHandler(handler4, (next, e) => {\n      e.target === el && next(e);\n    });\n  if (modifiers.includes(\"away\") || modifiers.includes(\"outside\")) {\n    listenerTarget = document;\n    handler4 = wrapHandler(handler4, (next, e) => {\n      if (el.contains(e.target))\n        return;\n      if (e.target.isConnected === false)\n        return;\n      if (el.offsetWidth < 1 && el.offsetHeight < 1)\n        return;\n      if (el._x_isShown === false)\n        return;\n      next(e);\n    });\n  }\n  if (modifiers.includes(\"once\")) {\n    handler4 = wrapHandler(handler4, (next, e) => {\n      next(e);\n      listenerTarget.removeEventListener(event, handler4, options);\n    });\n  }\n  handler4 = wrapHandler(handler4, (next, e) => {\n    if (isKeyEvent(event)) {\n      if (isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers)) {\n        return;\n      }\n    }\n    next(e);\n  });\n  listenerTarget.addEventListener(event, handler4, options);\n  return () => {\n    listenerTarget.removeEventListener(event, handler4, options);\n  };\n}\nfunction dotSyntax(subject) {\n  return subject.replace(/-/g, \".\");\n}\nfunction camelCase2(subject) {\n  return subject.toLowerCase().replace(/-(\\w)/g, (match, char) => char.toUpperCase());\n}\nfunction isNumeric(subject) {\n  return !Array.isArray(subject) && !isNaN(subject);\n}\nfunction kebabCase2(subject) {\n  if ([\" \", \"_\"].includes(subject))\n    return subject;\n  return subject.replace(/([a-z])([A-Z])/g, \"$1-$2\").replace(/[_\\s]/, \"-\").toLowerCase();\n}\nfunction isKeyEvent(event) {\n  return [\"keydown\", \"keyup\"].includes(event);\n}\nfunction isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers) {\n  let keyModifiers = modifiers.filter((i) => {\n    return ![\"window\", \"document\", \"prevent\", \"stop\", \"once\", \"capture\"].includes(i);\n  });\n  if (keyModifiers.includes(\"debounce\")) {\n    let debounceIndex = keyModifiers.indexOf(\"debounce\");\n    keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || \"invalid-wait\").split(\"ms\")[0]) ? 2 : 1);\n  }\n  if (keyModifiers.includes(\"throttle\")) {\n    let debounceIndex = keyModifiers.indexOf(\"throttle\");\n    keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || \"invalid-wait\").split(\"ms\")[0]) ? 2 : 1);\n  }\n  if (keyModifiers.length === 0)\n    return false;\n  if (keyModifiers.length === 1 && keyToModifiers(e.key).includes(keyModifiers[0]))\n    return false;\n  const systemKeyModifiers = [\"ctrl\", \"shift\", \"alt\", \"meta\", \"cmd\", \"super\"];\n  const selectedSystemKeyModifiers = systemKeyModifiers.filter((modifier) => keyModifiers.includes(modifier));\n  keyModifiers = keyModifiers.filter((i) => !selectedSystemKeyModifiers.includes(i));\n  if (selectedSystemKeyModifiers.length > 0) {\n    const activelyPressedKeyModifiers = selectedSystemKeyModifiers.filter((modifier) => {\n      if (modifier === \"cmd\" || modifier === \"super\")\n        modifier = \"meta\";\n      return e[`${modifier}Key`];\n    });\n    if (activelyPressedKeyModifiers.length === selectedSystemKeyModifiers.length) {\n      if (keyToModifiers(e.key).includes(keyModifiers[0]))\n        return false;\n    }\n  }\n  return true;\n}\nfunction keyToModifiers(key) {\n  if (!key)\n    return [];\n  key = kebabCase2(key);\n  let modifierToKeyMap = {\n    ctrl: \"control\",\n    slash: \"/\",\n    space: \" \",\n    spacebar: \" \",\n    cmd: \"meta\",\n    esc: \"escape\",\n    up: \"arrow-up\",\n    down: \"arrow-down\",\n    left: \"arrow-left\",\n    right: \"arrow-right\",\n    period: \".\",\n    equal: \"=\",\n    minus: \"-\",\n    underscore: \"_\"\n  };\n  modifierToKeyMap[key] = key;\n  return Object.keys(modifierToKeyMap).map((modifier) => {\n    if (modifierToKeyMap[modifier] === key)\n      return modifier;\n  }).filter((modifier) => modifier);\n}\n\n// packages/alpinejs/src/directives/x-model.js\ndirective(\"model\", (el, {modifiers, expression}, {effect: effect3, cleanup: cleanup2}) => {\n  let scopeTarget = el;\n  if (modifiers.includes(\"parent\")) {\n    scopeTarget = el.parentNode;\n  }\n  let evaluateGet = evaluateLater(scopeTarget, expression);\n  let evaluateSet;\n  if (typeof expression === \"string\") {\n    evaluateSet = evaluateLater(scopeTarget, `${expression} = __placeholder`);\n  } else if (typeof expression === \"function\" && typeof expression() === \"string\") {\n    evaluateSet = evaluateLater(scopeTarget, `${expression()} = __placeholder`);\n  } else {\n    evaluateSet = () => {\n    };\n  }\n  let getValue = () => {\n    let result;\n    evaluateGet((value) => result = value);\n    return isGetterSetter(result) ? result.get() : result;\n  };\n  let setValue = (value) => {\n    let result;\n    evaluateGet((value2) => result = value2);\n    if (isGetterSetter(result)) {\n      result.set(value);\n    } else {\n      evaluateSet(() => {\n      }, {\n        scope: {__placeholder: value}\n      });\n    }\n  };\n  if (typeof expression === \"string\" && el.type === \"radio\") {\n    mutateDom(() => {\n      if (!el.hasAttribute(\"name\"))\n        el.setAttribute(\"name\", expression);\n    });\n  }\n  var event = el.tagName.toLowerCase() === \"select\" || [\"checkbox\", \"radio\"].includes(el.type) || modifiers.includes(\"lazy\") ? \"change\" : \"input\";\n  let removeListener = isCloning ? () => {\n  } : on(el, event, modifiers, (e) => {\n    setValue(getInputValue(el, modifiers, e, getValue()));\n  });\n  if (modifiers.includes(\"fill\") && [null, \"\"].includes(getValue())) {\n    el.dispatchEvent(new Event(event, {}));\n  }\n  if (!el._x_removeModelListeners)\n    el._x_removeModelListeners = {};\n  el._x_removeModelListeners[\"default\"] = removeListener;\n  cleanup2(() => el._x_removeModelListeners[\"default\"]());\n  if (el.form) {\n    let removeResetListener = on(el.form, \"reset\", [], (e) => {\n      nextTick(() => el._x_model && el._x_model.set(el.value));\n    });\n    cleanup2(() => removeResetListener());\n  }\n  el._x_model = {\n    get() {\n      return getValue();\n    },\n    set(value) {\n      setValue(value);\n    }\n  };\n  el._x_forceModelUpdate = (value) => {\n    value = value === void 0 ? getValue() : value;\n    if (value === void 0 && typeof expression === \"string\" && expression.match(/\\./))\n      value = \"\";\n    window.fromModel = true;\n    mutateDom(() => bind(el, \"value\", value));\n    delete window.fromModel;\n  };\n  effect3(() => {\n    let value = getValue();\n    if (modifiers.includes(\"unintrusive\") && document.activeElement.isSameNode(el))\n      return;\n    el._x_forceModelUpdate(value);\n  });\n});\nfunction getInputValue(el, modifiers, event, currentValue) {\n  return mutateDom(() => {\n    if (event instanceof CustomEvent && event.detail !== void 0)\n      return event.detail ?? event.target.value;\n    else if (el.type === \"checkbox\") {\n      if (Array.isArray(currentValue)) {\n        let newValue = modifiers.includes(\"number\") ? safeParseNumber(event.target.value) : event.target.value;\n        return event.target.checked ? currentValue.concat([newValue]) : currentValue.filter((el2) => !checkedAttrLooseCompare2(el2, newValue));\n      } else {\n        return event.target.checked;\n      }\n    } else if (el.tagName.toLowerCase() === \"select\" && el.multiple) {\n      return modifiers.includes(\"number\") ? Array.from(event.target.selectedOptions).map((option) => {\n        let rawValue = option.value || option.text;\n        return safeParseNumber(rawValue);\n      }) : Array.from(event.target.selectedOptions).map((option) => {\n        return option.value || option.text;\n      });\n    } else {\n      let rawValue = event.target.value;\n      return modifiers.includes(\"number\") ? safeParseNumber(rawValue) : modifiers.includes(\"trim\") ? rawValue.trim() : rawValue;\n    }\n  });\n}\nfunction safeParseNumber(rawValue) {\n  let number = rawValue ? parseFloat(rawValue) : null;\n  return isNumeric2(number) ? number : rawValue;\n}\nfunction checkedAttrLooseCompare2(valueA, valueB) {\n  return valueA == valueB;\n}\nfunction isNumeric2(subject) {\n  return !Array.isArray(subject) && !isNaN(subject);\n}\nfunction isGetterSetter(value) {\n  return value !== null && typeof value === \"object\" && typeof value.get === \"function\" && typeof value.set === \"function\";\n}\n\n// packages/alpinejs/src/directives/x-cloak.js\ndirective(\"cloak\", (el) => queueMicrotask(() => mutateDom(() => el.removeAttribute(prefix(\"cloak\")))));\n\n// packages/alpinejs/src/directives/x-init.js\naddInitSelector(() => `[${prefix(\"init\")}]`);\ndirective(\"init\", skipDuringClone((el, {expression}, {evaluate: evaluate2}) => {\n  if (typeof expression === \"string\") {\n    return !!expression.trim() && evaluate2(expression, {}, false);\n  }\n  return evaluate2(expression, {}, false);\n}));\n\n// packages/alpinejs/src/directives/x-text.js\ndirective(\"text\", (el, {expression}, {effect: effect3, evaluateLater: evaluateLater2}) => {\n  let evaluate2 = evaluateLater2(expression);\n  effect3(() => {\n    evaluate2((value) => {\n      mutateDom(() => {\n        el.textContent = value;\n      });\n    });\n  });\n});\n\n// packages/alpinejs/src/directives/x-html.js\ndirective(\"html\", (el, {expression}, {effect: effect3, evaluateLater: evaluateLater2}) => {\n  let evaluate2 = evaluateLater2(expression);\n  effect3(() => {\n    evaluate2((value) => {\n      mutateDom(() => {\n        el.innerHTML = value;\n        el._x_ignoreSelf = true;\n        initTree(el);\n        delete el._x_ignoreSelf;\n      });\n    });\n  });\n});\n\n// packages/alpinejs/src/directives/x-bind.js\nmapAttributes(startingWith(\":\", into(prefix(\"bind:\"))));\nvar handler2 = (el, {value, modifiers, expression, original}, {effect: effect3}) => {\n  if (!value) {\n    let bindingProviders = {};\n    injectBindingProviders(bindingProviders);\n    let getBindings = evaluateLater(el, expression);\n    getBindings((bindings) => {\n      applyBindingsObject(el, bindings, original);\n    }, {scope: bindingProviders});\n    return;\n  }\n  if (value === \"key\")\n    return storeKeyForXFor(el, expression);\n  if (el._x_inlineBindings && el._x_inlineBindings[value] && el._x_inlineBindings[value].extract) {\n    return;\n  }\n  let evaluate2 = evaluateLater(el, expression);\n  effect3(() => evaluate2((result) => {\n    if (result === void 0 && typeof expression === \"string\" && expression.match(/\\./)) {\n      result = \"\";\n    }\n    mutateDom(() => bind(el, value, result, modifiers));\n  }));\n};\nhandler2.inline = (el, {value, modifiers, expression}) => {\n  if (!value)\n    return;\n  if (!el._x_inlineBindings)\n    el._x_inlineBindings = {};\n  el._x_inlineBindings[value] = {expression, extract: false};\n};\ndirective(\"bind\", handler2);\nfunction storeKeyForXFor(el, expression) {\n  el._x_keyExpression = expression;\n}\n\n// packages/alpinejs/src/directives/x-data.js\naddRootSelector(() => `[${prefix(\"data\")}]`);\ndirective(\"data\", skipDuringClone((el, {expression}, {cleanup: cleanup2}) => {\n  expression = expression === \"\" ? \"{}\" : expression;\n  let magicContext = {};\n  injectMagics(magicContext, el);\n  let dataProviderContext = {};\n  injectDataProviders(dataProviderContext, magicContext);\n  let data2 = evaluate(el, expression, {scope: dataProviderContext});\n  if (data2 === void 0 || data2 === true)\n    data2 = {};\n  injectMagics(data2, el);\n  let reactiveData = reactive(data2);\n  initInterceptors(reactiveData);\n  let undo = addScopeToNode(el, reactiveData);\n  reactiveData[\"init\"] && evaluate(el, reactiveData[\"init\"]);\n  cleanup2(() => {\n    reactiveData[\"destroy\"] && evaluate(el, reactiveData[\"destroy\"]);\n    undo();\n  });\n}));\n\n// packages/alpinejs/src/directives/x-show.js\ndirective(\"show\", (el, {modifiers, expression}, {effect: effect3}) => {\n  let evaluate2 = evaluateLater(el, expression);\n  if (!el._x_doHide)\n    el._x_doHide = () => {\n      mutateDom(() => {\n        el.style.setProperty(\"display\", \"none\", modifiers.includes(\"important\") ? \"important\" : void 0);\n      });\n    };\n  if (!el._x_doShow)\n    el._x_doShow = () => {\n      mutateDom(() => {\n        if (el.style.length === 1 && el.style.display === \"none\") {\n          el.removeAttribute(\"style\");\n        } else {\n          el.style.removeProperty(\"display\");\n        }\n      });\n    };\n  let hide = () => {\n    el._x_doHide();\n    el._x_isShown = false;\n  };\n  let show = () => {\n    el._x_doShow();\n    el._x_isShown = true;\n  };\n  let clickAwayCompatibleShow = () => setTimeout(show);\n  let toggle = once((value) => value ? show() : hide(), (value) => {\n    if (typeof el._x_toggleAndCascadeWithTransitions === \"function\") {\n      el._x_toggleAndCascadeWithTransitions(el, value, show, hide);\n    } else {\n      value ? clickAwayCompatibleShow() : hide();\n    }\n  });\n  let oldValue;\n  let firstTime = true;\n  effect3(() => evaluate2((value) => {\n    if (!firstTime && value === oldValue)\n      return;\n    if (modifiers.includes(\"immediate\"))\n      value ? clickAwayCompatibleShow() : hide();\n    toggle(value);\n    oldValue = value;\n    firstTime = false;\n  }));\n});\n\n// packages/alpinejs/src/directives/x-for.js\ndirective(\"for\", (el, {expression}, {effect: effect3, cleanup: cleanup2}) => {\n  let iteratorNames = parseForExpression(expression);\n  let evaluateItems = evaluateLater(el, iteratorNames.items);\n  let evaluateKey = evaluateLater(el, el._x_keyExpression || \"index\");\n  el._x_prevKeys = [];\n  el._x_lookup = {};\n  effect3(() => loop(el, iteratorNames, evaluateItems, evaluateKey));\n  cleanup2(() => {\n    Object.values(el._x_lookup).forEach((el2) => el2.remove());\n    delete el._x_prevKeys;\n    delete el._x_lookup;\n  });\n});\nfunction loop(el, iteratorNames, evaluateItems, evaluateKey) {\n  let isObject2 = (i) => typeof i === \"object\" && !Array.isArray(i);\n  let templateEl = el;\n  evaluateItems((items) => {\n    if (isNumeric3(items) && items >= 0) {\n      items = Array.from(Array(items).keys(), (i) => i + 1);\n    }\n    if (items === void 0)\n      items = [];\n    let lookup = el._x_lookup;\n    let prevKeys = el._x_prevKeys;\n    let scopes = [];\n    let keys = [];\n    if (isObject2(items)) {\n      items = Object.entries(items).map(([key, value]) => {\n        let scope2 = getIterationScopeVariables(iteratorNames, value, key, items);\n        evaluateKey((value2) => keys.push(value2), {scope: {index: key, ...scope2}});\n        scopes.push(scope2);\n      });\n    } else {\n      for (let i = 0; i < items.length; i++) {\n        let scope2 = getIterationScopeVariables(iteratorNames, items[i], i, items);\n        evaluateKey((value) => keys.push(value), {scope: {index: i, ...scope2}});\n        scopes.push(scope2);\n      }\n    }\n    let adds = [];\n    let moves = [];\n    let removes = [];\n    let sames = [];\n    for (let i = 0; i < prevKeys.length; i++) {\n      let key = prevKeys[i];\n      if (keys.indexOf(key) === -1)\n        removes.push(key);\n    }\n    prevKeys = prevKeys.filter((key) => !removes.includes(key));\n    let lastKey = \"template\";\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i];\n      let prevIndex = prevKeys.indexOf(key);\n      if (prevIndex === -1) {\n        prevKeys.splice(i, 0, key);\n        adds.push([lastKey, i]);\n      } else if (prevIndex !== i) {\n        let keyInSpot = prevKeys.splice(i, 1)[0];\n        let keyForSpot = prevKeys.splice(prevIndex - 1, 1)[0];\n        prevKeys.splice(i, 0, keyForSpot);\n        prevKeys.splice(prevIndex, 0, keyInSpot);\n        moves.push([keyInSpot, keyForSpot]);\n      } else {\n        sames.push(key);\n      }\n      lastKey = key;\n    }\n    for (let i = 0; i < removes.length; i++) {\n      let key = removes[i];\n      if (!!lookup[key]._x_effects) {\n        lookup[key]._x_effects.forEach(dequeueJob);\n      }\n      lookup[key].remove();\n      lookup[key] = null;\n      delete lookup[key];\n    }\n    for (let i = 0; i < moves.length; i++) {\n      let [keyInSpot, keyForSpot] = moves[i];\n      let elInSpot = lookup[keyInSpot];\n      let elForSpot = lookup[keyForSpot];\n      let marker = document.createElement(\"div\");\n      mutateDom(() => {\n        if (!elForSpot)\n          warn(`x-for \":key\" is undefined or invalid`, templateEl);\n        elForSpot.after(marker);\n        elInSpot.after(elForSpot);\n        elForSpot._x_currentIfEl && elForSpot.after(elForSpot._x_currentIfEl);\n        marker.before(elInSpot);\n        elInSpot._x_currentIfEl && elInSpot.after(elInSpot._x_currentIfEl);\n        marker.remove();\n      });\n      elForSpot._x_refreshXForScope(scopes[keys.indexOf(keyForSpot)]);\n    }\n    for (let i = 0; i < adds.length; i++) {\n      let [lastKey2, index] = adds[i];\n      let lastEl = lastKey2 === \"template\" ? templateEl : lookup[lastKey2];\n      if (lastEl._x_currentIfEl)\n        lastEl = lastEl._x_currentIfEl;\n      let scope2 = scopes[index];\n      let key = keys[index];\n      let clone2 = document.importNode(templateEl.content, true).firstElementChild;\n      let reactiveScope = reactive(scope2);\n      addScopeToNode(clone2, reactiveScope, templateEl);\n      clone2._x_refreshXForScope = (newScope) => {\n        Object.entries(newScope).forEach(([key2, value]) => {\n          reactiveScope[key2] = value;\n        });\n      };\n      mutateDom(() => {\n        lastEl.after(clone2);\n        initTree(clone2);\n      });\n      if (typeof key === \"object\") {\n        warn(\"x-for key cannot be an object, it must be a string or an integer\", templateEl);\n      }\n      lookup[key] = clone2;\n    }\n    for (let i = 0; i < sames.length; i++) {\n      lookup[sames[i]]._x_refreshXForScope(scopes[keys.indexOf(sames[i])]);\n    }\n    templateEl._x_prevKeys = keys;\n  });\n}\nfunction parseForExpression(expression) {\n  let forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\n  let stripParensRE = /^\\s*\\(|\\)\\s*$/g;\n  let forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\n  let inMatch = expression.match(forAliasRE);\n  if (!inMatch)\n    return;\n  let res = {};\n  res.items = inMatch[2].trim();\n  let item = inMatch[1].replace(stripParensRE, \"\").trim();\n  let iteratorMatch = item.match(forIteratorRE);\n  if (iteratorMatch) {\n    res.item = item.replace(forIteratorRE, \"\").trim();\n    res.index = iteratorMatch[1].trim();\n    if (iteratorMatch[2]) {\n      res.collection = iteratorMatch[2].trim();\n    }\n  } else {\n    res.item = item;\n  }\n  return res;\n}\nfunction getIterationScopeVariables(iteratorNames, item, index, items) {\n  let scopeVariables = {};\n  if (/^\\[.*\\]$/.test(iteratorNames.item) && Array.isArray(item)) {\n    let names = iteratorNames.item.replace(\"[\", \"\").replace(\"]\", \"\").split(\",\").map((i) => i.trim());\n    names.forEach((name, i) => {\n      scopeVariables[name] = item[i];\n    });\n  } else if (/^\\{.*\\}$/.test(iteratorNames.item) && !Array.isArray(item) && typeof item === \"object\") {\n    let names = iteratorNames.item.replace(\"{\", \"\").replace(\"}\", \"\").split(\",\").map((i) => i.trim());\n    names.forEach((name) => {\n      scopeVariables[name] = item[name];\n    });\n  } else {\n    scopeVariables[iteratorNames.item] = item;\n  }\n  if (iteratorNames.index)\n    scopeVariables[iteratorNames.index] = index;\n  if (iteratorNames.collection)\n    scopeVariables[iteratorNames.collection] = items;\n  return scopeVariables;\n}\nfunction isNumeric3(subject) {\n  return !Array.isArray(subject) && !isNaN(subject);\n}\n\n// packages/alpinejs/src/directives/x-ref.js\nfunction handler3() {\n}\nhandler3.inline = (el, {expression}, {cleanup: cleanup2}) => {\n  let root = closestRoot(el);\n  if (!root._x_refs)\n    root._x_refs = {};\n  root._x_refs[expression] = el;\n  cleanup2(() => delete root._x_refs[expression]);\n};\ndirective(\"ref\", handler3);\n\n// packages/alpinejs/src/directives/x-if.js\ndirective(\"if\", (el, {expression}, {effect: effect3, cleanup: cleanup2}) => {\n  let evaluate2 = evaluateLater(el, expression);\n  let show = () => {\n    if (el._x_currentIfEl)\n      return el._x_currentIfEl;\n    let clone2 = el.content.cloneNode(true).firstElementChild;\n    addScopeToNode(clone2, {}, el);\n    mutateDom(() => {\n      el.after(clone2);\n      initTree(clone2);\n    });\n    el._x_currentIfEl = clone2;\n    el._x_undoIf = () => {\n      walk(clone2, (node) => {\n        if (!!node._x_effects) {\n          node._x_effects.forEach(dequeueJob);\n        }\n      });\n      clone2.remove();\n      delete el._x_currentIfEl;\n    };\n    return clone2;\n  };\n  let hide = () => {\n    if (!el._x_undoIf)\n      return;\n    el._x_undoIf();\n    delete el._x_undoIf;\n  };\n  effect3(() => evaluate2((value) => {\n    value ? show() : hide();\n  }));\n  cleanup2(() => el._x_undoIf && el._x_undoIf());\n});\n\n// packages/alpinejs/src/directives/x-id.js\ndirective(\"id\", (el, {expression}, {evaluate: evaluate2}) => {\n  let names = evaluate2(expression);\n  names.forEach((name) => setIdRoot(el, name));\n});\n\n// packages/alpinejs/src/directives/x-on.js\nmapAttributes(startingWith(\"@\", into(prefix(\"on:\"))));\ndirective(\"on\", skipDuringClone((el, {value, modifiers, expression}, {cleanup: cleanup2}) => {\n  let evaluate2 = expression ? evaluateLater(el, expression) : () => {\n  };\n  if (el.tagName.toLowerCase() === \"template\") {\n    if (!el._x_forwardEvents)\n      el._x_forwardEvents = [];\n    if (!el._x_forwardEvents.includes(value))\n      el._x_forwardEvents.push(value);\n  }\n  let removeListener = on(el, value, modifiers, (e) => {\n    evaluate2(() => {\n    }, {scope: {$event: e}, params: [e]});\n  });\n  cleanup2(() => removeListener());\n}));\n\n// packages/alpinejs/src/directives/index.js\nwarnMissingPluginDirective(\"Collapse\", \"collapse\", \"collapse\");\nwarnMissingPluginDirective(\"Intersect\", \"intersect\", \"intersect\");\nwarnMissingPluginDirective(\"Focus\", \"trap\", \"focus\");\nwarnMissingPluginDirective(\"Mask\", \"mask\", \"mask\");\nfunction warnMissingPluginDirective(name, directiveName2, slug) {\n  directive(directiveName2, (el) => warn(`You can't use [x-${directiveName2}] without first installing the \"${name}\" plugin here: https://alpinejs.dev/plugins/${slug}`, el));\n}\n\n// packages/alpinejs/src/index.js\nalpine_default.setEvaluator(normalEvaluator);\nalpine_default.setReactivityEngine({reactive: reactive2, effect: effect2, release: stop, raw: toRaw});\nvar src_default = alpine_default;\n\n// packages/alpinejs/builds/module.js\nvar module_default = src_default;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/alpinejs/dist/module.esm.js\n");

/***/ }),

/***/ "./node_modules/just-extend/index.esm.js":
/*!***********************************************!*\
  !*** ./node_modules/just-extend/index.esm.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ objectExtend)\n/* harmony export */ });\nvar objectExtend = extend;\n\n/*\n  var obj = {a: 3, b: 5};\n  extend(obj, {a: 4, c: 8}); // {a: 4, b: 5, c: 8}\n  obj; // {a: 4, b: 5, c: 8}\n\n  var obj = {a: 3, b: 5};\n  extend({}, obj, {a: 4, c: 8}); // {a: 4, b: 5, c: 8}\n  obj; // {a: 3, b: 5}\n\n  var arr = [1, 2, 3];\n  var obj = {a: 3, b: 5};\n  extend(obj, {c: arr}); // {a: 3, b: 5, c: [1, 2, 3]}\n  arr.push(4);\n  obj; // {a: 3, b: 5, c: [1, 2, 3, 4]}\n\n  var arr = [1, 2, 3];\n  var obj = {a: 3, b: 5};\n  extend(true, obj, {c: arr}); // {a: 3, b: 5, c: [1, 2, 3]}\n  arr.push(4);\n  obj; // {a: 3, b: 5, c: [1, 2, 3]}\n\n  extend({a: 4, b: 5}); // {a: 4, b: 5}\n  extend({a: 4, b: 5}, 3); {a: 4, b: 5}\n  extend({a: 4, b: 5}, true); {a: 4, b: 5}\n  extend('hello', {a: 4, b: 5}); // throws\n  extend(3, {a: 4, b: 5}); // throws\n*/\n\nfunction extend(/* [deep], obj1, obj2, [objn] */) {\n  var args = [].slice.call(arguments);\n  var deep = false;\n  if (typeof args[0] == 'boolean') {\n    deep = args.shift();\n  }\n  var result = args[0];\n  if (isUnextendable(result)) {\n    throw new Error('extendee must be an object');\n  }\n  var extenders = args.slice(1);\n  var len = extenders.length;\n  for (var i = 0; i < len; i++) {\n    var extender = extenders[i];\n    for (var key in extender) {\n      if (Object.prototype.hasOwnProperty.call(extender, key)) {\n        var value = extender[key];\n        if (deep && isCloneable(value)) {\n          var base = Array.isArray(value) ? [] : {};\n          result[key] = extend(\n            true,\n            Object.prototype.hasOwnProperty.call(result, key) && !isUnextendable(result[key])\n              ? result[key]\n              : base,\n            value\n          );\n        } else {\n          result[key] = value;\n        }\n      }\n    }\n  }\n  return result;\n}\n\nfunction isCloneable(obj) {\n  return Array.isArray(obj) || {}.toString.call(obj) == '[object Object]';\n}\n\nfunction isUnextendable(val) {\n  return !val || (typeof val != 'object' && typeof val != 'function');\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanVzdC1leHRlbmQvaW5kZXguZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFFQTtBQUNBLGFBQWE7QUFDYixlQUFlLFdBQVcsR0FBRyxJQUFJO0FBQ2pDLE9BQU8sSUFBSTs7QUFFWCxhQUFhO0FBQ2IsV0FBVyxRQUFRLFdBQVcsR0FBRyxJQUFJO0FBQ3JDLE9BQU8sSUFBSTs7QUFFWDtBQUNBLGFBQWE7QUFDYixlQUFlLE9BQU8sR0FBRyxJQUFJO0FBQzdCO0FBQ0EsT0FBTyxJQUFJOztBQUVYO0FBQ0EsYUFBYTtBQUNiLHFCQUFxQixPQUFPLEdBQUcsSUFBSTtBQUNuQztBQUNBLE9BQU8sSUFBSTs7QUFFWCxVQUFVLFdBQVcsR0FBRyxJQUFJO0FBQzVCLFVBQVUsV0FBVyxPQUFPO0FBQzVCLFVBQVUsV0FBVyxVQUFVO0FBQy9CLG1CQUFtQixXQUFXLEdBQUc7QUFDakMsYUFBYSxXQUFXLEdBQUc7QUFDM0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFNBQVM7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQ0FBaUM7QUFDakM7O0FBRUE7QUFDQTtBQUNBOztBQUVpQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qdXN0LWV4dGVuZC9pbmRleC5lc20uanM/YmQ0YyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgb2JqZWN0RXh0ZW5kID0gZXh0ZW5kO1xuXG4vKlxuICB2YXIgb2JqID0ge2E6IDMsIGI6IDV9O1xuICBleHRlbmQob2JqLCB7YTogNCwgYzogOH0pOyAvLyB7YTogNCwgYjogNSwgYzogOH1cbiAgb2JqOyAvLyB7YTogNCwgYjogNSwgYzogOH1cblxuICB2YXIgb2JqID0ge2E6IDMsIGI6IDV9O1xuICBleHRlbmQoe30sIG9iaiwge2E6IDQsIGM6IDh9KTsgLy8ge2E6IDQsIGI6IDUsIGM6IDh9XG4gIG9iajsgLy8ge2E6IDMsIGI6IDV9XG5cbiAgdmFyIGFyciA9IFsxLCAyLCAzXTtcbiAgdmFyIG9iaiA9IHthOiAzLCBiOiA1fTtcbiAgZXh0ZW5kKG9iaiwge2M6IGFycn0pOyAvLyB7YTogMywgYjogNSwgYzogWzEsIDIsIDNdfVxuICBhcnIucHVzaCg0KTtcbiAgb2JqOyAvLyB7YTogMywgYjogNSwgYzogWzEsIDIsIDMsIDRdfVxuXG4gIHZhciBhcnIgPSBbMSwgMiwgM107XG4gIHZhciBvYmogPSB7YTogMywgYjogNX07XG4gIGV4dGVuZCh0cnVlLCBvYmosIHtjOiBhcnJ9KTsgLy8ge2E6IDMsIGI6IDUsIGM6IFsxLCAyLCAzXX1cbiAgYXJyLnB1c2goNCk7XG4gIG9iajsgLy8ge2E6IDMsIGI6IDUsIGM6IFsxLCAyLCAzXX1cblxuICBleHRlbmQoe2E6IDQsIGI6IDV9KTsgLy8ge2E6IDQsIGI6IDV9XG4gIGV4dGVuZCh7YTogNCwgYjogNX0sIDMpOyB7YTogNCwgYjogNX1cbiAgZXh0ZW5kKHthOiA0LCBiOiA1fSwgdHJ1ZSk7IHthOiA0LCBiOiA1fVxuICBleHRlbmQoJ2hlbGxvJywge2E6IDQsIGI6IDV9KTsgLy8gdGhyb3dzXG4gIGV4dGVuZCgzLCB7YTogNCwgYjogNX0pOyAvLyB0aHJvd3NcbiovXG5cbmZ1bmN0aW9uIGV4dGVuZCgvKiBbZGVlcF0sIG9iajEsIG9iajIsIFtvYmpuXSAqLykge1xuICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgdmFyIGRlZXAgPSBmYWxzZTtcbiAgaWYgKHR5cGVvZiBhcmdzWzBdID09ICdib29sZWFuJykge1xuICAgIGRlZXAgPSBhcmdzLnNoaWZ0KCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IGFyZ3NbMF07XG4gIGlmIChpc1VuZXh0ZW5kYWJsZShyZXN1bHQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdleHRlbmRlZSBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG4gIHZhciBleHRlbmRlcnMgPSBhcmdzLnNsaWNlKDEpO1xuICB2YXIgbGVuID0gZXh0ZW5kZXJzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBleHRlbmRlciA9IGV4dGVuZGVyc1tpXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gZXh0ZW5kZXIpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXh0ZW5kZXIsIGtleSkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gZXh0ZW5kZXJba2V5XTtcbiAgICAgICAgaWYgKGRlZXAgJiYgaXNDbG9uZWFibGUodmFsdWUpKSB7XG4gICAgICAgICAgdmFyIGJhc2UgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IFtdIDoge307XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBleHRlbmQoXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSAmJiAhaXNVbmV4dGVuZGFibGUocmVzdWx0W2tleV0pXG4gICAgICAgICAgICAgID8gcmVzdWx0W2tleV1cbiAgICAgICAgICAgICAgOiBiYXNlLFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gaXNDbG9uZWFibGUob2JqKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KG9iaikgfHwge30udG9TdHJpbmcuY2FsbChvYmopID09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuXG5mdW5jdGlvbiBpc1VuZXh0ZW5kYWJsZSh2YWwpIHtcbiAgcmV0dXJuICF2YWwgfHwgKHR5cGVvZiB2YWwgIT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCAhPSAnZnVuY3Rpb24nKTtcbn1cblxuZXhwb3J0IHtvYmplY3RFeHRlbmQgYXMgZGVmYXVsdH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/just-extend/index.esm.js\n");

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcz9hODBiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/sass/app.scss\n");

/***/ }),

/***/ "./node_modules/dropzone/dist/dropzone.mjs":
/*!*************************************************!*\
  !*** ./node_modules/dropzone/dist/dropzone.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Dropzone: () => (/* binding */ $3ed269f2f0fb224b$export$2e2bcd8739ae039),\n/* harmony export */   \"default\": () => (/* binding */ $3ed269f2f0fb224b$export$2e2bcd8739ae039)\n/* harmony export */ });\n/* harmony import */ var just_extend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! just-extend */ \"./node_modules/just-extend/index.esm.js\");\n\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nclass $4040acfd8584338d$export$2e2bcd8739ae039 {\n    // Add an event listener for given event\n    on(event, fn) {\n        this._callbacks = this._callbacks || {\n        };\n        // Create namespace for this event\n        if (!this._callbacks[event]) this._callbacks[event] = [];\n        this._callbacks[event].push(fn);\n        return this;\n    }\n    emit(event, ...args) {\n        this._callbacks = this._callbacks || {\n        };\n        let callbacks = this._callbacks[event];\n        if (callbacks) for (let callback of callbacks)callback.apply(this, args);\n        // trigger a corresponding DOM event\n        if (this.element) this.element.dispatchEvent(this.makeEvent(\"dropzone:\" + event, {\n            args: args\n        }));\n        return this;\n    }\n    makeEvent(eventName, detail) {\n        let params = {\n            bubbles: true,\n            cancelable: true,\n            detail: detail\n        };\n        if (typeof window.CustomEvent === \"function\") return new CustomEvent(eventName, params);\n        else {\n            // IE 11 support\n            // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n            var evt = document.createEvent(\"CustomEvent\");\n            evt.initCustomEvent(eventName, params.bubbles, params.cancelable, params.detail);\n            return evt;\n        }\n    }\n    // Remove event listener for given event. If fn is not provided, all event\n    // listeners for that event will be removed. If neither is provided, all\n    // event listeners will be removed.\n    off(event, fn) {\n        if (!this._callbacks || arguments.length === 0) {\n            this._callbacks = {\n            };\n            return this;\n        }\n        // specific event\n        let callbacks = this._callbacks[event];\n        if (!callbacks) return this;\n        // remove all handlers\n        if (arguments.length === 1) {\n            delete this._callbacks[event];\n            return this;\n        }\n        // remove specific handler\n        for(let i = 0; i < callbacks.length; i++){\n            let callback = callbacks[i];\n            if (callback === fn) {\n                callbacks.splice(i, 1);\n                break;\n            }\n        }\n        return this;\n    }\n}\n\n\n\nvar $fd6031f88dce2e32$exports = {};\n$fd6031f88dce2e32$exports = \"<div class=\\\"dz-preview dz-file-preview\\\">\\n  <div class=\\\"dz-image\\\"><img data-dz-thumbnail=\\\"\\\"></div>\\n  <div class=\\\"dz-details\\\">\\n    <div class=\\\"dz-size\\\"><span data-dz-size=\\\"\\\"></span></div>\\n    <div class=\\\"dz-filename\\\"><span data-dz-name=\\\"\\\"></span></div>\\n  </div>\\n  <div class=\\\"dz-progress\\\">\\n    <span class=\\\"dz-upload\\\" data-dz-uploadprogress=\\\"\\\"></span>\\n  </div>\\n  <div class=\\\"dz-error-message\\\"><span data-dz-errormessage=\\\"\\\"></span></div>\\n  <div class=\\\"dz-success-mark\\\">\\n    <svg width=\\\"54\\\" height=\\\"54\\\" viewBox=\\\"0 0 54 54\\\" fill=\\\"white\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n      <path d=\\\"M10.2071 29.7929L14.2929 25.7071C14.6834 25.3166 15.3166 25.3166 15.7071 25.7071L21.2929 31.2929C21.6834 31.6834 22.3166 31.6834 22.7071 31.2929L38.2929 15.7071C38.6834 15.3166 39.3166 15.3166 39.7071 15.7071L43.7929 19.7929C44.1834 20.1834 44.1834 20.8166 43.7929 21.2071L22.7071 42.2929C22.3166 42.6834 21.6834 42.6834 21.2929 42.2929L10.2071 31.2071C9.81658 30.8166 9.81658 30.1834 10.2071 29.7929Z\\\"></path>\\n    </svg>\\n  </div>\\n  <div class=\\\"dz-error-mark\\\">\\n    <svg width=\\\"54\\\" height=\\\"54\\\" viewBox=\\\"0 0 54 54\\\" fill=\\\"white\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n      <path d=\\\"M26.2929 20.2929L19.2071 13.2071C18.8166 12.8166 18.1834 12.8166 17.7929 13.2071L13.2071 17.7929C12.8166 18.1834 12.8166 18.8166 13.2071 19.2071L20.2929 26.2929C20.6834 26.6834 20.6834 27.3166 20.2929 27.7071L13.2071 34.7929C12.8166 35.1834 12.8166 35.8166 13.2071 36.2071L17.7929 40.7929C18.1834 41.1834 18.8166 41.1834 19.2071 40.7929L26.2929 33.7071C26.6834 33.3166 27.3166 33.3166 27.7071 33.7071L34.7929 40.7929C35.1834 41.1834 35.8166 41.1834 36.2071 40.7929L40.7929 36.2071C41.1834 35.8166 41.1834 35.1834 40.7929 34.7929L33.7071 27.7071C33.3166 27.3166 33.3166 26.6834 33.7071 26.2929L40.7929 19.2071C41.1834 18.8166 41.1834 18.1834 40.7929 17.7929L36.2071 13.2071C35.8166 12.8166 35.1834 12.8166 34.7929 13.2071L27.7071 20.2929C27.3166 20.6834 26.6834 20.6834 26.2929 20.2929Z\\\"></path>\\n    </svg>\\n  </div>\\n</div>\\n\";\n\n\nlet $4ca367182776f80b$var$defaultOptions = {\n    /**\n   * Has to be specified on elements other than form (or when the form doesn't\n   * have an `action` attribute).\n   *\n   * You can also provide a function that will be called with `files` and\n   * `dataBlocks`  and must return the url as string.\n   */ url: null,\n    /**\n   * Can be changed to `\"put\"` if necessary. You can also provide a function\n   * that will be called with `files` and must return the method (since `v3.12.0`).\n   */ method: \"post\",\n    /**\n   * Will be set on the XHRequest.\n   */ withCredentials: false,\n    /**\n   * The timeout for the XHR requests in milliseconds (since `v4.4.0`).\n   * If set to null or 0, no timeout is going to be set.\n   */ timeout: null,\n    /**\n   * How many file uploads to process in parallel (See the\n   * Enqueuing file uploads documentation section for more info)\n   */ parallelUploads: 2,\n    /**\n   * Whether to send multiple files in one request. If\n   * this it set to true, then the fallback file input element will\n   * have the `multiple` attribute as well. This option will\n   * also trigger additional events (like `processingmultiple`). See the events\n   * documentation section for more information.\n   */ uploadMultiple: false,\n    /**\n   * Whether you want files to be uploaded in chunks to your server. This can't be\n   * used in combination with `uploadMultiple`.\n   *\n   * See [chunksUploaded](#config-chunksUploaded) for the callback to finalise an upload.\n   */ chunking: false,\n    /**\n   * If `chunking` is enabled, this defines whether **every** file should be chunked,\n   * even if the file size is below chunkSize. This means, that the additional chunk\n   * form data will be submitted and the `chunksUploaded` callback will be invoked.\n   */ forceChunking: false,\n    /**\n   * If `chunking` is `true`, then this defines the chunk size in bytes.\n   */ chunkSize: 2097152,\n    /**\n   * If `true`, the individual chunks of a file are being uploaded simultaneously.\n   */ parallelChunkUploads: false,\n    /**\n   * Whether a chunk should be retried if it fails.\n   */ retryChunks: false,\n    /**\n   * If `retryChunks` is true, how many times should it be retried.\n   */ retryChunksLimit: 3,\n    /**\n   * The maximum filesize (in MiB) that is allowed to be uploaded.\n   */ maxFilesize: 256,\n    /**\n   * The name of the file param that gets transferred.\n   * **NOTE**: If you have the option  `uploadMultiple` set to `true`, then\n   * Dropzone will append `[]` to the name.\n   */ paramName: \"file\",\n    /**\n   * Whether thumbnails for images should be generated\n   */ createImageThumbnails: true,\n    /**\n   * In MB. When the filename exceeds this limit, the thumbnail will not be generated.\n   */ maxThumbnailFilesize: 10,\n    /**\n   * If `null`, the ratio of the image will be used to calculate it.\n   */ thumbnailWidth: 120,\n    /**\n   * The same as `thumbnailWidth`. If both are null, images will not be resized.\n   */ thumbnailHeight: 120,\n    /**\n   * How the images should be scaled down in case both, `thumbnailWidth` and `thumbnailHeight` are provided.\n   * Can be either `contain` or `crop`.\n   */ thumbnailMethod: \"crop\",\n    /**\n   * If set, images will be resized to these dimensions before being **uploaded**.\n   * If only one, `resizeWidth` **or** `resizeHeight` is provided, the original aspect\n   * ratio of the file will be preserved.\n   *\n   * The `options.transformFile` function uses these options, so if the `transformFile` function\n   * is overridden, these options don't do anything.\n   */ resizeWidth: null,\n    /**\n   * See `resizeWidth`.\n   */ resizeHeight: null,\n    /**\n   * The mime type of the resized image (before it gets uploaded to the server).\n   * If `null` the original mime type will be used. To force jpeg, for example, use `image/jpeg`.\n   * See `resizeWidth` for more information.\n   */ resizeMimeType: null,\n    /**\n   * The quality of the resized images. See `resizeWidth`.\n   */ resizeQuality: 0.8,\n    /**\n   * How the images should be scaled down in case both, `resizeWidth` and `resizeHeight` are provided.\n   * Can be either `contain` or `crop`.\n   */ resizeMethod: \"contain\",\n    /**\n   * The base that is used to calculate the **displayed** filesize. You can\n   * change this to 1024 if you would rather display kibibytes, mebibytes,\n   * etc... 1024 is technically incorrect, because `1024 bytes` are `1 kibibyte`\n   * not `1 kilobyte`. You can change this to `1024` if you don't care about\n   * validity.\n   */ filesizeBase: 1000,\n    /**\n   * If not `null` defines how many files this Dropzone handles. If it exceeds,\n   * the event `maxfilesexceeded` will be called. The dropzone element gets the\n   * class `dz-max-files-reached` accordingly so you can provide visual\n   * feedback.\n   */ maxFiles: null,\n    /**\n   * An optional object to send additional headers to the server. Eg:\n   * `{ \"My-Awesome-Header\": \"header value\" }`\n   */ headers: null,\n    /**\n   * Should the default headers be set or not?\n   * Accept: application/json <- for requesting json response\n   * Cache-Control: no-cache <- Request shouldnt be cached\n   * X-Requested-With: XMLHttpRequest <- We sent the request via XMLHttpRequest\n   */ defaultHeaders: true,\n    /**\n   * If `true`, the dropzone element itself will be clickable, if `false`\n   * nothing will be clickable.\n   *\n   * You can also pass an HTML element, a CSS selector (for multiple elements)\n   * or an array of those. In that case, all of those elements will trigger an\n   * upload when clicked.\n   */ clickable: true,\n    /**\n   * Whether hidden files in directories should be ignored.\n   */ ignoreHiddenFiles: true,\n    /**\n   * The default implementation of `accept` checks the file's mime type or\n   * extension against this list. This is a comma separated list of mime\n   * types or file extensions.\n   *\n   * Eg.: `image/*,application/pdf,.psd`\n   *\n   * If the Dropzone is `clickable` this option will also be used as\n   * [`accept`](https://developer.mozilla.org/en-US/docs/HTML/Element/input#attr-accept)\n   * parameter on the hidden file input as well.\n   */ acceptedFiles: null,\n    /**\n   * **Deprecated!**\n   * Use acceptedFiles instead.\n   */ acceptedMimeTypes: null,\n    /**\n   * If false, files will be added to the queue but the queue will not be\n   * processed automatically.\n   * This can be useful if you need some additional user input before sending\n   * files (or if you want want all files sent at once).\n   * If you're ready to send the file simply call `myDropzone.processQueue()`.\n   *\n   * See the [enqueuing file uploads](#enqueuing-file-uploads) documentation\n   * section for more information.\n   */ autoProcessQueue: true,\n    /**\n   * If false, files added to the dropzone will not be queued by default.\n   * You'll have to call `enqueueFile(file)` manually.\n   */ autoQueue: true,\n    /**\n   * If `true`, this will add a link to every file preview to remove or cancel (if\n   * already uploading) the file. The `dictCancelUpload`, `dictCancelUploadConfirmation`\n   * and `dictRemoveFile` options are used for the wording.\n   */ addRemoveLinks: false,\n    /**\n   * Defines where to display the file previews â if `null` the\n   * Dropzone element itself is used. Can be a plain `HTMLElement` or a CSS\n   * selector. The element should have the `dropzone-previews` class so\n   * the previews are displayed properly.\n   */ previewsContainer: null,\n    /**\n   * Set this to `true` if you don't want previews to be shown.\n   */ disablePreviews: false,\n    /**\n   * This is the element the hidden input field (which is used when clicking on the\n   * dropzone to trigger file selection) will be appended to. This might\n   * be important in case you use frameworks to switch the content of your page.\n   *\n   * Can be a selector string, or an element directly.\n   */ hiddenInputContainer: \"body\",\n    /**\n   * If null, no capture type will be specified\n   * If camera, mobile devices will skip the file selection and choose camera\n   * If microphone, mobile devices will skip the file selection and choose the microphone\n   * If camcorder, mobile devices will skip the file selection and choose the camera in video mode\n   * On apple devices multiple must be set to false.  AcceptedFiles may need to\n   * be set to an appropriate mime type (e.g. \"image/*\", \"audio/*\", or \"video/*\").\n   */ capture: null,\n    /**\n   * **Deprecated**. Use `renameFile` instead.\n   */ renameFilename: null,\n    /**\n   * A function that is invoked before the file is uploaded to the server and renames the file.\n   * This function gets the `File` as argument and can use the `file.name`. The actual name of the\n   * file that gets used during the upload can be accessed through `file.upload.filename`.\n   */ renameFile: null,\n    /**\n   * If `true` the fallback will be forced. This is very useful to test your server\n   * implementations first and make sure that everything works as\n   * expected without dropzone if you experience problems, and to test\n   * how your fallbacks will look.\n   */ forceFallback: false,\n    /**\n   * The text used before any files are dropped.\n   */ dictDefaultMessage: \"Drop files here to upload\",\n    /**\n   * The text that replaces the default message text it the browser is not supported.\n   */ dictFallbackMessage: \"Your browser does not support drag'n'drop file uploads.\",\n    /**\n   * The text that will be added before the fallback form.\n   * If you provide a  fallback element yourself, or if this option is `null` this will\n   * be ignored.\n   */ dictFallbackText: \"Please use the fallback form below to upload your files like in the olden days.\",\n    /**\n   * If the filesize is too big.\n   * `{{filesize}}` and `{{maxFilesize}}` will be replaced with the respective configuration values.\n   */ dictFileTooBig: \"File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.\",\n    /**\n   * If the file doesn't match the file type.\n   */ dictInvalidFileType: \"You can't upload files of this type.\",\n    /**\n   * If the server response was invalid.\n   * `{{statusCode}}` will be replaced with the servers status code.\n   */ dictResponseError: \"Server responded with {{statusCode}} code.\",\n    /**\n   * If `addRemoveLinks` is true, the text to be used for the cancel upload link.\n   */ dictCancelUpload: \"Cancel upload\",\n    /**\n   * The text that is displayed if an upload was manually canceled\n   */ dictUploadCanceled: \"Upload canceled.\",\n    /**\n   * If `addRemoveLinks` is true, the text to be used for confirmation when cancelling upload.\n   */ dictCancelUploadConfirmation: \"Are you sure you want to cancel this upload?\",\n    /**\n   * If `addRemoveLinks` is true, the text to be used to remove a file.\n   */ dictRemoveFile: \"Remove file\",\n    /**\n   * If this is not null, then the user will be prompted before removing a file.\n   */ dictRemoveFileConfirmation: null,\n    /**\n   * Displayed if `maxFiles` is st and exceeded.\n   * The string `{{maxFiles}}` will be replaced by the configuration value.\n   */ dictMaxFilesExceeded: \"You can not upload any more files.\",\n    /**\n   * Allows you to translate the different units. Starting with `tb` for terabytes and going down to\n   * `b` for bytes.\n   */ dictFileSizeUnits: {\n        tb: \"TB\",\n        gb: \"GB\",\n        mb: \"MB\",\n        kb: \"KB\",\n        b: \"b\"\n    },\n    /**\n   * Called when dropzone initialized\n   * You can add event listeners here\n   */ init () {\n    },\n    /**\n   * Can be an **object** of additional parameters to transfer to the server, **or** a `Function`\n   * that gets invoked with the `files`, `xhr` and, if it's a chunked upload, `chunk` arguments. In case\n   * of a function, this needs to return a map.\n   *\n   * The default implementation does nothing for normal uploads, but adds relevant information for\n   * chunked uploads.\n   *\n   * This is the same as adding hidden input fields in the form element.\n   */ params (files, xhr, chunk) {\n        if (chunk) return {\n            dzuuid: chunk.file.upload.uuid,\n            dzchunkindex: chunk.index,\n            dztotalfilesize: chunk.file.size,\n            dzchunksize: this.options.chunkSize,\n            dztotalchunkcount: chunk.file.upload.totalChunkCount,\n            dzchunkbyteoffset: chunk.index * this.options.chunkSize\n        };\n    },\n    /**\n   * A function that gets a [file](https://developer.mozilla.org/en-US/docs/DOM/File)\n   * and a `done` function as parameters.\n   *\n   * If the done function is invoked without arguments, the file is \"accepted\" and will\n   * be processed. If you pass an error message, the file is rejected, and the error\n   * message will be displayed.\n   * This function will not be called if the file is too big or doesn't match the mime types.\n   */ accept (file, done) {\n        return done();\n    },\n    /**\n   * The callback that will be invoked when all chunks have been uploaded for a file.\n   * It gets the file for which the chunks have been uploaded as the first parameter,\n   * and the `done` function as second. `done()` needs to be invoked when everything\n   * needed to finish the upload process is done.\n   */ chunksUploaded: function(file, done) {\n        done();\n    },\n    /**\n   * Sends the file as binary blob in body instead of form data.\n   * If this is set, the `params` option will be ignored.\n   * It's an error to set this to `true` along with `uploadMultiple` since\n   * multiple files cannot be in a single binary body.\n   */ binaryBody: false,\n    /**\n   * Gets called when the browser is not supported.\n   * The default implementation shows the fallback input field and adds\n   * a text.\n   */ fallback () {\n        // This code should pass in IE7... :(\n        let messageElement;\n        this.element.className = `${this.element.className} dz-browser-not-supported`;\n        for (let child of this.element.getElementsByTagName(\"div\"))if (/(^| )dz-message($| )/.test(child.className)) {\n            messageElement = child;\n            child.className = \"dz-message\"; // Removes the 'dz-default' class\n            break;\n        }\n        if (!messageElement) {\n            messageElement = $3ed269f2f0fb224b$export$2e2bcd8739ae039.createElement('<div class=\"dz-message\"><span></span></div>');\n            this.element.appendChild(messageElement);\n        }\n        let span = messageElement.getElementsByTagName(\"span\")[0];\n        if (span) {\n            if (span.textContent != null) span.textContent = this.options.dictFallbackMessage;\n            else if (span.innerText != null) span.innerText = this.options.dictFallbackMessage;\n        }\n        return this.element.appendChild(this.getFallbackForm());\n    },\n    /**\n   * Gets called to calculate the thumbnail dimensions.\n   *\n   * It gets `file`, `width` and `height` (both may be `null`) as parameters and must return an object containing:\n   *\n   *  - `srcWidth` & `srcHeight` (required)\n   *  - `trgWidth` & `trgHeight` (required)\n   *  - `srcX` & `srcY` (optional, default `0`)\n   *  - `trgX` & `trgY` (optional, default `0`)\n   *\n   * Those values are going to be used by `ctx.drawImage()`.\n   */ resize (file, width, height, resizeMethod) {\n        let info = {\n            srcX: 0,\n            srcY: 0,\n            srcWidth: file.width,\n            srcHeight: file.height\n        };\n        let srcRatio = file.width / file.height;\n        // Automatically calculate dimensions if not specified\n        if (width == null && height == null) {\n            width = info.srcWidth;\n            height = info.srcHeight;\n        } else if (width == null) width = height * srcRatio;\n        else if (height == null) height = width / srcRatio;\n        // Make sure images aren't upscaled\n        width = Math.min(width, info.srcWidth);\n        height = Math.min(height, info.srcHeight);\n        let trgRatio = width / height;\n        if (info.srcWidth > width || info.srcHeight > height) {\n            // Image is bigger and needs rescaling\n            if (resizeMethod === \"crop\") {\n                if (srcRatio > trgRatio) {\n                    info.srcHeight = file.height;\n                    info.srcWidth = info.srcHeight * trgRatio;\n                } else {\n                    info.srcWidth = file.width;\n                    info.srcHeight = info.srcWidth / trgRatio;\n                }\n            } else if (resizeMethod === \"contain\") {\n                // Method 'contain'\n                if (srcRatio > trgRatio) height = width / srcRatio;\n                else width = height * srcRatio;\n            } else throw new Error(`Unknown resizeMethod '${resizeMethod}'`);\n        }\n        info.srcX = (file.width - info.srcWidth) / 2;\n        info.srcY = (file.height - info.srcHeight) / 2;\n        info.trgWidth = width;\n        info.trgHeight = height;\n        return info;\n    },\n    /**\n   * Can be used to transform the file (for example, resize an image if necessary).\n   *\n   * The default implementation uses `resizeWidth` and `resizeHeight` (if provided) and resizes\n   * images according to those dimensions.\n   *\n   * Gets the `file` as the first parameter, and a `done()` function as the second, that needs\n   * to be invoked with the file when the transformation is done.\n   */ transformFile (file, done) {\n        if ((this.options.resizeWidth || this.options.resizeHeight) && file.type.match(/image.*/)) return this.resizeImage(file, this.options.resizeWidth, this.options.resizeHeight, this.options.resizeMethod, done);\n        else return done(file);\n    },\n    /**\n   * A string that contains the template used for each dropped\n   * file. Change it to fulfill your needs but make sure to properly\n   * provide all elements.\n   *\n   * If you want to use an actual HTML element instead of providing a String\n   * as a config option, you could create a div with the id `tpl`,\n   * put the template inside it and provide the element like this:\n   *\n   *     document\n   *       .querySelector('#tpl')\n   *       .innerHTML\n   *\n   */ previewTemplate: (/*@__PURE__*/$parcel$interopDefault($fd6031f88dce2e32$exports)),\n    /*\n   Those functions register themselves to the events on init and handle all\n   the user interface specific stuff. Overwriting them won't break the upload\n   but can break the way it's displayed.\n   You can overwrite them if you don't like the default behavior. If you just\n   want to add an additional event handler, register it on the dropzone object\n   and don't overwrite those options.\n   */ // Those are self explanatory and simply concern the DragnDrop.\n    drop (e) {\n        return this.element.classList.remove(\"dz-drag-hover\");\n    },\n    dragstart (e) {\n    },\n    dragend (e) {\n        return this.element.classList.remove(\"dz-drag-hover\");\n    },\n    dragenter (e) {\n        return this.element.classList.add(\"dz-drag-hover\");\n    },\n    dragover (e) {\n        return this.element.classList.add(\"dz-drag-hover\");\n    },\n    dragleave (e) {\n        return this.element.classList.remove(\"dz-drag-hover\");\n    },\n    paste (e) {\n    },\n    // Called whenever there are no files left in the dropzone anymore, and the\n    // dropzone should be displayed as if in the initial state.\n    reset () {\n        return this.element.classList.remove(\"dz-started\");\n    },\n    // Called when a file is added to the queue\n    // Receives `file`\n    addedfile (file) {\n        if (this.element === this.previewsContainer) this.element.classList.add(\"dz-started\");\n        if (this.previewsContainer && !this.options.disablePreviews) {\n            file.previewElement = $3ed269f2f0fb224b$export$2e2bcd8739ae039.createElement(this.options.previewTemplate.trim());\n            file.previewTemplate = file.previewElement; // Backwards compatibility\n            this.previewsContainer.appendChild(file.previewElement);\n            for (var node of file.previewElement.querySelectorAll(\"[data-dz-name]\"))node.textContent = file.name;\n            for (node of file.previewElement.querySelectorAll(\"[data-dz-size]\"))node.innerHTML = this.filesize(file.size);\n            if (this.options.addRemoveLinks) {\n                file._removeLink = $3ed269f2f0fb224b$export$2e2bcd8739ae039.createElement(`<a class=\"dz-remove\" href=\"javascript:undefined;\" data-dz-remove>${this.options.dictRemoveFile}</a>`);\n                file.previewElement.appendChild(file._removeLink);\n            }\n            let removeFileEvent = (e)=>{\n                e.preventDefault();\n                e.stopPropagation();\n                if (file.status === $3ed269f2f0fb224b$export$2e2bcd8739ae039.UPLOADING) return $3ed269f2f0fb224b$export$2e2bcd8739ae039.confirm(this.options.dictCancelUploadConfirmation, ()=>this.removeFile(file)\n                );\n                else {\n                    if (this.options.dictRemoveFileConfirmation) return $3ed269f2f0fb224b$export$2e2bcd8739ae039.confirm(this.options.dictRemoveFileConfirmation, ()=>this.removeFile(file)\n                    );\n                    else return this.removeFile(file);\n                }\n            };\n            for (let removeLink of file.previewElement.querySelectorAll(\"[data-dz-remove]\"))removeLink.addEventListener(\"click\", removeFileEvent);\n        }\n    },\n    // Called whenever a file is removed.\n    removedfile (file) {\n        if (file.previewElement != null && file.previewElement.parentNode != null) file.previewElement.parentNode.removeChild(file.previewElement);\n        return this._updateMaxFilesReachedClass();\n    },\n    // Called when a thumbnail has been generated\n    // Receives `file` and `dataUrl`\n    thumbnail (file, dataUrl) {\n        if (file.previewElement) {\n            file.previewElement.classList.remove(\"dz-file-preview\");\n            for (let thumbnailElement of file.previewElement.querySelectorAll(\"[data-dz-thumbnail]\")){\n                thumbnailElement.alt = file.name;\n                thumbnailElement.src = dataUrl;\n            }\n            return setTimeout(()=>file.previewElement.classList.add(\"dz-image-preview\")\n            , 1);\n        }\n    },\n    // Called whenever an error occurs\n    // Receives `file` and `message`\n    error (file, message) {\n        if (file.previewElement) {\n            file.previewElement.classList.add(\"dz-error\");\n            if (typeof message !== \"string\" && message.error) message = message.error;\n            for (let node of file.previewElement.querySelectorAll(\"[data-dz-errormessage]\"))node.textContent = message;\n        }\n    },\n    errormultiple () {\n    },\n    // Called when a file gets processed. Since there is a cue, not all added\n    // files are processed immediately.\n    // Receives `file`\n    processing (file) {\n        if (file.previewElement) {\n            file.previewElement.classList.add(\"dz-processing\");\n            if (file._removeLink) return file._removeLink.innerHTML = this.options.dictCancelUpload;\n        }\n    },\n    processingmultiple () {\n    },\n    // Called whenever the upload progress gets updated.\n    // Receives `file`, `progress` (percentage 0-100) and `bytesSent`.\n    // To get the total number of bytes of the file, use `file.size`\n    uploadprogress (file, progress, bytesSent) {\n        if (file.previewElement) for (let node of file.previewElement.querySelectorAll(\"[data-dz-uploadprogress]\"))node.nodeName === \"PROGRESS\" ? node.value = progress : node.style.width = `${progress}%`;\n    },\n    // Called whenever the total upload progress gets updated.\n    // Called with totalUploadProgress (0-100), totalBytes and totalBytesSent\n    totaluploadprogress () {\n    },\n    // Called just before the file is sent. Gets the `xhr` object as second\n    // parameter, so you can modify it (for example to add a CSRF token) and a\n    // `formData` object to add additional information.\n    sending () {\n    },\n    sendingmultiple () {\n    },\n    // When the complete upload is finished and successful\n    // Receives `file`\n    success (file) {\n        if (file.previewElement) return file.previewElement.classList.add(\"dz-success\");\n    },\n    successmultiple () {\n    },\n    // When the upload is canceled.\n    canceled (file) {\n        return this.emit(\"error\", file, this.options.dictUploadCanceled);\n    },\n    canceledmultiple () {\n    },\n    // When the upload is finished, either with success or an error.\n    // Receives `file`\n    complete (file) {\n        if (file._removeLink) file._removeLink.innerHTML = this.options.dictRemoveFile;\n        if (file.previewElement) return file.previewElement.classList.add(\"dz-complete\");\n    },\n    completemultiple () {\n    },\n    maxfilesexceeded () {\n    },\n    maxfilesreached () {\n    },\n    queuecomplete () {\n    },\n    addedfiles () {\n    }\n};\nvar $4ca367182776f80b$export$2e2bcd8739ae039 = $4ca367182776f80b$var$defaultOptions;\n\n\nclass $3ed269f2f0fb224b$export$2e2bcd8739ae039 extends $4040acfd8584338d$export$2e2bcd8739ae039 {\n    static initClass() {\n        // Exposing the emitter class, mainly for tests\n        this.prototype.Emitter = $4040acfd8584338d$export$2e2bcd8739ae039;\n        /*\n     This is a list of all available events you can register on a dropzone object.\n\n     You can register an event handler like this:\n\n     dropzone.on(\"dragEnter\", function() { });\n\n     */ this.prototype.events = [\n            \"drop\",\n            \"dragstart\",\n            \"dragend\",\n            \"dragenter\",\n            \"dragover\",\n            \"dragleave\",\n            \"addedfile\",\n            \"addedfiles\",\n            \"removedfile\",\n            \"thumbnail\",\n            \"error\",\n            \"errormultiple\",\n            \"processing\",\n            \"processingmultiple\",\n            \"uploadprogress\",\n            \"totaluploadprogress\",\n            \"sending\",\n            \"sendingmultiple\",\n            \"success\",\n            \"successmultiple\",\n            \"canceled\",\n            \"canceledmultiple\",\n            \"complete\",\n            \"completemultiple\",\n            \"reset\",\n            \"maxfilesexceeded\",\n            \"maxfilesreached\",\n            \"queuecomplete\", \n        ];\n        this.prototype._thumbnailQueue = [];\n        this.prototype._processingThumbnail = false;\n    }\n    // Returns all files that have been accepted\n    getAcceptedFiles() {\n        return this.files.filter((file)=>file.accepted\n        ).map((file)=>file\n        );\n    }\n    // Returns all files that have been rejected\n    // Not sure when that's going to be useful, but added for completeness.\n    getRejectedFiles() {\n        return this.files.filter((file)=>!file.accepted\n        ).map((file)=>file\n        );\n    }\n    getFilesWithStatus(status) {\n        return this.files.filter((file)=>file.status === status\n        ).map((file)=>file\n        );\n    }\n    // Returns all files that are in the queue\n    getQueuedFiles() {\n        return this.getFilesWithStatus($3ed269f2f0fb224b$export$2e2bcd8739ae039.QUEUED);\n    }\n    getUploadingFiles() {\n        return this.getFilesWithStatus($3ed269f2f0fb224b$export$2e2bcd8739ae039.UPLOADING);\n    }\n    getAddedFiles() {\n        return this.getFilesWithStatus($3ed269f2f0fb224b$export$2e2bcd8739ae039.ADDED);\n    }\n    // Files that are either queued or uploading\n    getActiveFiles() {\n        return this.files.filter((file)=>file.status === $3ed269f2f0fb224b$export$2e2bcd8739ae039.UPLOADING || file.status === $3ed269f2f0fb224b$export$2e2bcd8739ae039.QUEUED\n        ).map((file)=>file\n        );\n    }\n    // The function that gets called when Dropzone is initialized. You\n    // can (and should) setup event listeners inside this function.\n    init() {\n        // In case it isn't set already\n        if (this.element.tagName === \"form\") this.element.setAttribute(\"enctype\", \"multipart/form-data\");\n        if (this.element.classList.contains(\"dropzone\") && !this.element.querySelector(\".dz-message\")) this.element.appendChild($3ed269f2f0fb224b$export$2e2bcd8739ae039.createElement(`<div class=\"dz-default dz-message\"><button class=\"dz-button\" type=\"button\">${this.options.dictDefaultMessage}</button></div>`));\n        if (this.clickableElements.length) {\n            let setupHiddenFileInput = ()=>{\n                if (this.hiddenFileInput) this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);\n                this.hiddenFileInput = document.createElement(\"input\");\n                this.hiddenFileInput.setAttribute(\"type\", \"file\");\n                if (this.options.maxFiles === null || this.options.maxFiles > 1) this.hiddenFileInput.setAttribute(\"multiple\", \"multiple\");\n                this.hiddenFileInput.className = \"dz-hidden-input\";\n                if (this.options.acceptedFiles !== null) this.hiddenFileInput.setAttribute(\"accept\", this.options.acceptedFiles);\n                if (this.options.capture !== null) this.hiddenFileInput.setAttribute(\"capture\", this.options.capture);\n                // Making sure that no one can \"tab\" into this field.\n                this.hiddenFileInput.setAttribute(\"tabindex\", \"-1\");\n                // Not setting `display=\"none\"` because some browsers don't accept clicks\n                // on elements that aren't displayed.\n                this.hiddenFileInput.style.visibility = \"hidden\";\n                this.hiddenFileInput.style.position = \"absolute\";\n                this.hiddenFileInput.style.top = \"0\";\n                this.hiddenFileInput.style.left = \"0\";\n                this.hiddenFileInput.style.height = \"0\";\n                this.hiddenFileInput.style.width = \"0\";\n                $3ed269f2f0fb224b$export$2e2bcd8739ae039.getElement(this.options.hiddenInputContainer, \"hiddenInputContainer\").appendChild(this.hiddenFileInput);\n                this.hiddenFileInput.addEventListener(\"change\", ()=>{\n                    let { files: files  } = this.hiddenFileInput;\n                    if (files.length) for (let file of files)this.addFile(file);\n                    this.emit(\"addedfiles\", files);\n                    setupHiddenFileInput();\n                });\n            };\n            setupHiddenFileInput();\n        }\n        this.URL = window.URL !== null ? window.URL : window.webkitURL;\n        // Setup all event listeners on the Dropzone object itself.\n        // They're not in @setupEventListeners() because they shouldn't be removed\n        // again when the dropzone gets disabled.\n        for (let eventName of this.events)this.on(eventName, this.options[eventName]);\n        this.on(\"uploadprogress\", ()=>this.updateTotalUploadProgress()\n        );\n        this.on(\"removedfile\", ()=>this.updateTotalUploadProgress()\n        );\n        this.on(\"canceled\", (file)=>this.emit(\"complete\", file)\n        );\n        // Emit a `queuecomplete` event if all files finished uploading.\n        this.on(\"complete\", (file)=>{\n            if (this.getAddedFiles().length === 0 && this.getUploadingFiles().length === 0 && this.getQueuedFiles().length === 0) // This needs to be deferred so that `queuecomplete` really triggers after `complete`\n            return setTimeout(()=>this.emit(\"queuecomplete\")\n            , 0);\n        });\n        const containsFiles = function(e) {\n            if (e.dataTransfer.types) // Because e.dataTransfer.types is an Object in\n            // IE, we need to iterate like this instead of\n            // using e.dataTransfer.types.some()\n            for(var i = 0; i < e.dataTransfer.types.length; i++){\n                if (e.dataTransfer.types[i] === \"Files\") return true;\n            }\n            return false;\n        };\n        let noPropagation = function(e) {\n            // If there are no files, we don't want to stop\n            // propagation so we don't interfere with other\n            // drag and drop behaviour.\n            if (!containsFiles(e)) return;\n            e.stopPropagation();\n            if (e.preventDefault) return e.preventDefault();\n            else return e.returnValue = false;\n        };\n        // Create the listeners\n        this.listeners = [\n            {\n                element: this.element,\n                events: {\n                    dragstart: (e)=>{\n                        return this.emit(\"dragstart\", e);\n                    },\n                    dragenter: (e)=>{\n                        noPropagation(e);\n                        return this.emit(\"dragenter\", e);\n                    },\n                    dragover: (e)=>{\n                        // Makes it possible to drag files from chrome's download bar\n                        // http://stackoverflow.com/questions/19526430/drag-and-drop-file-uploads-from-chrome-downloads-bar\n                        // Try is required to prevent bug in Internet Explorer 11 (SCRIPT65535 exception)\n                        let efct;\n                        try {\n                            efct = e.dataTransfer.effectAllowed;\n                        } catch (error) {\n                        }\n                        e.dataTransfer.dropEffect = \"move\" === efct || \"linkMove\" === efct ? \"move\" : \"copy\";\n                        noPropagation(e);\n                        return this.emit(\"dragover\", e);\n                    },\n                    dragleave: (e)=>{\n                        return this.emit(\"dragleave\", e);\n                    },\n                    drop: (e)=>{\n                        noPropagation(e);\n                        return this.drop(e);\n                    },\n                    dragend: (e)=>{\n                        return this.emit(\"dragend\", e);\n                    }\n                }\n            }, \n        ];\n        this.clickableElements.forEach((clickableElement)=>{\n            return this.listeners.push({\n                element: clickableElement,\n                events: {\n                    click: (evt)=>{\n                        // Only the actual dropzone or the message element should trigger file selection\n                        if (clickableElement !== this.element || evt.target === this.element || $3ed269f2f0fb224b$export$2e2bcd8739ae039.elementInside(evt.target, this.element.querySelector(\".dz-message\"))) this.hiddenFileInput.click(); // Forward the click\n                        return true;\n                    }\n                }\n            });\n        });\n        this.enable();\n        return this.options.init.call(this);\n    }\n    // Not fully tested yet\n    destroy() {\n        this.disable();\n        this.removeAllFiles(true);\n        if (this.hiddenFileInput != null ? this.hiddenFileInput.parentNode : undefined) {\n            this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);\n            this.hiddenFileInput = null;\n        }\n        delete this.element.dropzone;\n        return $3ed269f2f0fb224b$export$2e2bcd8739ae039.instances.splice($3ed269f2f0fb224b$export$2e2bcd8739ae039.instances.indexOf(this), 1);\n    }\n    updateTotalUploadProgress() {\n        let totalUploadProgress;\n        let totalBytesSent = 0;\n        let totalBytes = 0;\n        let activeFiles = this.getActiveFiles();\n        if (activeFiles.length) {\n            for (let file of this.getActiveFiles()){\n                totalBytesSent += file.upload.bytesSent;\n                totalBytes += file.upload.total;\n            }\n            totalUploadProgress = 100 * totalBytesSent / totalBytes;\n        } else totalUploadProgress = 100;\n        return this.emit(\"totaluploadprogress\", totalUploadProgress, totalBytes, totalBytesSent);\n    }\n    // @options.paramName can be a function taking one parameter rather than a string.\n    // A parameter name for a file is obtained simply by calling this with an index number.\n    _getParamName(n) {\n        if (typeof this.options.paramName === \"function\") return this.options.paramName(n);\n        else return `${this.options.paramName}${this.options.uploadMultiple ? `[${n}]` : \"\"}`;\n    }\n    // If @options.renameFile is a function,\n    // the function will be used to rename the file.name before appending it to the formData\n    _renameFile(file) {\n        if (typeof this.options.renameFile !== \"function\") return file.name;\n        return this.options.renameFile(file);\n    }\n    // Returns a form that can be used as fallback if the browser does not support DragnDrop\n    //\n    // If the dropzone is already a form, only the input field and button are returned. Otherwise a complete form element is provided.\n    // This code has to pass in IE7 :(\n    getFallbackForm() {\n        let existingFallback, form;\n        if (existingFallback = this.getExistingFallback()) return existingFallback;\n        let fieldsString = '<div class=\"dz-fallback\">';\n        if (this.options.dictFallbackText) fieldsString += `<p>${this.options.dictFallbackText}</p>`;\n        fieldsString += `<input type=\"file\" name=\"${this._getParamName(0)}\" ${this.options.uploadMultiple ? 'multiple=\"multiple\"' : undefined} /><input type=\"submit\" value=\"Upload!\"></div>`;\n        let fields = $3ed269f2f0fb224b$export$2e2bcd8739ae039.createElement(fieldsString);\n        if (this.element.tagName !== \"FORM\") {\n            form = $3ed269f2f0fb224b$export$2e2bcd8739ae039.createElement(`<form action=\"${this.options.url}\" enctype=\"multipart/form-data\" method=\"${this.options.method}\"></form>`);\n            form.appendChild(fields);\n        } else {\n            // Make sure that the enctype and method attributes are set properly\n            this.element.setAttribute(\"enctype\", \"multipart/form-data\");\n            this.element.setAttribute(\"method\", this.options.method);\n        }\n        return form != null ? form : fields;\n    }\n    // Returns the fallback elements if they exist already\n    //\n    // This code has to pass in IE7 :(\n    getExistingFallback() {\n        let getFallback = function(elements) {\n            for (let el of elements){\n                if (/(^| )fallback($| )/.test(el.className)) return el;\n            }\n        };\n        for (let tagName of [\n            \"div\",\n            \"form\"\n        ]){\n            var fallback;\n            if (fallback = getFallback(this.element.getElementsByTagName(tagName))) return fallback;\n        }\n    }\n    // Activates all listeners stored in @listeners\n    setupEventListeners() {\n        return this.listeners.map((elementListeners)=>(()=>{\n                let result = [];\n                for(let event in elementListeners.events){\n                    let listener = elementListeners.events[event];\n                    result.push(elementListeners.element.addEventListener(event, listener, false));\n                }\n                return result;\n            })()\n        );\n    }\n    // Deactivates all listeners stored in @listeners\n    removeEventListeners() {\n        return this.listeners.map((elementListeners)=>(()=>{\n                let result = [];\n                for(let event in elementListeners.events){\n                    let listener = elementListeners.events[event];\n                    result.push(elementListeners.element.removeEventListener(event, listener, false));\n                }\n                return result;\n            })()\n        );\n    }\n    // Removes all event listeners and cancels all files in the queue or being processed.\n    disable() {\n        this.clickableElements.forEach((element)=>element.classList.remove(\"dz-clickable\")\n        );\n        this.removeEventListeners();\n        this.disabled = true;\n        return this.files.map((file)=>this.cancelUpload(file)\n        );\n    }\n    enable() {\n        delete this.disabled;\n        this.clickableElements.forEach((element)=>element.classList.add(\"dz-clickable\")\n        );\n        return this.setupEventListeners();\n    }\n    // Returns a nicely formatted filesize\n    filesize(size) {\n        let selectedSize = 0;\n        let selectedUnit = \"b\";\n        if (size > 0) {\n            let units = [\n                \"tb\",\n                \"gb\",\n                \"mb\",\n                \"kb\",\n                \"b\"\n            ];\n            for(let i = 0; i < units.length; i++){\n                let unit = units[i];\n                let cutoff = Math.pow(this.options.filesizeBase, 4 - i) / 10;\n                if (size >= cutoff) {\n                    selectedSize = size / Math.pow(this.options.filesizeBase, 4 - i);\n                    selectedUnit = unit;\n                    break;\n                }\n            }\n            selectedSize = Math.round(10 * selectedSize) / 10; // Cutting of digits\n        }\n        return `<strong>${selectedSize}</strong> ${this.options.dictFileSizeUnits[selectedUnit]}`;\n    }\n    // Adds or removes the `dz-max-files-reached` class from the form.\n    _updateMaxFilesReachedClass() {\n        if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) {\n            if (this.getAcceptedFiles().length === this.options.maxFiles) this.emit(\"maxfilesreached\", this.files);\n            return this.element.classList.add(\"dz-max-files-reached\");\n        } else return this.element.classList.remove(\"dz-max-files-reached\");\n    }\n    drop(e) {\n        if (!e.dataTransfer) return;\n        this.emit(\"drop\", e);\n        // Convert the FileList to an Array\n        // This is necessary for IE11\n        let files = [];\n        for(let i = 0; i < e.dataTransfer.files.length; i++)files[i] = e.dataTransfer.files[i];\n        // Even if it's a folder, files.length will contain the folders.\n        if (files.length) {\n            let { items: items  } = e.dataTransfer;\n            if (items && items.length && items[0].webkitGetAsEntry != null) // The browser supports dropping of folders, so handle items instead of files\n            this._addFilesFromItems(items);\n            else this.handleFiles(files);\n        }\n        this.emit(\"addedfiles\", files);\n    }\n    paste(e) {\n        if ($3ed269f2f0fb224b$var$__guard__(e != null ? e.clipboardData : undefined, (x)=>x.items\n        ) == null) return;\n        this.emit(\"paste\", e);\n        let { items: items  } = e.clipboardData;\n        if (items.length) return this._addFilesFromItems(items);\n    }\n    handleFiles(files) {\n        for (let file of files)this.addFile(file);\n    }\n    // When a folder is dropped (or files are pasted), items must be handled\n    // instead of files.\n    _addFilesFromItems(items) {\n        return (()=>{\n            let result = [];\n            for (let item of items){\n                var entry;\n                if (item.webkitGetAsEntry != null && (entry = item.webkitGetAsEntry())) {\n                    if (entry.isFile) result.push(this.addFile(item.getAsFile()));\n                    else if (entry.isDirectory) // Append all files from that directory to files\n                    result.push(this._addFilesFromDirectory(entry, entry.name));\n                    else result.push(undefined);\n                } else if (item.getAsFile != null) {\n                    if (item.kind == null || item.kind === \"file\") result.push(this.addFile(item.getAsFile()));\n                    else result.push(undefined);\n                } else result.push(undefined);\n            }\n            return result;\n        })();\n    }\n    // Goes through the directory, and adds each file it finds recursively\n    _addFilesFromDirectory(directory, path) {\n        let dirReader = directory.createReader();\n        let errorHandler = (error)=>$3ed269f2f0fb224b$var$__guardMethod__(console, \"log\", (o)=>o.log(error)\n            )\n        ;\n        var readEntries = ()=>{\n            return dirReader.readEntries((entries)=>{\n                if (entries.length > 0) {\n                    for (let entry of entries){\n                        if (entry.isFile) entry.file((file)=>{\n                            if (this.options.ignoreHiddenFiles && file.name.substring(0, 1) === \".\") return;\n                            file.fullPath = `${path}/${file.name}`;\n                            return this.addFile(file);\n                        });\n                        else if (entry.isDirectory) this._addFilesFromDirectory(entry, `${path}/${entry.name}`);\n                    }\n                    // Recursively call readEntries() again, since browser only handle\n                    // the first 100 entries.\n                    // See: https://developer.mozilla.org/en-US/docs/Web/API/DirectoryReader#readEntries\n                    readEntries();\n                }\n                return null;\n            }, errorHandler);\n        };\n        return readEntries();\n    }\n    // If `done()` is called without argument the file is accepted\n    // If you call it with an error message, the file is rejected\n    // (This allows for asynchronous validation)\n    //\n    // This function checks the filesize, and if the file.type passes the\n    // `acceptedFiles` check.\n    accept(file, done) {\n        if (this.options.maxFilesize && file.size > this.options.maxFilesize * 1048576) done(this.options.dictFileTooBig.replace(\"{{filesize}}\", Math.round(file.size / 1024 / 10.24) / 100).replace(\"{{maxFilesize}}\", this.options.maxFilesize));\n        else if (!$3ed269f2f0fb224b$export$2e2bcd8739ae039.isValidFile(file, this.options.acceptedFiles)) done(this.options.dictInvalidFileType);\n        else if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) {\n            done(this.options.dictMaxFilesExceeded.replace(\"{{maxFiles}}\", this.options.maxFiles));\n            this.emit(\"maxfilesexceeded\", file);\n        } else this.options.accept.call(this, file, done);\n    }\n    addFile(file) {\n        file.upload = {\n            uuid: $3ed269f2f0fb224b$export$2e2bcd8739ae039.uuidv4(),\n            progress: 0,\n            // Setting the total upload size to file.size for the beginning\n            // It's actual different than the size to be transmitted.\n            total: file.size,\n            bytesSent: 0,\n            filename: this._renameFile(file)\n        };\n        this.files.push(file);\n        file.status = $3ed269f2f0fb224b$export$2e2bcd8739ae039.ADDED;\n        this.emit(\"addedfile\", file);\n        this._enqueueThumbnail(file);\n        this.accept(file, (error)=>{\n            if (error) {\n                file.accepted = false;\n                this._errorProcessing([\n                    file\n                ], error); // Will set the file.status\n            } else {\n                file.accepted = true;\n                if (this.options.autoQueue) this.enqueueFile(file);\n                 // Will set .accepted = true\n            }\n            this._updateMaxFilesReachedClass();\n        });\n    }\n    // Wrapper for enqueueFile\n    enqueueFiles(files) {\n        for (let file of files)this.enqueueFile(file);\n        return null;\n    }\n    enqueueFile(file) {\n        if (file.status === $3ed269f2f0fb224b$export$2e2bcd8739ae039.ADDED && file.accepted === true) {\n            file.status = $3ed269f2f0fb224b$export$2e2bcd8739ae039.QUEUED;\n            if (this.options.autoProcessQueue) return setTimeout(()=>this.processQueue()\n            , 0); // Deferring the call\n        } else throw new Error(\"This file can't be queued because it has already been processed or was rejected.\");\n    }\n    _enqueueThumbnail(file) {\n        if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1048576) {\n            this._thumbnailQueue.push(file);\n            return setTimeout(()=>this._processThumbnailQueue()\n            , 0); // Deferring the call\n        }\n    }\n    _processThumbnailQueue() {\n        if (this._processingThumbnail || this._thumbnailQueue.length === 0) return;\n        this._processingThumbnail = true;\n        let file = this._thumbnailQueue.shift();\n        return this.createThumbnail(file, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, true, (dataUrl)=>{\n            this.emit(\"thumbnail\", file, dataUrl);\n            this._processingThumbnail = false;\n            return this._processThumbnailQueue();\n        });\n    }\n    // Can be called by the user to remove a file\n    removeFile(file) {\n        if (file.status === $3ed269f2f0fb224b$export$2e2bcd8739ae039.UPLOADING) this.cancelUpload(file);\n        this.files = $3ed269f2f0fb224b$var$without(this.files, file);\n        this.emit(\"removedfile\", file);\n        if (this.files.length === 0) return this.emit(\"reset\");\n    }\n    // Removes all files that aren't currently processed from the list\n    removeAllFiles(cancelIfNecessary) {\n        // Create a copy of files since removeFile() changes the @files array.\n        if (cancelIfNecessary == null) cancelIfNecessary = false;\n        for (let file of this.files.slice())if (file.status !== $3ed269f2f0fb224b$export$2e2bcd8739ae039.UPLOADING || cancelIfNecessary) this.removeFile(file);\n        return null;\n    }\n    // Resizes an image before it gets sent to the server. This function is the default behavior of\n    // `options.transformFile` if `resizeWidth` or `resizeHeight` are set. The callback is invoked with\n    // the resized blob.\n    resizeImage(file, width, height, resizeMethod, callback) {\n        return this.createThumbnail(file, width, height, resizeMethod, true, (dataUrl, canvas)=>{\n            if (canvas == null) // The image has not been resized\n            return callback(file);\n            else {\n                let { resizeMimeType: resizeMimeType  } = this.options;\n                if (resizeMimeType == null) resizeMimeType = file.type;\n                let resizedDataURL = canvas.toDataURL(resizeMimeType, this.options.resizeQuality);\n                if (resizeMimeType === \"image/jpeg\" || resizeMimeType === \"image/jpg\") // Now add the original EXIF information\n                resizedDataURL = $3ed269f2f0fb224b$var$ExifRestore.restore(file.dataURL, resizedDataURL);\n                return callback($3ed269f2f0fb224b$export$2e2bcd8739ae039.dataURItoBlob(resizedDataURL));\n            }\n        });\n    }\n    createThumbnail(file, width, height, resizeMethod, fixOrientation, callback) {\n        let fileReader = new FileReader();\n        fileReader.onload = ()=>{\n            file.dataURL = fileReader.result;\n            // Don't bother creating a thumbnail for SVG images since they're vector\n            if (file.type === \"image/svg+xml\") {\n                if (callback != null) callback(fileReader.result);\n                return;\n            }\n            this.createThumbnailFromUrl(file, width, height, resizeMethod, fixOrientation, callback);\n        };\n        fileReader.readAsDataURL(file);\n    }\n    // `mockFile` needs to have these attributes:\n    //\n    //     { name: 'name', size: 12345, imageUrl: '' }\n    //\n    // `callback` will be invoked when the image has been downloaded and displayed.\n    // `crossOrigin` will be added to the `img` tag when accessing the file.\n    displayExistingFile(mockFile, imageUrl, callback, crossOrigin, resizeThumbnail = true) {\n        this.emit(\"addedfile\", mockFile);\n        this.emit(\"complete\", mockFile);\n        if (!resizeThumbnail) {\n            this.emit(\"thumbnail\", mockFile, imageUrl);\n            if (callback) callback();\n        } else {\n            let onDone = (thumbnail)=>{\n                this.emit(\"thumbnail\", mockFile, thumbnail);\n                if (callback) callback();\n            };\n            mockFile.dataURL = imageUrl;\n            this.createThumbnailFromUrl(mockFile, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, this.options.fixOrientation, onDone, crossOrigin);\n        }\n    }\n    createThumbnailFromUrl(file, width, height, resizeMethod, fixOrientation, callback, crossOrigin) {\n        // Not using `new Image` here because of a bug in latest Chrome versions.\n        // See https://github.com/enyo/dropzone/pull/226\n        let img = document.createElement(\"img\");\n        if (crossOrigin) img.crossOrigin = crossOrigin;\n        // fixOrientation is not needed anymore with browsers handling imageOrientation\n        fixOrientation = getComputedStyle(document.body)[\"imageOrientation\"] == \"from-image\" ? false : fixOrientation;\n        img.onload = ()=>{\n            let loadExif = (callback)=>callback(1)\n            ;\n            if (typeof EXIF !== \"undefined\" && EXIF !== null && fixOrientation) loadExif = (callback)=>EXIF.getData(img, function() {\n                    return callback(EXIF.getTag(this, \"Orientation\"));\n                })\n            ;\n            return loadExif((orientation)=>{\n                file.width = img.width;\n                file.height = img.height;\n                let resizeInfo = this.options.resize.call(this, file, width, height, resizeMethod);\n                let canvas = document.createElement(\"canvas\");\n                let ctx = canvas.getContext(\"2d\");\n                canvas.width = resizeInfo.trgWidth;\n                canvas.height = resizeInfo.trgHeight;\n                if (orientation > 4) {\n                    canvas.width = resizeInfo.trgHeight;\n                    canvas.height = resizeInfo.trgWidth;\n                }\n                switch(orientation){\n                    case 2:\n                        // horizontal flip\n                        ctx.translate(canvas.width, 0);\n                        ctx.scale(-1, 1);\n                        break;\n                    case 3:\n                        // 180Â° rotate left\n                        ctx.translate(canvas.width, canvas.height);\n                        ctx.rotate(Math.PI);\n                        break;\n                    case 4:\n                        // vertical flip\n                        ctx.translate(0, canvas.height);\n                        ctx.scale(1, -1);\n                        break;\n                    case 5:\n                        // vertical flip + 90 rotate right\n                        ctx.rotate(0.5 * Math.PI);\n                        ctx.scale(1, -1);\n                        break;\n                    case 6:\n                        // 90Â° rotate right\n                        ctx.rotate(0.5 * Math.PI);\n                        ctx.translate(0, -canvas.width);\n                        break;\n                    case 7:\n                        // horizontal flip + 90 rotate right\n                        ctx.rotate(0.5 * Math.PI);\n                        ctx.translate(canvas.height, -canvas.width);\n                        ctx.scale(-1, 1);\n                        break;\n                    case 8:\n                        // 90Â° rotate left\n                        ctx.rotate(-0.5 * Math.PI);\n                        ctx.translate(-canvas.height, 0);\n                        break;\n                }\n                // This is a bugfix for iOS' scaling bug.\n                $3ed269f2f0fb224b$var$drawImageIOSFix(ctx, img, resizeInfo.srcX != null ? resizeInfo.srcX : 0, resizeInfo.srcY != null ? resizeInfo.srcY : 0, resizeInfo.srcWidth, resizeInfo.srcHeight, resizeInfo.trgX != null ? resizeInfo.trgX : 0, resizeInfo.trgY != null ? resizeInfo.trgY : 0, resizeInfo.trgWidth, resizeInfo.trgHeight);\n                let thumbnail = canvas.toDataURL(\"image/png\");\n                if (callback != null) return callback(thumbnail, canvas);\n            });\n        };\n        if (callback != null) img.onerror = callback;\n        return img.src = file.dataURL;\n    }\n    // Goes through the queue and processes files if there aren't too many already.\n    processQueue() {\n        let { parallelUploads: parallelUploads  } = this.options;\n        let processingLength = this.getUploadingFiles().length;\n        let i = processingLength;\n        // There are already at least as many files uploading than should be\n        if (processingLength >= parallelUploads) return;\n        let queuedFiles = this.getQueuedFiles();\n        if (!(queuedFiles.length > 0)) return;\n        if (this.options.uploadMultiple) // The files should be uploaded in one request\n        return this.processFiles(queuedFiles.slice(0, parallelUploads - processingLength));\n        else while(i < parallelUploads){\n            if (!queuedFiles.length) return;\n             // Nothing left to process\n            this.processFile(queuedFiles.shift());\n            i++;\n        }\n    }\n    // Wrapper for `processFiles`\n    processFile(file) {\n        return this.processFiles([\n            file\n        ]);\n    }\n    // Loads the file, then calls finishedLoading()\n    processFiles(files) {\n        for (let file of files){\n            file.processing = true; // Backwards compatibility\n            file.status = $3ed269f2f0fb224b$export$2e2bcd8739ae039.UPLOADING;\n            this.emit(\"processing\", file);\n        }\n        if (this.options.uploadMultiple) this.emit(\"processingmultiple\", files);\n        return this.uploadFiles(files);\n    }\n    _getFilesWithXhr(xhr) {\n        let files;\n        return files = this.files.filter((file)=>file.xhr === xhr\n        ).map((file)=>file\n        );\n    }\n    // Cancels the file upload and sets the status to CANCELED\n    // **if** the file is actually being uploaded.\n    // If it's still in the queue, the file is being removed from it and the status\n    // set to CANCELED.\n    cancelUpload(file) {\n        if (file.status === $3ed269f2f0fb224b$export$2e2bcd8739ae039.UPLOADING) {\n            let groupedFiles = this._getFilesWithXhr(file.xhr);\n            for (let groupedFile of groupedFiles)groupedFile.status = $3ed269f2f0fb224b$export$2e2bcd8739ae039.CANCELED;\n            if (typeof file.xhr !== \"undefined\") file.xhr.abort();\n            for (let groupedFile1 of groupedFiles)this.emit(\"canceled\", groupedFile1);\n            if (this.options.uploadMultiple) this.emit(\"canceledmultiple\", groupedFiles);\n        } else if (file.status === $3ed269f2f0fb224b$export$2e2bcd8739ae039.ADDED || file.status === $3ed269f2f0fb224b$export$2e2bcd8739ae039.QUEUED) {\n            file.status = $3ed269f2f0fb224b$export$2e2bcd8739ae039.CANCELED;\n            this.emit(\"canceled\", file);\n            if (this.options.uploadMultiple) this.emit(\"canceledmultiple\", [\n                file\n            ]);\n        }\n        if (this.options.autoProcessQueue) return this.processQueue();\n    }\n    resolveOption(option, ...args) {\n        if (typeof option === \"function\") return option.apply(this, args);\n        return option;\n    }\n    uploadFile(file) {\n        return this.uploadFiles([\n            file\n        ]);\n    }\n    uploadFiles(files) {\n        this._transformFiles(files, (transformedFiles)=>{\n            if (this.options.chunking) {\n                // Chunking is not allowed to be used with `uploadMultiple` so we know\n                // that there is only __one__file.\n                let transformedFile = transformedFiles[0];\n                files[0].upload.chunked = this.options.chunking && (this.options.forceChunking || transformedFile.size > this.options.chunkSize);\n                files[0].upload.totalChunkCount = Math.ceil(transformedFile.size / this.options.chunkSize);\n            }\n            if (files[0].upload.chunked) {\n                // This file should be sent in chunks!\n                // If the chunking option is set, we **know** that there can only be **one** file, since\n                // uploadMultiple is not allowed with this option.\n                let file = files[0];\n                let transformedFile = transformedFiles[0];\n                let startedChunkCount = 0;\n                file.upload.chunks = [];\n                let handleNextChunk = ()=>{\n                    let chunkIndex = 0;\n                    // Find the next item in file.upload.chunks that is not defined yet.\n                    while(file.upload.chunks[chunkIndex] !== undefined)chunkIndex++;\n                    // This means, that all chunks have already been started.\n                    if (chunkIndex >= file.upload.totalChunkCount) return;\n                    startedChunkCount++;\n                    let start = chunkIndex * this.options.chunkSize;\n                    let end = Math.min(start + this.options.chunkSize, transformedFile.size);\n                    let dataBlock = {\n                        name: this._getParamName(0),\n                        data: transformedFile.webkitSlice ? transformedFile.webkitSlice(start, end) : transformedFile.slice(start, end),\n                        filename: file.upload.filename,\n                        chunkIndex: chunkIndex\n                    };\n                    file.upload.chunks[chunkIndex] = {\n                        file: file,\n                        index: chunkIndex,\n                        dataBlock: dataBlock,\n                        status: $3ed269f2f0fb224b$export$2e2bcd8739ae039.UPLOADING,\n                        progress: 0,\n                        retries: 0\n                    };\n                    this._uploadData(files, [\n                        dataBlock\n                    ]);\n                };\n                file.upload.finishedChunkUpload = (chunk, response)=>{\n                    let allFinished = true;\n                    chunk.status = $3ed269f2f0fb224b$export$2e2bcd8739ae039.SUCCESS;\n                    // Clear the data from the chunk\n                    chunk.dataBlock = null;\n                    chunk.response = chunk.xhr.responseText;\n                    chunk.responseHeaders = chunk.xhr.getAllResponseHeaders();\n                    // Leaving this reference to xhr will cause memory leaks.\n                    chunk.xhr = null;\n                    for(let i = 0; i < file.upload.totalChunkCount; i++){\n                        if (file.upload.chunks[i] === undefined) return handleNextChunk();\n                        if (file.upload.chunks[i].status !== $3ed269f2f0fb224b$export$2e2bcd8739ae039.SUCCESS) allFinished = false;\n                    }\n                    if (allFinished) this.options.chunksUploaded(file, ()=>{\n                        this._finished(files, response, null);\n                    });\n                };\n                if (this.options.parallelChunkUploads) for(let i = 0; i < file.upload.totalChunkCount; i++)handleNextChunk();\n                else handleNextChunk();\n            } else {\n                let dataBlocks = [];\n                for(let i = 0; i < files.length; i++)dataBlocks[i] = {\n                    name: this._getParamName(i),\n                    data: transformedFiles[i],\n                    filename: files[i].upload.filename\n                };\n                this._uploadData(files, dataBlocks);\n            }\n        });\n    }\n    /// Returns the right chunk for given file and xhr\n    _getChunk(file, xhr) {\n        for(let i = 0; i < file.upload.totalChunkCount; i++){\n            if (file.upload.chunks[i] !== undefined && file.upload.chunks[i].xhr === xhr) return file.upload.chunks[i];\n        }\n    }\n    // This function actually uploads the file(s) to the server.\n    //\n    //  If dataBlocks contains the actual data to upload (meaning, that this could\n    // either be transformed files, or individual chunks for chunked upload) then\n    // they will be used for the actual data to upload.\n    _uploadData(files, dataBlocks) {\n        let xhr = new XMLHttpRequest();\n        // Put the xhr object in the file objects to be able to reference it later.\n        for (let file of files)file.xhr = xhr;\n        if (files[0].upload.chunked) // Put the xhr object in the right chunk object, so it can be associated\n        // later, and found with _getChunk.\n        files[0].upload.chunks[dataBlocks[0].chunkIndex].xhr = xhr;\n        let method = this.resolveOption(this.options.method, files, dataBlocks);\n        let url = this.resolveOption(this.options.url, files, dataBlocks);\n        xhr.open(method, url, true);\n        // Setting the timeout after open because of IE11 issue: https://gitlab.com/meno/dropzone/issues/8\n        let timeout = this.resolveOption(this.options.timeout, files);\n        if (timeout) xhr.timeout = this.resolveOption(this.options.timeout, files);\n        // Has to be after `.open()`. See https://github.com/enyo/dropzone/issues/179\n        xhr.withCredentials = !!this.options.withCredentials;\n        xhr.onload = (e)=>{\n            this._finishedUploading(files, xhr, e);\n        };\n        xhr.ontimeout = ()=>{\n            this._handleUploadError(files, xhr, `Request timedout after ${this.options.timeout / 1000} seconds`);\n        };\n        xhr.onerror = ()=>{\n            this._handleUploadError(files, xhr);\n        };\n        // Some browsers do not have the .upload property\n        let progressObj = xhr.upload != null ? xhr.upload : xhr;\n        progressObj.onprogress = (e)=>this._updateFilesUploadProgress(files, xhr, e)\n        ;\n        let headers = this.options.defaultHeaders ? {\n            Accept: \"application/json\",\n            \"Cache-Control\": \"no-cache\",\n            \"X-Requested-With\": \"XMLHttpRequest\"\n        } : {\n        };\n        if (this.options.binaryBody) headers[\"Content-Type\"] = files[0].type;\n        if (this.options.headers) (0,just_extend__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(headers, this.options.headers);\n        for(let headerName in headers){\n            let headerValue = headers[headerName];\n            if (headerValue) xhr.setRequestHeader(headerName, headerValue);\n        }\n        if (this.options.binaryBody) {\n            // Since the file is going to be sent as binary body, it doesn't make\n            // any sense to generate `FormData` for it.\n            for (let file of files)this.emit(\"sending\", file, xhr);\n            if (this.options.uploadMultiple) this.emit(\"sendingmultiple\", files, xhr);\n            this.submitRequest(xhr, null, files);\n        } else {\n            let formData = new FormData();\n            // Adding all @options parameters\n            if (this.options.params) {\n                let additionalParams = this.options.params;\n                if (typeof additionalParams === \"function\") additionalParams = additionalParams.call(this, files, xhr, files[0].upload.chunked ? this._getChunk(files[0], xhr) : null);\n                for(let key in additionalParams){\n                    let value = additionalParams[key];\n                    if (Array.isArray(value)) // The additional parameter contains an array,\n                    // so lets iterate over it to attach each value\n                    // individually.\n                    for(let i = 0; i < value.length; i++)formData.append(key, value[i]);\n                    else formData.append(key, value);\n                }\n            }\n            // Let the user add additional data if necessary\n            for (let file of files)this.emit(\"sending\", file, xhr, formData);\n            if (this.options.uploadMultiple) this.emit(\"sendingmultiple\", files, xhr, formData);\n            this._addFormElementData(formData);\n            // Finally add the files\n            // Has to be last because some servers (eg: S3) expect the file to be the last parameter\n            for(let i = 0; i < dataBlocks.length; i++){\n                let dataBlock = dataBlocks[i];\n                formData.append(dataBlock.name, dataBlock.data, dataBlock.filename);\n            }\n            this.submitRequest(xhr, formData, files);\n        }\n    }\n    // Transforms all files with this.options.transformFile and invokes done with the transformed files when done.\n    _transformFiles(files, done) {\n        let transformedFiles = [];\n        // Clumsy way of handling asynchronous calls, until I get to add a proper Future library.\n        let doneCounter = 0;\n        for(let i = 0; i < files.length; i++)this.options.transformFile.call(this, files[i], (transformedFile)=>{\n            transformedFiles[i] = transformedFile;\n            if (++doneCounter === files.length) done(transformedFiles);\n        });\n    }\n    // Takes care of adding other input elements of the form to the AJAX request\n    _addFormElementData(formData) {\n        // Take care of other input elements\n        if (this.element.tagName === \"FORM\") for (let input of this.element.querySelectorAll(\"input, textarea, select, button\")){\n            let inputName = input.getAttribute(\"name\");\n            let inputType = input.getAttribute(\"type\");\n            if (inputType) inputType = inputType.toLowerCase();\n            // If the input doesn't have a name, we can't use it.\n            if (typeof inputName === \"undefined\" || inputName === null) continue;\n            if (input.tagName === \"SELECT\" && input.hasAttribute(\"multiple\")) {\n                // Possibly multiple values\n                for (let option of input.options)if (option.selected) formData.append(inputName, option.value);\n            } else if (!inputType || inputType !== \"checkbox\" && inputType !== \"radio\" || input.checked) formData.append(inputName, input.value);\n        }\n    }\n    // Invoked when there is new progress information about given files.\n    // If e is not provided, it is assumed that the upload is finished.\n    _updateFilesUploadProgress(files, xhr, e) {\n        if (!files[0].upload.chunked) // Handle file uploads without chunking\n        for (let file of files){\n            if (file.upload.total && file.upload.bytesSent && file.upload.bytesSent == file.upload.total) continue;\n            if (e) {\n                file.upload.progress = 100 * e.loaded / e.total;\n                file.upload.total = e.total;\n                file.upload.bytesSent = e.loaded;\n            } else {\n                // No event, so we're at 100%\n                file.upload.progress = 100;\n                file.upload.bytesSent = file.upload.total;\n            }\n            this.emit(\"uploadprogress\", file, file.upload.progress, file.upload.bytesSent);\n        }\n        else {\n            // Handle chunked file uploads\n            // Chunked upload is not compatible with uploading multiple files in one\n            // request, so we know there's only one file.\n            let file = files[0];\n            // Since this is a chunked upload, we need to update the appropriate chunk\n            // progress.\n            let chunk = this._getChunk(file, xhr);\n            if (e) {\n                chunk.progress = 100 * e.loaded / e.total;\n                chunk.total = e.total;\n                chunk.bytesSent = e.loaded;\n            } else {\n                // No event, so we're at 100%\n                chunk.progress = 100;\n                chunk.bytesSent = chunk.total;\n            }\n            // Now tally the *file* upload progress from its individual chunks\n            file.upload.progress = 0;\n            file.upload.total = 0;\n            file.upload.bytesSent = 0;\n            for(let i = 0; i < file.upload.totalChunkCount; i++)if (file.upload.chunks[i] && typeof file.upload.chunks[i].progress !== \"undefined\") {\n                file.upload.progress += file.upload.chunks[i].progress;\n                file.upload.total += file.upload.chunks[i].total;\n                file.upload.bytesSent += file.upload.chunks[i].bytesSent;\n            }\n            // Since the process is a percentage, we need to divide by the amount of\n            // chunks we've used.\n            file.upload.progress = file.upload.progress / file.upload.totalChunkCount;\n            this.emit(\"uploadprogress\", file, file.upload.progress, file.upload.bytesSent);\n        }\n    }\n    _finishedUploading(files, xhr, e) {\n        let response;\n        if (files[0].status === $3ed269f2f0fb224b$export$2e2bcd8739ae039.CANCELED) return;\n        if (xhr.readyState !== 4) return;\n        if (xhr.responseType !== \"arraybuffer\" && xhr.responseType !== \"blob\") {\n            response = xhr.responseText;\n            if (xhr.getResponseHeader(\"content-type\") && ~xhr.getResponseHeader(\"content-type\").indexOf(\"application/json\")) try {\n                response = JSON.parse(response);\n            } catch (error) {\n                e = error;\n                response = \"Invalid JSON response from server.\";\n            }\n        }\n        this._updateFilesUploadProgress(files, xhr);\n        if (!(200 <= xhr.status && xhr.status < 300)) this._handleUploadError(files, xhr, response);\n        else if (files[0].upload.chunked) files[0].upload.finishedChunkUpload(this._getChunk(files[0], xhr), response);\n        else this._finished(files, response, e);\n    }\n    _handleUploadError(files, xhr, response) {\n        if (files[0].status === $3ed269f2f0fb224b$export$2e2bcd8739ae039.CANCELED) return;\n        if (files[0].upload.chunked && this.options.retryChunks) {\n            let chunk = this._getChunk(files[0], xhr);\n            if ((chunk.retries++) < this.options.retryChunksLimit) {\n                this._uploadData(files, [\n                    chunk.dataBlock\n                ]);\n                return;\n            } else console.warn(\"Retried this chunk too often. Giving up.\");\n        }\n        this._errorProcessing(files, response || this.options.dictResponseError.replace(\"{{statusCode}}\", xhr.status), xhr);\n    }\n    submitRequest(xhr, formData, files) {\n        if (xhr.readyState != 1) {\n            console.warn(\"Cannot send this request because the XMLHttpRequest.readyState is not OPENED.\");\n            return;\n        }\n        if (this.options.binaryBody) {\n            if (files[0].upload.chunked) {\n                const chunk = this._getChunk(files[0], xhr);\n                xhr.send(chunk.dataBlock.data);\n            } else xhr.send(files[0]);\n        } else xhr.send(formData);\n    }\n    // Called internally when processing is finished.\n    // Individual callbacks have to be called in the appropriate sections.\n    _finished(files, responseText, e) {\n        for (let file of files){\n            file.status = $3ed269f2f0fb224b$export$2e2bcd8739ae039.SUCCESS;\n            this.emit(\"success\", file, responseText, e);\n            this.emit(\"complete\", file);\n        }\n        if (this.options.uploadMultiple) {\n            this.emit(\"successmultiple\", files, responseText, e);\n            this.emit(\"completemultiple\", files);\n        }\n        if (this.options.autoProcessQueue) return this.processQueue();\n    }\n    // Called internally when processing is finished.\n    // Individual callbacks have to be called in the appropriate sections.\n    _errorProcessing(files, message, xhr) {\n        for (let file of files){\n            file.status = $3ed269f2f0fb224b$export$2e2bcd8739ae039.ERROR;\n            this.emit(\"error\", file, message, xhr);\n            this.emit(\"complete\", file);\n        }\n        if (this.options.uploadMultiple) {\n            this.emit(\"errormultiple\", files, message, xhr);\n            this.emit(\"completemultiple\", files);\n        }\n        if (this.options.autoProcessQueue) return this.processQueue();\n    }\n    static uuidv4() {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n            let r = Math.random() * 16 | 0, v = c === \"x\" ? r : r & 3 | 8;\n            return v.toString(16);\n        });\n    }\n    constructor(el, options){\n        super();\n        let fallback, left;\n        this.element = el;\n        this.clickableElements = [];\n        this.listeners = [];\n        this.files = []; // All files\n        if (typeof this.element === \"string\") this.element = document.querySelector(this.element);\n        // Not checking if instance of HTMLElement or Element since IE9 is extremely weird.\n        if (!this.element || this.element.nodeType == null) throw new Error(\"Invalid dropzone element.\");\n        if (this.element.dropzone) throw new Error(\"Dropzone already attached.\");\n        // Now add this dropzone to the instances.\n        $3ed269f2f0fb224b$export$2e2bcd8739ae039.instances.push(this);\n        // Put the dropzone inside the element itself.\n        this.element.dropzone = this;\n        let elementOptions = (left = $3ed269f2f0fb224b$export$2e2bcd8739ae039.optionsForElement(this.element)) != null ? left : {\n        };\n        this.options = (0,just_extend__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(true, {\n        }, $4ca367182776f80b$export$2e2bcd8739ae039, elementOptions, options != null ? options : {\n        });\n        this.options.previewTemplate = this.options.previewTemplate.replace(/\\n*/g, \"\");\n        // If the browser failed, just call the fallback and leave\n        if (this.options.forceFallback || !$3ed269f2f0fb224b$export$2e2bcd8739ae039.isBrowserSupported()) return this.options.fallback.call(this);\n        // @options.url = @element.getAttribute \"action\" unless @options.url?\n        if (this.options.url == null) this.options.url = this.element.getAttribute(\"action\");\n        if (!this.options.url) throw new Error(\"No URL provided.\");\n        if (this.options.acceptedFiles && this.options.acceptedMimeTypes) throw new Error(\"You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.\");\n        if (this.options.uploadMultiple && this.options.chunking) throw new Error(\"You cannot set both: uploadMultiple and chunking.\");\n        if (this.options.binaryBody && this.options.uploadMultiple) throw new Error(\"You cannot set both: binaryBody and uploadMultiple.\");\n        // Backwards compatibility\n        if (this.options.acceptedMimeTypes) {\n            this.options.acceptedFiles = this.options.acceptedMimeTypes;\n            delete this.options.acceptedMimeTypes;\n        }\n        // Backwards compatibility\n        if (this.options.renameFilename != null) this.options.renameFile = (file)=>this.options.renameFilename.call(this, file.name, file)\n        ;\n        if (typeof this.options.method === \"string\") this.options.method = this.options.method.toUpperCase();\n        if ((fallback = this.getExistingFallback()) && fallback.parentNode) // Remove the fallback\n        fallback.parentNode.removeChild(fallback);\n        // Display previews in the previewsContainer element or the Dropzone element unless explicitly set to false\n        if (this.options.previewsContainer !== false) {\n            if (this.options.previewsContainer) this.previewsContainer = $3ed269f2f0fb224b$export$2e2bcd8739ae039.getElement(this.options.previewsContainer, \"previewsContainer\");\n            else this.previewsContainer = this.element;\n        }\n        if (this.options.clickable) {\n            if (this.options.clickable === true) this.clickableElements = [\n                this.element\n            ];\n            else this.clickableElements = $3ed269f2f0fb224b$export$2e2bcd8739ae039.getElements(this.options.clickable, \"clickable\");\n        }\n        this.init();\n    }\n}\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.initClass();\n// This is a map of options for your different dropzones. Add configurations\n// to this object for your different dropzone elemens.\n//\n// Example:\n//\n//     Dropzone.options.myDropzoneElementId = { maxFilesize: 1 };\n//\n// And in html:\n//\n//     <form action=\"/upload\" id=\"my-dropzone-element-id\" class=\"dropzone\"></form>\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.options = {\n};\n// Returns the options for an element or undefined if none available.\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.optionsForElement = function(element) {\n    // Get the `Dropzone.options.elementId` for this element if it exists\n    if (element.getAttribute(\"id\")) return $3ed269f2f0fb224b$export$2e2bcd8739ae039.options[$3ed269f2f0fb224b$var$camelize(element.getAttribute(\"id\"))];\n    else return undefined;\n};\n// Holds a list of all dropzone instances\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.instances = [];\n// Returns the dropzone for given element if any\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.forElement = function(element) {\n    if (typeof element === \"string\") element = document.querySelector(element);\n    if ((element != null ? element.dropzone : undefined) == null) throw new Error(\"No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.\");\n    return element.dropzone;\n};\n// Looks for all .dropzone elements and creates a dropzone for them\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.discover = function() {\n    let dropzones;\n    if (document.querySelectorAll) dropzones = document.querySelectorAll(\".dropzone\");\n    else {\n        dropzones = [];\n        // IE :(\n        let checkElements = (elements)=>(()=>{\n                let result = [];\n                for (let el of elements)if (/(^| )dropzone($| )/.test(el.className)) result.push(dropzones.push(el));\n                else result.push(undefined);\n                return result;\n            })()\n        ;\n        checkElements(document.getElementsByTagName(\"div\"));\n        checkElements(document.getElementsByTagName(\"form\"));\n    }\n    return (()=>{\n        let result = [];\n        for (let dropzone of dropzones)// Create a dropzone unless auto discover has been disabled for specific element\n        if ($3ed269f2f0fb224b$export$2e2bcd8739ae039.optionsForElement(dropzone) !== false) result.push(new $3ed269f2f0fb224b$export$2e2bcd8739ae039(dropzone));\n        else result.push(undefined);\n        return result;\n    })();\n};\n// Some browsers support drag and drog functionality, but not correctly.\n//\n// So I created a blocklist of userAgents. Yes, yes. Browser sniffing, I know.\n// But what to do when browsers *theoretically* support an API, but crash\n// when using it.\n//\n// This is a list of regular expressions tested against navigator.userAgent\n//\n// ** It should only be used on browser that *do* support the API, but\n// incorrectly **\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.blockedBrowsers = [\n    // The mac os and windows phone version of opera 12 seems to have a problem with the File drag'n'drop API.\n    /opera.*(Macintosh|Windows Phone).*version\\/12/i, \n];\n// Checks if the browser is supported\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.isBrowserSupported = function() {\n    let capableBrowser = true;\n    if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {\n        if (!(\"classList\" in document.createElement(\"a\"))) capableBrowser = false;\n        else {\n            if ($3ed269f2f0fb224b$export$2e2bcd8739ae039.blacklistedBrowsers !== undefined) // Since this has been renamed, this makes sure we don't break older\n            // configuration.\n            $3ed269f2f0fb224b$export$2e2bcd8739ae039.blockedBrowsers = $3ed269f2f0fb224b$export$2e2bcd8739ae039.blacklistedBrowsers;\n            // The browser supports the API, but may be blocked.\n            for (let regex of $3ed269f2f0fb224b$export$2e2bcd8739ae039.blockedBrowsers)if (regex.test(navigator.userAgent)) {\n                capableBrowser = false;\n                continue;\n            }\n        }\n    } else capableBrowser = false;\n    return capableBrowser;\n};\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.dataURItoBlob = function(dataURI) {\n    // convert base64 to raw binary data held in a string\n    // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this\n    let byteString = atob(dataURI.split(\",\")[1]);\n    // separate out the mime component\n    let mimeString = dataURI.split(\",\")[0].split(\":\")[1].split(\";\")[0];\n    // write the bytes of the string to an ArrayBuffer\n    let ab = new ArrayBuffer(byteString.length);\n    let ia = new Uint8Array(ab);\n    for(let i = 0, end = byteString.length, asc = 0 <= end; asc ? i <= end : i >= end; asc ? i++ : i--)ia[i] = byteString.charCodeAt(i);\n    // write the ArrayBuffer to a blob\n    return new Blob([\n        ab\n    ], {\n        type: mimeString\n    });\n};\n// Returns an array without the rejected item\nconst $3ed269f2f0fb224b$var$without = (list, rejectedItem)=>list.filter((item)=>item !== rejectedItem\n    ).map((item)=>item\n    )\n;\n// abc-def_ghi -> abcDefGhi\nconst $3ed269f2f0fb224b$var$camelize = (str)=>str.replace(/[\\-_](\\w)/g, (match)=>match.charAt(1).toUpperCase()\n    )\n;\n// Creates an element from string\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.createElement = function(string) {\n    let div = document.createElement(\"div\");\n    div.innerHTML = string;\n    return div.childNodes[0];\n};\n// Tests if given element is inside (or simply is) the container\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.elementInside = function(element, container) {\n    if (element === container) return true;\n     // Coffeescript doesn't support do/while loops\n    while(element = element.parentNode){\n        if (element === container) return true;\n    }\n    return false;\n};\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.getElement = function(el, name) {\n    let element;\n    if (typeof el === \"string\") element = document.querySelector(el);\n    else if (el.nodeType != null) element = el;\n    if (element == null) throw new Error(`Invalid \\`${name}\\` option provided. Please provide a CSS selector or a plain HTML element.`);\n    return element;\n};\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.getElements = function(els, name) {\n    let el, elements;\n    if (els instanceof Array) {\n        elements = [];\n        try {\n            for (el of els)elements.push(this.getElement(el, name));\n        } catch (e) {\n            elements = null;\n        }\n    } else if (typeof els === \"string\") {\n        elements = [];\n        for (el of document.querySelectorAll(els))elements.push(el);\n    } else if (els.nodeType != null) elements = [\n        els\n    ];\n    if (elements == null || !elements.length) throw new Error(`Invalid \\`${name}\\` option provided. Please provide a CSS selector, a plain HTML element or a list of those.`);\n    return elements;\n};\n// Asks the user the question and calls accepted or rejected accordingly\n//\n// The default implementation just uses `window.confirm` and then calls the\n// appropriate callback.\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.confirm = function(question, accepted, rejected) {\n    if (window.confirm(question)) return accepted();\n    else if (rejected != null) return rejected();\n};\n// Validates the mime type like this:\n//\n// https://developer.mozilla.org/en-US/docs/HTML/Element/input#attr-accept\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.isValidFile = function(file, acceptedFiles) {\n    if (!acceptedFiles) return true;\n     // If there are no accepted mime types, it's OK\n    acceptedFiles = acceptedFiles.split(\",\");\n    let mimeType = file.type;\n    let baseMimeType = mimeType.replace(/\\/.*$/, \"\");\n    for (let validType of acceptedFiles){\n        validType = validType.trim();\n        if (validType.charAt(0) === \".\") {\n            if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) return true;\n        } else if (/\\/\\*$/.test(validType)) {\n            // This is something like a image/* mime type\n            if (baseMimeType === validType.replace(/\\/.*$/, \"\")) return true;\n        } else {\n            if (mimeType === validType) return true;\n        }\n    }\n    return false;\n};\n// Augment jQuery\nif (typeof jQuery !== \"undefined\" && jQuery !== null) jQuery.fn.dropzone = function(options) {\n    return this.each(function() {\n        return new $3ed269f2f0fb224b$export$2e2bcd8739ae039(this, options);\n    });\n};\n// Dropzone file status codes\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.ADDED = \"added\";\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.QUEUED = \"queued\";\n// For backwards compatibility. Now, if a file is accepted, it's either queued\n// or uploading.\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.ACCEPTED = $3ed269f2f0fb224b$export$2e2bcd8739ae039.QUEUED;\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.UPLOADING = \"uploading\";\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.PROCESSING = $3ed269f2f0fb224b$export$2e2bcd8739ae039.UPLOADING; // alias\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.CANCELED = \"canceled\";\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.ERROR = \"error\";\n$3ed269f2f0fb224b$export$2e2bcd8739ae039.SUCCESS = \"success\";\n/*\n\n Bugfix for iOS 6 and 7\n Source: http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios\n based on the work of https://github.com/stomita/ios-imagefile-megapixel\n\n */ // Detecting vertical squash in loaded image.\n// Fixes a bug which squash image vertically while drawing into canvas for some images.\n// This is a bug in iOS6 devices. This function from https://github.com/stomita/ios-imagefile-megapixel\nlet $3ed269f2f0fb224b$var$detectVerticalSquash = function(img) {\n    let iw = img.naturalWidth;\n    let ih = img.naturalHeight;\n    let canvas = document.createElement(\"canvas\");\n    canvas.width = 1;\n    canvas.height = ih;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(img, 0, 0);\n    let { data: data  } = ctx.getImageData(1, 0, 1, ih);\n    // search image edge pixel position in case it is squashed vertically.\n    let sy = 0;\n    let ey = ih;\n    let py = ih;\n    while(py > sy){\n        let alpha = data[(py - 1) * 4 + 3];\n        if (alpha === 0) ey = py;\n        else sy = py;\n        py = ey + sy >> 1;\n    }\n    let ratio = py / ih;\n    if (ratio === 0) return 1;\n    else return ratio;\n};\n// A replacement for context.drawImage\n// (args are for source and destination).\nvar $3ed269f2f0fb224b$var$drawImageIOSFix = function(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {\n    let vertSquashRatio = $3ed269f2f0fb224b$var$detectVerticalSquash(img);\n    return ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);\n};\n// Based on MinifyJpeg\n// Source: http://www.perry.cz/files/ExifRestorer.js\n// http://elicon.blog57.fc2.com/blog-entry-206.html\nclass $3ed269f2f0fb224b$var$ExifRestore {\n    static initClass() {\n        this.KEY_STR = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    }\n    static encode64(input) {\n        let output = \"\";\n        let chr1 = undefined;\n        let chr2 = undefined;\n        let chr3 = \"\";\n        let enc1 = undefined;\n        let enc2 = undefined;\n        let enc3 = undefined;\n        let enc4 = \"\";\n        let i = 0;\n        while(true){\n            chr1 = input[i++];\n            chr2 = input[i++];\n            chr3 = input[i++];\n            enc1 = chr1 >> 2;\n            enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n            enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n            enc4 = chr3 & 63;\n            if (isNaN(chr2)) enc3 = enc4 = 64;\n            else if (isNaN(chr3)) enc4 = 64;\n            output = output + this.KEY_STR.charAt(enc1) + this.KEY_STR.charAt(enc2) + this.KEY_STR.charAt(enc3) + this.KEY_STR.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n            if (!(i < input.length)) break;\n        }\n        return output;\n    }\n    static restore(origFileBase64, resizedFileBase64) {\n        if (!origFileBase64.match(\"data:image/jpeg;base64,\")) return resizedFileBase64;\n        let rawImage = this.decode64(origFileBase64.replace(\"data:image/jpeg;base64,\", \"\"));\n        let segments = this.slice2Segments(rawImage);\n        let image = this.exifManipulation(resizedFileBase64, segments);\n        return `data:image/jpeg;base64,${this.encode64(image)}`;\n    }\n    static exifManipulation(resizedFileBase64, segments) {\n        let exifArray = this.getExifArray(segments);\n        let newImageArray = this.insertExif(resizedFileBase64, exifArray);\n        let aBuffer = new Uint8Array(newImageArray);\n        return aBuffer;\n    }\n    static getExifArray(segments) {\n        let seg = undefined;\n        let x = 0;\n        while(x < segments.length){\n            seg = segments[x];\n            if (seg[0] === 255 & seg[1] === 225) return seg;\n            x++;\n        }\n        return [];\n    }\n    static insertExif(resizedFileBase64, exifArray) {\n        let imageData = resizedFileBase64.replace(\"data:image/jpeg;base64,\", \"\");\n        let buf = this.decode64(imageData);\n        let separatePoint = buf.indexOf(255, 3);\n        let mae = buf.slice(0, separatePoint);\n        let ato = buf.slice(separatePoint);\n        let array = mae;\n        array = array.concat(exifArray);\n        array = array.concat(ato);\n        return array;\n    }\n    static slice2Segments(rawImageArray) {\n        let head = 0;\n        let segments = [];\n        while(true){\n            var length;\n            if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 218) break;\n            if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 216) head += 2;\n            else {\n                length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3];\n                let endPoint = head + length + 2;\n                let seg = rawImageArray.slice(head, endPoint);\n                segments.push(seg);\n                head = endPoint;\n            }\n            if (head > rawImageArray.length) break;\n        }\n        return segments;\n    }\n    static decode64(input) {\n        let output = \"\";\n        let chr1 = undefined;\n        let chr2 = undefined;\n        let chr3 = \"\";\n        let enc1 = undefined;\n        let enc2 = undefined;\n        let enc3 = undefined;\n        let enc4 = \"\";\n        let i = 0;\n        let buf = [];\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        let base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n        if (base64test.exec(input)) console.warn(\"There were invalid base64 characters in the input text.\\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\\nExpect errors in decoding.\");\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n        while(true){\n            enc1 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc2 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc3 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc4 = this.KEY_STR.indexOf(input.charAt(i++));\n            chr1 = enc1 << 2 | enc2 >> 4;\n            chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n            chr3 = (enc3 & 3) << 6 | enc4;\n            buf.push(chr1);\n            if (enc3 !== 64) buf.push(chr2);\n            if (enc4 !== 64) buf.push(chr3);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n            if (!(i < input.length)) break;\n        }\n        return buf;\n    }\n}\n$3ed269f2f0fb224b$var$ExifRestore.initClass();\n/*\n * contentloaded.js\n *\n * Author: Diego Perini (diego.perini at gmail.com)\n * Summary: cross-browser wrapper for DOMContentLoaded\n * Updated: 20101020\n * License: MIT\n * Version: 1.2\n *\n * URL:\n * http://javascript.nwbox.com/ContentLoaded/\n * http://javascript.nwbox.com/ContentLoaded/MIT-LICENSE\n */ // @win window reference\n// @fn function reference\nlet $3ed269f2f0fb224b$var$contentLoaded = function(win, fn) {\n    let done = false;\n    let top = true;\n    let doc = win.document;\n    let root = doc.documentElement;\n    let add = doc.addEventListener ? \"addEventListener\" : \"attachEvent\";\n    let rem = doc.addEventListener ? \"removeEventListener\" : \"detachEvent\";\n    let pre = doc.addEventListener ? \"\" : \"on\";\n    var init = function(e) {\n        if (e.type === \"readystatechange\" && doc.readyState !== \"complete\") return;\n        (e.type === \"load\" ? win : doc)[rem](pre + e.type, init, false);\n        if (!done && (done = true)) return fn.call(win, e.type || e);\n    };\n    var poll = function() {\n        try {\n            root.doScroll(\"left\");\n        } catch (e) {\n            setTimeout(poll, 50);\n            return;\n        }\n        return init(\"poll\");\n    };\n    if (doc.readyState !== \"complete\") {\n        if (doc.createEventObject && root.doScroll) {\n            try {\n                top = !win.frameElement;\n            } catch (error) {\n            }\n            if (top) poll();\n        }\n        doc[add](pre + \"DOMContentLoaded\", init, false);\n        doc[add](pre + \"readystatechange\", init, false);\n        return win[add](pre + \"load\", init, false);\n    }\n};\nfunction $3ed269f2f0fb224b$var$__guard__(value, transform) {\n    return typeof value !== \"undefined\" && value !== null ? transform(value) : undefined;\n}\nfunction $3ed269f2f0fb224b$var$__guardMethod__(obj, methodName, transform) {\n    if (typeof obj !== \"undefined\" && obj !== null && typeof obj[methodName] === \"function\") return transform(obj, methodName);\n    else return undefined;\n}\n\n\n\n//# sourceMappingURL=dropzone.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/dropzone/dist/dropzone.mjs\n");

/***/ }),

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var alpinejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! alpinejs */ \"./node_modules/alpinejs/dist/module.esm.js\");\n/* harmony import */ var _plugins_select2_js_select2_full_min_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../plugins/select2/js/select2.full.min.js */ \"./resources/plugins/select2/js/select2.full.min.js\");\n/* harmony import */ var _plugins_bootstrap_slider_bootstrap_slider_min_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../plugins/bootstrap-slider/bootstrap-slider.min.js */ \"./resources/plugins/bootstrap-slider/bootstrap-slider.min.js\");\n/* harmony import */ var _yaireo_tagify__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @yaireo/tagify */ \"./node_modules/@yaireo/tagify/dist/tagify.min.js\");\n/* harmony import */ var dropzone__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! dropzone */ \"./node_modules/dropzone/dist/dropzone.mjs\");\n\n\n\n\n\n\n// tinymce\n\ntinymce.init({\n  selector: 'textarea.tinymce',\n  // Replace this CSS selector to match the placeholder element for TinyMCE\n  plugins: 'table lists',\n  toolbar: 'undo redo | formatselect| bold italic | alignleft aligncenter alignright | indent outdent | bullist numlist |  table',\n  promotion: false\n});\n\n// alpine\nwindow.Alpine = alpinejs__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\nalpinejs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].start();\n\n// boot up\nvar tagifyElement = document.querySelector(\"textarea.tagify\");\nif (tagifyElement) new _yaireo_tagify__WEBPACK_IMPORTED_MODULE_3__(tagifyElement);\ndocument.querySelectorAll(\"input[type='checkbox']\").forEach(function (html) {\n  return new Switchery(html);\n});\n// bootstrap slider\n$(\"input.slider\").slider();\n// select 2\n$(\"select[data-ajax-url]\").select2({\n  ajax: {\n    url: $(undefined).attr(\"data-ajax-url\")\n  }\n});\nfunction select2(id) {\n  $(\"#\" + id).select2({\n    ajax: {\n      url: $(\"#\" + id).attr(\"data-ajax-url\"),\n      processResults: function processResults(data) {\n        return data;\n      },\n      method: \"GET\"\n    }\n  });\n}\nselect2(\"brand_name\");\nselect2(\"branch_name\");\nif (document.querySelector(\"#image\")) new dropzone__WEBPACK_IMPORTED_MODULE_4__[\"default\"](\"#image\", {\n  acceptedFiles: \"image/*\"\n});\nnew dropzone__WEBPACK_IMPORTED_MODULE_4__[\"default\"](\"#files\", {\n  acceptedFiles: \".csv,application/vnd.ms-excel,application/vnd.ms-excel,image/*,video/*,audio/*\"\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QjtBQUNxQjtBQUNVO0FBQ3pCO0FBQ0g7O0FBTWhDOztBQUVBRyxPQUFPLENBQUNDLElBQUksQ0FBQztFQUNUQyxRQUFRLEVBQUUsa0JBQWtCO0VBQUU7RUFDOUJDLE9BQU8sRUFBRSxhQUFhO0VBQ3RCQyxPQUFPLEVBQUUsc0hBQXNIO0VBQy9IQyxTQUFTLEVBQUU7QUFDZixDQUFDLENBQUM7O0FBRUY7QUFDQUMsTUFBTSxDQUFDVCxNQUFNLEdBQUdBLGdEQUFNO0FBQ3RCQSxnREFBTSxDQUFDVSxLQUFLLENBQUMsQ0FBQzs7QUFFZDtBQUNBLElBQU1DLGFBQWEsR0FBR0MsUUFBUSxDQUFDQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7QUFDL0QsSUFBR0YsYUFBYSxFQUNaLElBQUlWLDJDQUFNLENBQUNVLGFBQWEsQ0FBQztBQUM1QkMsUUFBUSxDQUFDRSxnQkFBZ0IsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDQyxPQUFPLENBQUMsVUFBQ0MsSUFBSTtFQUFBLE9BQUssSUFBSUMsU0FBUyxDQUFDRCxJQUFJLENBQUM7QUFBQSxFQUFDO0FBQzNGO0FBQ0NFLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQ0MsTUFBTSxDQUFDLENBQUM7QUFDM0I7QUFDQUQsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLENBQUNFLE9BQU8sQ0FBQztFQUMvQkMsSUFBSSxFQUFFO0lBQ0ZDLEdBQUcsRUFBRUosQ0FBQyxDQUFDLFNBQUksQ0FBQyxDQUFDSyxJQUFJLENBQUMsZUFBZTtFQUdyQztBQUVKLENBQUMsQ0FBQztBQUdGLFNBQVNILE9BQU9BLENBQUNJLEVBQUUsRUFBRTtFQUNqQk4sQ0FBQyxDQUFDLEdBQUcsR0FBR00sRUFBRSxDQUFDLENBQUNKLE9BQU8sQ0FBQztJQUNoQkMsSUFBSSxFQUFFO01BQ0ZDLEdBQUcsRUFBRUosQ0FBQyxDQUFDLEdBQUcsR0FBR00sRUFBRSxDQUFDLENBQUNELElBQUksQ0FBQyxlQUFlLENBQUM7TUFDdENFLGNBQWMsRUFBRSxTQUFBQSxlQUFDQyxJQUFJO1FBQUEsT0FBS0EsSUFBSTtNQUFBO01BQzlCQyxNQUFNLEVBQUU7SUFFWjtFQUVKLENBQUMsQ0FBQztBQUNOO0FBRUFQLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDckJBLE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFHdEIsSUFBR1IsUUFBUSxDQUFDQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQy9CLElBQUlYLGdEQUFRLENBQUMsUUFBUSxFQUFDO0VBRWxCMEIsYUFBYSxFQUFDO0FBQ2xCLENBQUMsQ0FBQztBQUdOLElBQUkxQixnREFBUSxDQUFDLFFBQVEsRUFBQztFQUNsQjBCLGFBQWEsRUFBQztBQUVsQixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvYXBwLmpzP2NlZDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFscGluZSBmcm9tICdhbHBpbmVqcydcbmltcG9ydCBcIi4uL3BsdWdpbnMvc2VsZWN0Mi9qcy9zZWxlY3QyLmZ1bGwubWluLmpzXCJcbmltcG9ydCBcIi4uL3BsdWdpbnMvYm9vdHN0cmFwLXNsaWRlci9ib290c3RyYXAtc2xpZGVyLm1pbi5qc1wiXG5pbXBvcnQgVGFnaWZ5IGZyb20gJ0B5YWlyZW8vdGFnaWZ5J1xuaW1wb3J0IERyb3B6b25lIGZyb20gXCJkcm9wem9uZVwiO1xuXG5cblxuXG5cbi8vIHRpbnltY2VcblxudGlueW1jZS5pbml0KHtcbiAgICBzZWxlY3RvcjogJ3RleHRhcmVhLnRpbnltY2UnLCAvLyBSZXBsYWNlIHRoaXMgQ1NTIHNlbGVjdG9yIHRvIG1hdGNoIHRoZSBwbGFjZWhvbGRlciBlbGVtZW50IGZvciBUaW55TUNFXG4gICAgcGx1Z2luczogJ3RhYmxlIGxpc3RzJyxcbiAgICB0b29sYmFyOiAndW5kbyByZWRvIHwgZm9ybWF0c2VsZWN0fCBib2xkIGl0YWxpYyB8IGFsaWdubGVmdCBhbGlnbmNlbnRlciBhbGlnbnJpZ2h0IHwgaW5kZW50IG91dGRlbnQgfCBidWxsaXN0IG51bWxpc3QgfCAgdGFibGUnLFxuICAgIHByb21vdGlvbjogZmFsc2Vcbn0pO1xuXG4vLyBhbHBpbmVcbndpbmRvdy5BbHBpbmUgPSBBbHBpbmVcbkFscGluZS5zdGFydCgpXG5cbi8vIGJvb3QgdXBcbmNvbnN0IHRhZ2lmeUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwidGV4dGFyZWEudGFnaWZ5XCIpXG5pZih0YWdpZnlFbGVtZW50KVxuICAgIG5ldyBUYWdpZnkodGFnaWZ5RWxlbWVudClcbiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbdHlwZT0nY2hlY2tib3gnXVwiKS5mb3JFYWNoKChodG1sKT0+ICBuZXcgU3dpdGNoZXJ5KGh0bWwpKVxuLy8gYm9vdHN0cmFwIHNsaWRlclxuICQoXCJpbnB1dC5zbGlkZXJcIikuc2xpZGVyKCk7XG4vLyBzZWxlY3QgMlxuJChcInNlbGVjdFtkYXRhLWFqYXgtdXJsXVwiKS5zZWxlY3QyKHtcbiAgICBhamF4OiB7XG4gICAgICAgIHVybDogJCh0aGlzKS5hdHRyKFwiZGF0YS1hamF4LXVybFwiKSxcblxuXG4gICAgfSxcblxufSk7XG5cblxuZnVuY3Rpb24gc2VsZWN0MihpZCkge1xuICAgICQoXCIjXCIgKyBpZCkuc2VsZWN0Mih7XG4gICAgICAgIGFqYXg6IHtcbiAgICAgICAgICAgIHVybDogJChcIiNcIiArIGlkKS5hdHRyKFwiZGF0YS1hamF4LXVybFwiKSxcbiAgICAgICAgICAgIHByb2Nlc3NSZXN1bHRzOiAoZGF0YSkgPT4gZGF0YSxcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIlxuXG4gICAgICAgIH0sXG5cbiAgICB9KVxufVxuXG5zZWxlY3QyKFwiYnJhbmRfbmFtZVwiKTtcbnNlbGVjdDIoXCJicmFuY2hfbmFtZVwiKTtcblxuXG5pZihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2ltYWdlXCIpKVxuICAgIG5ldyBEcm9wem9uZShcIiNpbWFnZVwiLHtcblxuICAgICAgICBhY2NlcHRlZEZpbGVzOlwiaW1hZ2UvKlwiXG4gICAgfSlcblxuXG5uZXcgRHJvcHpvbmUoXCIjZmlsZXNcIix7XG4gICAgYWNjZXB0ZWRGaWxlczpcIi5jc3YsYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLGFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbCxpbWFnZS8qLHZpZGVvLyosYXVkaW8vKlwiLFxuXG59KVxuXG4iXSwibmFtZXMiOlsiQWxwaW5lIiwiVGFnaWZ5IiwiRHJvcHpvbmUiLCJ0aW55bWNlIiwiaW5pdCIsInNlbGVjdG9yIiwicGx1Z2lucyIsInRvb2xiYXIiLCJwcm9tb3Rpb24iLCJ3aW5kb3ciLCJzdGFydCIsInRhZ2lmeUVsZW1lbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImh0bWwiLCJTd2l0Y2hlcnkiLCIkIiwic2xpZGVyIiwic2VsZWN0MiIsImFqYXgiLCJ1cmwiLCJhdHRyIiwiaWQiLCJwcm9jZXNzUmVzdWx0cyIsImRhdGEiLCJtZXRob2QiLCJhY2NlcHRlZEZpbGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ }),

/***/ "./resources/plugins/bootstrap-slider/bootstrap-slider.min.js":
/*!********************************************************************!*\
  !*** ./resources/plugins/bootstrap-slider/bootstrap-slider.min.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/*! =======================================================\n                      VERSION  11.0.2              \n========================================================= */\n\n\nfunction _typeof2(obj) { \"@babel/helpers - typeof\"; return _typeof2 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof2(obj); }\nvar _typeof = \"function\" == typeof Symbol && \"symbol\" == _typeof2(Symbol.iterator) ? function (a) {\n    return _typeof2(a);\n  } : function (a) {\n    return a && \"function\" == typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? \"symbol\" : _typeof2(a);\n  },\n  windowIsDefined = \"object\" === (\"undefined\" == typeof window ? \"undefined\" : _typeof(window));\n!function (a) {\n  if (\"function\" == typeof define && define.amd) define([\"jquery\"], a);else if (\"object\" === (\"undefined\" == typeof module ? \"undefined\" : _typeof(module)) && module.exports) {\n    var b;\n    try {\n      b = require(\"jquery\");\n    } catch (c) {\n      b = null;\n    }\n    module.exports = a(b);\n  } else window && (window.Slider = a(window.jQuery));\n}(function (a) {\n  var b = \"slider\",\n    c = \"bootstrapSlider\";\n  windowIsDefined && !window.console && (window.console = {}), windowIsDefined && !window.console.log && (window.console.log = function () {}), windowIsDefined && !window.console.warn && (window.console.warn = function () {});\n  var d;\n  return function (a) {\n    function b() {}\n    function c(a) {\n      function c(b) {\n        b.prototype.option || (b.prototype.option = function (b) {\n          a.isPlainObject(b) && (this.options = a.extend(!0, this.options, b));\n        });\n      }\n      function e(b, c) {\n        a.fn[b] = function (e) {\n          if (\"string\" == typeof e) {\n            for (var g = d.call(arguments, 1), h = 0, i = this.length; i > h; h++) {\n              var j = this[h],\n                k = a.data(j, b);\n              if (k) {\n                if (a.isFunction(k[e]) && \"_\" !== e.charAt(0)) {\n                  var l = k[e].apply(k, g);\n                  if (void 0 !== l && l !== k) return l;\n                } else f(\"no such method '\" + e + \"' for \" + b + \" instance\");\n              } else f(\"cannot call methods on \" + b + \" prior to initialization; attempted to call '\" + e + \"'\");\n            }\n            return this;\n          }\n          var m = this.map(function () {\n            var d = a.data(this, b);\n            return d ? (d.option(e), d._init()) : (d = new c(this, e), a.data(this, b, d)), a(this);\n          });\n          return 1 === m.length ? m[0] : m;\n        };\n      }\n      if (a) {\n        var f = \"undefined\" == typeof console ? b : function (a) {\n          console.error(a);\n        };\n        return a.bridget = function (a, b) {\n          c(b), e(a, b);\n        }, a.bridget;\n      }\n    }\n    var d = Array.prototype.slice;\n    c(a);\n  }(a), function (a) {\n    function e(b, c) {\n      function d(a, b) {\n        var c = \"data-slider-\" + b.replace(/_/g, \"-\"),\n          d = a.getAttribute(c);\n        try {\n          return JSON.parse(d);\n        } catch (e) {\n          return d;\n        }\n      }\n      this._state = {\n        value: null,\n        enabled: null,\n        offset: null,\n        size: null,\n        percentage: null,\n        inDrag: !1,\n        over: !1,\n        tickIndex: null\n      }, this.ticksCallbackMap = {}, this.handleCallbackMap = {}, \"string\" == typeof b ? this.element = document.querySelector(b) : b instanceof HTMLElement && (this.element = b), c = c ? c : {};\n      for (var e = Object.keys(this.defaultOptions), f = c.hasOwnProperty(\"min\"), g = c.hasOwnProperty(\"max\"), i = 0; i < e.length; i++) {\n        var j = e[i],\n          k = c[j];\n        k = \"undefined\" != typeof k ? k : d(this.element, j), k = null !== k ? k : this.defaultOptions[j], this.options || (this.options = {}), this.options[j] = k;\n      }\n      if (this.ticksAreValid = Array.isArray(this.options.ticks) && this.options.ticks.length > 0, this.ticksAreValid || (this.options.lock_to_ticks = !1), \"auto\" === this.options.rtl) {\n        var l = window.getComputedStyle(this.element);\n        null != l ? this.options.rtl = \"rtl\" === l.direction : this.options.rtl = \"rtl\" === this.element.style.direction;\n      }\n      \"vertical\" !== this.options.orientation || \"top\" !== this.options.tooltip_position && \"bottom\" !== this.options.tooltip_position ? \"horizontal\" !== this.options.orientation || \"left\" !== this.options.tooltip_position && \"right\" !== this.options.tooltip_position || (this.options.tooltip_position = \"top\") : this.options.rtl ? this.options.tooltip_position = \"left\" : this.options.tooltip_position = \"right\";\n      var m,\n        n,\n        o,\n        p,\n        q,\n        r = this.element.style.width,\n        s = !1,\n        t = this.element.parentNode;\n      if (this.sliderElem) s = !0;else {\n        this.sliderElem = document.createElement(\"div\"), this.sliderElem.className = \"slider\";\n        var u = document.createElement(\"div\");\n        u.className = \"slider-track\", n = document.createElement(\"div\"), n.className = \"slider-track-low\", m = document.createElement(\"div\"), m.className = \"slider-selection\", o = document.createElement(\"div\"), o.className = \"slider-track-high\", p = document.createElement(\"div\"), p.className = \"slider-handle min-slider-handle\", p.setAttribute(\"role\", \"slider\"), p.setAttribute(\"aria-valuemin\", this.options.min), p.setAttribute(\"aria-valuemax\", this.options.max), q = document.createElement(\"div\"), q.className = \"slider-handle max-slider-handle\", q.setAttribute(\"role\", \"slider\"), q.setAttribute(\"aria-valuemin\", this.options.min), q.setAttribute(\"aria-valuemax\", this.options.max), u.appendChild(n), u.appendChild(m), u.appendChild(o), this.rangeHighlightElements = [];\n        var v = this.options.rangeHighlights;\n        if (Array.isArray(v) && v.length > 0) for (var w = 0; w < v.length; w++) {\n          var x = document.createElement(\"div\"),\n            y = v[w][\"class\"] || \"\";\n          x.className = \"slider-rangeHighlight slider-selection \" + y, this.rangeHighlightElements.push(x), u.appendChild(x);\n        }\n        var z = Array.isArray(this.options.labelledby);\n        if (z && this.options.labelledby[0] && p.setAttribute(\"aria-labelledby\", this.options.labelledby[0]), z && this.options.labelledby[1] && q.setAttribute(\"aria-labelledby\", this.options.labelledby[1]), !z && this.options.labelledby && (p.setAttribute(\"aria-labelledby\", this.options.labelledby), q.setAttribute(\"aria-labelledby\", this.options.labelledby)), this.ticks = [], Array.isArray(this.options.ticks) && this.options.ticks.length > 0) {\n          for (this.ticksContainer = document.createElement(\"div\"), this.ticksContainer.className = \"slider-tick-container\", i = 0; i < this.options.ticks.length; i++) {\n            var A = document.createElement(\"div\");\n            if (A.className = \"slider-tick\", this.options.ticks_tooltip) {\n              var B = this._addTickListener(),\n                C = B.addMouseEnter(this, A, i),\n                D = B.addMouseLeave(this, A);\n              this.ticksCallbackMap[i] = {\n                mouseEnter: C,\n                mouseLeave: D\n              };\n            }\n            this.ticks.push(A), this.ticksContainer.appendChild(A);\n          }\n          m.className += \" tick-slider-selection\";\n        }\n        if (this.tickLabels = [], Array.isArray(this.options.ticks_labels) && this.options.ticks_labels.length > 0) for (this.tickLabelContainer = document.createElement(\"div\"), this.tickLabelContainer.className = \"slider-tick-label-container\", i = 0; i < this.options.ticks_labels.length; i++) {\n          var E = document.createElement(\"div\"),\n            F = 0 === this.options.ticks_positions.length,\n            G = this.options.reversed && F ? this.options.ticks_labels.length - (i + 1) : i;\n          E.className = \"slider-tick-label\", E.innerHTML = this.options.ticks_labels[G], this.tickLabels.push(E), this.tickLabelContainer.appendChild(E);\n        }\n        var H = function H(a) {\n            var b = document.createElement(\"div\");\n            b.className = \"arrow\";\n            var c = document.createElement(\"div\");\n            c.className = \"tooltip-inner\", a.appendChild(b), a.appendChild(c);\n          },\n          I = document.createElement(\"div\");\n        I.className = \"tooltip tooltip-main\", I.setAttribute(\"role\", \"presentation\"), H(I);\n        var J = document.createElement(\"div\");\n        J.className = \"tooltip tooltip-min\", J.setAttribute(\"role\", \"presentation\"), H(J);\n        var K = document.createElement(\"div\");\n        K.className = \"tooltip tooltip-max\", K.setAttribute(\"role\", \"presentation\"), H(K), this.sliderElem.appendChild(u), this.sliderElem.appendChild(I), this.sliderElem.appendChild(J), this.sliderElem.appendChild(K), this.tickLabelContainer && this.sliderElem.appendChild(this.tickLabelContainer), this.ticksContainer && this.sliderElem.appendChild(this.ticksContainer), this.sliderElem.appendChild(p), this.sliderElem.appendChild(q), t.insertBefore(this.sliderElem, this.element), this.element.style.display = \"none\";\n      }\n      if (a && (this.$element = a(this.element), this.$sliderElem = a(this.sliderElem)), this.eventToCallbackMap = {}, this.sliderElem.id = this.options.id, this.touchCapable = \"ontouchstart\" in window || window.DocumentTouch && document instanceof window.DocumentTouch, this.touchX = 0, this.touchY = 0, this.tooltip = this.sliderElem.querySelector(\".tooltip-main\"), this.tooltipInner = this.tooltip.querySelector(\".tooltip-inner\"), this.tooltip_min = this.sliderElem.querySelector(\".tooltip-min\"), this.tooltipInner_min = this.tooltip_min.querySelector(\".tooltip-inner\"), this.tooltip_max = this.sliderElem.querySelector(\".tooltip-max\"), this.tooltipInner_max = this.tooltip_max.querySelector(\".tooltip-inner\"), h[this.options.scale] && (this.options.scale = h[this.options.scale]), s === !0 && (this._removeClass(this.sliderElem, \"slider-horizontal\"), this._removeClass(this.sliderElem, \"slider-vertical\"), this._removeClass(this.sliderElem, \"slider-rtl\"), this._removeClass(this.tooltip, \"hide\"), this._removeClass(this.tooltip_min, \"hide\"), this._removeClass(this.tooltip_max, \"hide\"), [\"left\", \"right\", \"top\", \"width\", \"height\"].forEach(function (a) {\n        this._removeProperty(this.trackLow, a), this._removeProperty(this.trackSelection, a), this._removeProperty(this.trackHigh, a);\n      }, this), [this.handle1, this.handle2].forEach(function (a) {\n        this._removeProperty(a, \"left\"), this._removeProperty(a, \"right\"), this._removeProperty(a, \"top\");\n      }, this), [this.tooltip, this.tooltip_min, this.tooltip_max].forEach(function (a) {\n        this._removeProperty(a, \"bs-tooltip-left\"), this._removeProperty(a, \"bs-tooltip-right\"), this._removeProperty(a, \"bs-tooltip-top\"), this._removeClass(a, \"bs-tooltip-right\"), this._removeClass(a, \"bs-tooltip-left\"), this._removeClass(a, \"bs-tooltip-top\");\n      }, this)), \"vertical\" === this.options.orientation ? (this._addClass(this.sliderElem, \"slider-vertical\"), this.stylePos = \"top\", this.mousePos = \"pageY\", this.sizePos = \"offsetHeight\") : (this._addClass(this.sliderElem, \"slider-horizontal\"), this.sliderElem.style.width = r, this.options.orientation = \"horizontal\", this.options.rtl ? this.stylePos = \"right\" : this.stylePos = \"left\", this.mousePos = \"clientX\", this.sizePos = \"offsetWidth\"), this.options.rtl && this._addClass(this.sliderElem, \"slider-rtl\"), this._setTooltipPosition(), Array.isArray(this.options.ticks) && this.options.ticks.length > 0 && (g || (this.options.max = Math.max.apply(Math, this.options.ticks)), f || (this.options.min = Math.min.apply(Math, this.options.ticks))), Array.isArray(this.options.value) ? (this.options.range = !0, this._state.value = this.options.value) : this.options.range ? this._state.value = [this.options.value, this.options.max] : this._state.value = this.options.value, this.trackLow = n || this.trackLow, this.trackSelection = m || this.trackSelection, this.trackHigh = o || this.trackHigh, \"none\" === this.options.selection ? (this._addClass(this.trackLow, \"hide\"), this._addClass(this.trackSelection, \"hide\"), this._addClass(this.trackHigh, \"hide\")) : (\"after\" === this.options.selection || \"before\" === this.options.selection) && (this._removeClass(this.trackLow, \"hide\"), this._removeClass(this.trackSelection, \"hide\"), this._removeClass(this.trackHigh, \"hide\")), this.handle1 = p || this.handle1, this.handle2 = q || this.handle2, s === !0) for (this._removeClass(this.handle1, \"round triangle\"), this._removeClass(this.handle2, \"round triangle hide\"), i = 0; i < this.ticks.length; i++) this._removeClass(this.ticks[i], \"round triangle hide\");\n      var L = [\"round\", \"triangle\", \"custom\"],\n        M = -1 !== L.indexOf(this.options.handle);\n      if (M) for (this._addClass(this.handle1, this.options.handle), this._addClass(this.handle2, this.options.handle), i = 0; i < this.ticks.length; i++) this._addClass(this.ticks[i], this.options.handle);\n      if (this._state.offset = this._offset(this.sliderElem), this._state.size = this.sliderElem[this.sizePos], this.setValue(this._state.value), this.handle1Keydown = this._keydown.bind(this, 0), this.handle1.addEventListener(\"keydown\", this.handle1Keydown, !1), this.handle2Keydown = this._keydown.bind(this, 1), this.handle2.addEventListener(\"keydown\", this.handle2Keydown, !1), this.mousedown = this._mousedown.bind(this), this.touchstart = this._touchstart.bind(this), this.touchmove = this._touchmove.bind(this), this.touchCapable && (this.sliderElem.addEventListener(\"touchstart\", this.touchstart, !1), this.sliderElem.addEventListener(\"touchmove\", this.touchmove, !1)), this.sliderElem.addEventListener(\"mousedown\", this.mousedown, !1), this.resize = this._resize.bind(this), window.addEventListener(\"resize\", this.resize, !1), \"hide\" === this.options.tooltip) this._addClass(this.tooltip, \"hide\"), this._addClass(this.tooltip_min, \"hide\"), this._addClass(this.tooltip_max, \"hide\");else if (\"always\" === this.options.tooltip) this._showTooltip(), this._alwaysShowTooltip = !0;else {\n        if (this.showTooltip = this._showTooltip.bind(this), this.hideTooltip = this._hideTooltip.bind(this), this.options.ticks_tooltip) {\n          var N = this._addTickListener(),\n            O = N.addMouseEnter(this, this.handle1),\n            P = N.addMouseLeave(this, this.handle1);\n          this.handleCallbackMap.handle1 = {\n            mouseEnter: O,\n            mouseLeave: P\n          }, O = N.addMouseEnter(this, this.handle2), P = N.addMouseLeave(this, this.handle2), this.handleCallbackMap.handle2 = {\n            mouseEnter: O,\n            mouseLeave: P\n          };\n        } else this.sliderElem.addEventListener(\"mouseenter\", this.showTooltip, !1), this.sliderElem.addEventListener(\"mouseleave\", this.hideTooltip, !1), this.touchCapable && (this.sliderElem.addEventListener(\"touchstart\", this.showTooltip, !1), this.sliderElem.addEventListener(\"touchmove\", this.showTooltip, !1), this.sliderElem.addEventListener(\"touchend\", this.hideTooltip, !1));\n        this.handle1.addEventListener(\"focus\", this.showTooltip, !1), this.handle1.addEventListener(\"blur\", this.hideTooltip, !1), this.handle2.addEventListener(\"focus\", this.showTooltip, !1), this.handle2.addEventListener(\"blur\", this.hideTooltip, !1), this.touchCapable && (this.handle1.addEventListener(\"touchstart\", this.showTooltip, !1), this.handle1.addEventListener(\"touchmove\", this.showTooltip, !1), this.handle1.addEventListener(\"touchend\", this.hideTooltip, !1), this.handle2.addEventListener(\"touchstart\", this.showTooltip, !1), this.handle2.addEventListener(\"touchmove\", this.showTooltip, !1), this.handle2.addEventListener(\"touchend\", this.hideTooltip, !1));\n      }\n      this.options.enabled ? this.enable() : this.disable();\n    }\n    var f = void 0,\n      g = {\n        formatInvalidInputErrorMsg: function formatInvalidInputErrorMsg(a) {\n          return \"Invalid input value '\" + a + \"' passed in\";\n        },\n        callingContextNotSliderInstance: \"Calling context element does not have instance of Slider bound to it. Check your code to make sure the JQuery object returned from the call to the slider() initializer is calling the method\"\n      },\n      h = {\n        linear: {\n          getValue: function getValue(a, b) {\n            return a < b.min ? b.min : a > b.max ? b.max : a;\n          },\n          toValue: function toValue(a) {\n            var b = a / 100 * (this.options.max - this.options.min),\n              c = !0;\n            if (this.options.ticks_positions.length > 0) {\n              for (var d, e, f, g = 0, i = 1; i < this.options.ticks_positions.length; i++) if (a <= this.options.ticks_positions[i]) {\n                d = this.options.ticks[i - 1], f = this.options.ticks_positions[i - 1], e = this.options.ticks[i], g = this.options.ticks_positions[i];\n                break;\n              }\n              var j = (a - f) / (g - f);\n              b = d + j * (e - d), c = !1;\n            }\n            var k = c ? this.options.min : 0,\n              l = k + Math.round(b / this.options.step) * this.options.step;\n            return h.linear.getValue(l, this.options);\n          },\n          toPercentage: function toPercentage(a) {\n            if (this.options.max === this.options.min) return 0;\n            if (this.options.ticks_positions.length > 0) {\n              for (var b, c, d, e = 0, f = 0; f < this.options.ticks.length; f++) if (a <= this.options.ticks[f]) {\n                b = f > 0 ? this.options.ticks[f - 1] : 0, d = f > 0 ? this.options.ticks_positions[f - 1] : 0, c = this.options.ticks[f], e = this.options.ticks_positions[f];\n                break;\n              }\n              if (f > 0) {\n                var g = (a - b) / (c - b);\n                return d + g * (e - d);\n              }\n            }\n            return 100 * (a - this.options.min) / (this.options.max - this.options.min);\n          }\n        },\n        logarithmic: {\n          toValue: function toValue(a) {\n            var b = 1 - this.options.min,\n              c = Math.log(this.options.min + b),\n              d = Math.log(this.options.max + b),\n              e = Math.exp(c + (d - c) * a / 100) - b;\n            return Math.round(e) === d ? d : (e = this.options.min + Math.round((e - this.options.min) / this.options.step) * this.options.step, h.linear.getValue(e, this.options));\n          },\n          toPercentage: function toPercentage(a) {\n            if (this.options.max === this.options.min) return 0;\n            var b = 1 - this.options.min,\n              c = Math.log(this.options.max + b),\n              d = Math.log(this.options.min + b),\n              e = Math.log(a + b);\n            return 100 * (e - d) / (c - d);\n          }\n        }\n      };\n    d = function d(a, b) {\n      return e.call(this, a, b), this;\n    }, d.prototype = {\n      _init: function _init() {},\n      constructor: d,\n      defaultOptions: {\n        id: \"\",\n        min: 0,\n        max: 10,\n        step: 1,\n        precision: 0,\n        orientation: \"horizontal\",\n        value: 5,\n        range: !1,\n        selection: \"before\",\n        tooltip: \"show\",\n        tooltip_split: !1,\n        lock_to_ticks: !1,\n        handle: \"round\",\n        reversed: !1,\n        rtl: \"auto\",\n        enabled: !0,\n        formatter: function formatter(a) {\n          return Array.isArray(a) ? a[0] + \" : \" + a[1] : a;\n        },\n        natural_arrow_keys: !1,\n        ticks: [],\n        ticks_positions: [],\n        ticks_labels: [],\n        ticks_snap_bounds: 0,\n        ticks_tooltip: !1,\n        scale: \"linear\",\n        focus: !1,\n        tooltip_position: null,\n        labelledby: null,\n        rangeHighlights: []\n      },\n      getElement: function getElement() {\n        return this.sliderElem;\n      },\n      getValue: function getValue() {\n        return this.options.range ? this._state.value : this._state.value[0];\n      },\n      setValue: function setValue(a, b, c) {\n        a || (a = 0);\n        var d = this.getValue();\n        this._state.value = this._validateInputValue(a);\n        var e = this._applyPrecision.bind(this);\n        this.options.range ? (this._state.value[0] = e(this._state.value[0]), this._state.value[1] = e(this._state.value[1]), this.ticksAreValid && this.options.lock_to_ticks && (this._state.value[0] = this.options.ticks[this._getClosestTickIndex(this._state.value[0])], this._state.value[1] = this.options.ticks[this._getClosestTickIndex(this._state.value[1])]), this._state.value[0] = Math.max(this.options.min, Math.min(this.options.max, this._state.value[0])), this._state.value[1] = Math.max(this.options.min, Math.min(this.options.max, this._state.value[1]))) : (this._state.value = e(this._state.value), this.ticksAreValid && this.options.lock_to_ticks && (this._state.value = this.options.ticks[this._getClosestTickIndex(this._state.value)]), this._state.value = [Math.max(this.options.min, Math.min(this.options.max, this._state.value))], this._addClass(this.handle2, \"hide\"), \"after\" === this.options.selection ? this._state.value[1] = this.options.max : this._state.value[1] = this.options.min), this._setTickIndex(), this.options.max > this.options.min ? this._state.percentage = [this._toPercentage(this._state.value[0]), this._toPercentage(this._state.value[1]), 100 * this.options.step / (this.options.max - this.options.min)] : this._state.percentage = [0, 0, 100], this._layout();\n        var f = this.options.range ? this._state.value : this._state.value[0];\n        this._setDataVal(f), b === !0 && this._trigger(\"slide\", f);\n        var g = !1;\n        return g = Array.isArray(f) ? d[0] !== f[0] || d[1] !== f[1] : d !== f, g && c === !0 && this._trigger(\"change\", {\n          oldValue: d,\n          newValue: f\n        }), this;\n      },\n      destroy: function destroy() {\n        this._removeSliderEventHandlers(), this.sliderElem.parentNode.removeChild(this.sliderElem), this.element.style.display = \"\", this._cleanUpEventCallbacksMap(), this.element.removeAttribute(\"data\"), a && (this._unbindJQueryEventHandlers(), f === b && this.$element.removeData(f), this.$element.removeData(c));\n      },\n      disable: function disable() {\n        return this._state.enabled = !1, this.handle1.removeAttribute(\"tabindex\"), this.handle2.removeAttribute(\"tabindex\"), this._addClass(this.sliderElem, \"slider-disabled\"), this._trigger(\"slideDisabled\"), this;\n      },\n      enable: function enable() {\n        return this._state.enabled = !0, this.handle1.setAttribute(\"tabindex\", 0), this.handle2.setAttribute(\"tabindex\", 0), this._removeClass(this.sliderElem, \"slider-disabled\"), this._trigger(\"slideEnabled\"), this;\n      },\n      toggle: function toggle() {\n        return this._state.enabled ? this.disable() : this.enable(), this;\n      },\n      isEnabled: function isEnabled() {\n        return this._state.enabled;\n      },\n      on: function on(a, b) {\n        return this._bindNonQueryEventHandler(a, b), this;\n      },\n      off: function off(b, c) {\n        a ? (this.$element.off(b, c), this.$sliderElem.off(b, c)) : this._unbindNonQueryEventHandler(b, c);\n      },\n      getAttribute: function getAttribute(a) {\n        return a ? this.options[a] : this.options;\n      },\n      setAttribute: function setAttribute(a, b) {\n        return this.options[a] = b, this;\n      },\n      refresh: function refresh(d) {\n        var g = this.getValue();\n        return this._removeSliderEventHandlers(), e.call(this, this.element, this.options), d && d.useCurrentValue === !0 && this.setValue(g), a && (f === b ? (a.data(this.element, b, this), a.data(this.element, c, this)) : a.data(this.element, c, this)), this;\n      },\n      relayout: function relayout() {\n        return this._resize(), this;\n      },\n      _removeTooltipListener: function _removeTooltipListener(a, b) {\n        this.handle1.removeEventListener(a, b, !1), this.handle2.removeEventListener(a, b, !1);\n      },\n      _removeSliderEventHandlers: function _removeSliderEventHandlers() {\n        if (this.handle1.removeEventListener(\"keydown\", this.handle1Keydown, !1), this.handle2.removeEventListener(\"keydown\", this.handle2Keydown, !1), this.options.ticks_tooltip) {\n          for (var a = this.ticksContainer.getElementsByClassName(\"slider-tick\"), b = 0; b < a.length; b++) a[b].removeEventListener(\"mouseenter\", this.ticksCallbackMap[b].mouseEnter, !1), a[b].removeEventListener(\"mouseleave\", this.ticksCallbackMap[b].mouseLeave, !1);\n          this.handleCallbackMap.handle1 && this.handleCallbackMap.handle2 && (this.handle1.removeEventListener(\"mouseenter\", this.handleCallbackMap.handle1.mouseEnter, !1), this.handle2.removeEventListener(\"mouseenter\", this.handleCallbackMap.handle2.mouseEnter, !1), this.handle1.removeEventListener(\"mouseleave\", this.handleCallbackMap.handle1.mouseLeave, !1), this.handle2.removeEventListener(\"mouseleave\", this.handleCallbackMap.handle2.mouseLeave, !1));\n        }\n        this.handleCallbackMap = null, this.ticksCallbackMap = null, this.showTooltip && this._removeTooltipListener(\"focus\", this.showTooltip), this.hideTooltip && this._removeTooltipListener(\"blur\", this.hideTooltip), this.showTooltip && this.sliderElem.removeEventListener(\"mouseenter\", this.showTooltip, !1), this.hideTooltip && this.sliderElem.removeEventListener(\"mouseleave\", this.hideTooltip, !1), this.sliderElem.removeEventListener(\"mousedown\", this.mousedown, !1), this.touchCapable && (this.showTooltip && (this.handle1.removeEventListener(\"touchstart\", this.showTooltip, !1), this.handle1.removeEventListener(\"touchmove\", this.showTooltip, !1), this.handle2.removeEventListener(\"touchstart\", this.showTooltip, !1), this.handle2.removeEventListener(\"touchmove\", this.showTooltip, !1)), this.hideTooltip && (this.handle1.removeEventListener(\"touchend\", this.hideTooltip, !1), this.handle2.removeEventListener(\"touchend\", this.hideTooltip, !1)), this.showTooltip && (this.sliderElem.removeEventListener(\"touchstart\", this.showTooltip, !1), this.sliderElem.removeEventListener(\"touchmove\", this.showTooltip, !1)), this.hideTooltip && this.sliderElem.removeEventListener(\"touchend\", this.hideTooltip, !1), this.sliderElem.removeEventListener(\"touchstart\", this.touchstart, !1), this.sliderElem.removeEventListener(\"touchmove\", this.touchmove, !1)), window.removeEventListener(\"resize\", this.resize, !1);\n      },\n      _bindNonQueryEventHandler: function _bindNonQueryEventHandler(a, b) {\n        void 0 === this.eventToCallbackMap[a] && (this.eventToCallbackMap[a] = []), this.eventToCallbackMap[a].push(b);\n      },\n      _unbindNonQueryEventHandler: function _unbindNonQueryEventHandler(a, b) {\n        var c = this.eventToCallbackMap[a];\n        if (void 0 !== c) for (var d = 0; d < c.length; d++) if (c[d] === b) {\n          c.splice(d, 1);\n          break;\n        }\n      },\n      _cleanUpEventCallbacksMap: function _cleanUpEventCallbacksMap() {\n        for (var a = Object.keys(this.eventToCallbackMap), b = 0; b < a.length; b++) {\n          var c = a[b];\n          delete this.eventToCallbackMap[c];\n        }\n      },\n      _showTooltip: function _showTooltip() {\n        this.options.tooltip_split === !1 ? (this._addClass(this.tooltip, \"show\"), this.tooltip_min.style.display = \"none\", this.tooltip_max.style.display = \"none\") : (this._addClass(this.tooltip_min, \"show\"), this._addClass(this.tooltip_max, \"show\"), this.tooltip.style.display = \"none\"), this._state.over = !0;\n      },\n      _hideTooltip: function _hideTooltip() {\n        this._state.inDrag === !1 && this._alwaysShowTooltip !== !0 && (this._removeClass(this.tooltip, \"show\"), this._removeClass(this.tooltip_min, \"show\"), this._removeClass(this.tooltip_max, \"show\")), this._state.over = !1;\n      },\n      _setToolTipOnMouseOver: function _setToolTipOnMouseOver(a) {\n        function b(a, b) {\n          return b ? [100 - a.percentage[0], c.options.range ? 100 - a.percentage[1] : a.percentage[1]] : [a.percentage[0], a.percentage[1]];\n        }\n        var c = this,\n          d = this.options.formatter(a ? a.value[0] : this._state.value[0]),\n          e = a ? b(a, this.options.reversed) : b(this._state, this.options.reversed);\n        this._setText(this.tooltipInner, d), this.tooltip.style[this.stylePos] = e[0] + \"%\";\n      },\n      _copyState: function _copyState() {\n        return {\n          value: [this._state.value[0], this._state.value[1]],\n          enabled: this._state.enabled,\n          offset: this._state.offset,\n          size: this._state.size,\n          percentage: [this._state.percentage[0], this._state.percentage[1], this._state.percentage[2]],\n          inDrag: this._state.inDrag,\n          over: this._state.over,\n          dragged: this._state.dragged,\n          keyCtrl: this._state.keyCtrl\n        };\n      },\n      _addTickListener: function _addTickListener() {\n        return {\n          addMouseEnter: function addMouseEnter(a, b, c) {\n            var d = function d() {\n              var d = a._copyState(),\n                e = b === a.handle1 ? d.value[0] : d.value[1],\n                f = void 0;\n              void 0 !== c ? (e = a.options.ticks[c], f = a.options.ticks_positions.length > 0 && a.options.ticks_positions[c] || a._toPercentage(a.options.ticks[c])) : f = a._toPercentage(e), d.value[0] = e, d.percentage[0] = f, a._setToolTipOnMouseOver(d), a._showTooltip();\n            };\n            return b.addEventListener(\"mouseenter\", d, !1), d;\n          },\n          addMouseLeave: function addMouseLeave(a, b) {\n            var c = function c() {\n              a._hideTooltip();\n            };\n            return b.addEventListener(\"mouseleave\", c, !1), c;\n          }\n        };\n      },\n      _layout: function _layout() {\n        var a, b;\n        if (a = this.options.reversed ? [100 - this._state.percentage[0], this.options.range ? 100 - this._state.percentage[1] : this._state.percentage[1]] : [this._state.percentage[0], this._state.percentage[1]], this.handle1.style[this.stylePos] = a[0] + \"%\", this.handle1.setAttribute(\"aria-valuenow\", this._state.value[0]), b = this.options.formatter(this._state.value[0]), isNaN(b) ? this.handle1.setAttribute(\"aria-valuetext\", b) : this.handle1.removeAttribute(\"aria-valuetext\"), this.handle2.style[this.stylePos] = a[1] + \"%\", this.handle2.setAttribute(\"aria-valuenow\", this._state.value[1]), b = this.options.formatter(this._state.value[1]), isNaN(b) ? this.handle2.setAttribute(\"aria-valuetext\", b) : this.handle2.removeAttribute(\"aria-valuetext\"), this.rangeHighlightElements.length > 0 && Array.isArray(this.options.rangeHighlights) && this.options.rangeHighlights.length > 0) for (var c = 0; c < this.options.rangeHighlights.length; c++) {\n          var d = this._toPercentage(this.options.rangeHighlights[c].start),\n            e = this._toPercentage(this.options.rangeHighlights[c].end);\n          if (this.options.reversed) {\n            var f = 100 - e;\n            e = 100 - d, d = f;\n          }\n          var g = this._createHighlightRange(d, e);\n          g ? \"vertical\" === this.options.orientation ? (this.rangeHighlightElements[c].style.top = g.start + \"%\", this.rangeHighlightElements[c].style.height = g.size + \"%\") : (this.options.rtl ? this.rangeHighlightElements[c].style.right = g.start + \"%\" : this.rangeHighlightElements[c].style.left = g.start + \"%\", this.rangeHighlightElements[c].style.width = g.size + \"%\") : this.rangeHighlightElements[c].style.display = \"none\";\n        }\n        if (Array.isArray(this.options.ticks) && this.options.ticks.length > 0) {\n          var h,\n            i = \"vertical\" === this.options.orientation ? \"height\" : \"width\";\n          h = \"vertical\" === this.options.orientation ? \"marginTop\" : this.options.rtl ? \"marginRight\" : \"marginLeft\";\n          var j = this._state.size / (this.options.ticks.length - 1);\n          if (this.tickLabelContainer) {\n            var k = 0;\n            if (0 === this.options.ticks_positions.length) \"vertical\" !== this.options.orientation && (this.tickLabelContainer.style[h] = -j / 2 + \"px\"), k = this.tickLabelContainer.offsetHeight;else for (l = 0; l < this.tickLabelContainer.childNodes.length; l++) this.tickLabelContainer.childNodes[l].offsetHeight > k && (k = this.tickLabelContainer.childNodes[l].offsetHeight);\n            \"horizontal\" === this.options.orientation && (this.sliderElem.style.marginBottom = k + \"px\");\n          }\n          for (var l = 0; l < this.options.ticks.length; l++) {\n            var m = this.options.ticks_positions[l] || this._toPercentage(this.options.ticks[l]);\n            this.options.reversed && (m = 100 - m), this.ticks[l].style[this.stylePos] = m + \"%\", this._removeClass(this.ticks[l], \"in-selection\"), this.options.range ? m >= a[0] && m <= a[1] && this._addClass(this.ticks[l], \"in-selection\") : \"after\" === this.options.selection && m >= a[0] ? this._addClass(this.ticks[l], \"in-selection\") : \"before\" === this.options.selection && m <= a[0] && this._addClass(this.ticks[l], \"in-selection\"), this.tickLabels[l] && (this.tickLabels[l].style[i] = j + \"px\", \"vertical\" !== this.options.orientation && void 0 !== this.options.ticks_positions[l] ? (this.tickLabels[l].style.position = \"absolute\", this.tickLabels[l].style[this.stylePos] = m + \"%\", this.tickLabels[l].style[h] = -j / 2 + \"px\") : \"vertical\" === this.options.orientation && (this.options.rtl ? this.tickLabels[l].style.marginRight = this.sliderElem.offsetWidth + \"px\" : this.tickLabels[l].style.marginLeft = this.sliderElem.offsetWidth + \"px\", this.tickLabelContainer.style[h] = this.sliderElem.offsetWidth / 2 * -1 + \"px\"), this._removeClass(this.tickLabels[l], \"label-in-selection label-is-selection\"), this.options.range ? m >= a[0] && m <= a[1] && (this._addClass(this.tickLabels[l], \"label-in-selection\"), (m === a[0] || a[1]) && this._addClass(this.tickLabels[l], \"label-is-selection\")) : (\"after\" === this.options.selection && m >= a[0] ? this._addClass(this.tickLabels[l], \"label-in-selection\") : \"before\" === this.options.selection && m <= a[0] && this._addClass(this.tickLabels[l], \"label-in-selection\"), m === a[0] && this._addClass(this.tickLabels[l], \"label-is-selection\")));\n          }\n        }\n        var n;\n        if (this.options.range) {\n          n = this.options.formatter(this._state.value), this._setText(this.tooltipInner, n), this.tooltip.style[this.stylePos] = (a[1] + a[0]) / 2 + \"%\";\n          var o = this.options.formatter(this._state.value[0]);\n          this._setText(this.tooltipInner_min, o);\n          var p = this.options.formatter(this._state.value[1]);\n          this._setText(this.tooltipInner_max, p), this.tooltip_min.style[this.stylePos] = a[0] + \"%\", this.tooltip_max.style[this.stylePos] = a[1] + \"%\";\n        } else n = this.options.formatter(this._state.value[0]), this._setText(this.tooltipInner, n), this.tooltip.style[this.stylePos] = a[0] + \"%\";\n        if (\"vertical\" === this.options.orientation) this.trackLow.style.top = \"0\", this.trackLow.style.height = Math.min(a[0], a[1]) + \"%\", this.trackSelection.style.top = Math.min(a[0], a[1]) + \"%\", this.trackSelection.style.height = Math.abs(a[0] - a[1]) + \"%\", this.trackHigh.style.bottom = \"0\", this.trackHigh.style.height = 100 - Math.min(a[0], a[1]) - Math.abs(a[0] - a[1]) + \"%\";else {\n          \"right\" === this.stylePos ? this.trackLow.style.right = \"0\" : this.trackLow.style.left = \"0\", this.trackLow.style.width = Math.min(a[0], a[1]) + \"%\", \"right\" === this.stylePos ? this.trackSelection.style.right = Math.min(a[0], a[1]) + \"%\" : this.trackSelection.style.left = Math.min(a[0], a[1]) + \"%\", this.trackSelection.style.width = Math.abs(a[0] - a[1]) + \"%\", \"right\" === this.stylePos ? this.trackHigh.style.left = \"0\" : this.trackHigh.style.right = \"0\", this.trackHigh.style.width = 100 - Math.min(a[0], a[1]) - Math.abs(a[0] - a[1]) + \"%\";\n          var q = this.tooltip_min.getBoundingClientRect(),\n            r = this.tooltip_max.getBoundingClientRect();\n          \"bottom\" === this.options.tooltip_position ? q.right > r.left ? (this._removeClass(this.tooltip_max, \"bs-tooltip-bottom\"), this._addClass(this.tooltip_max, \"bs-tooltip-top\"), this.tooltip_max.style.top = \"\", this.tooltip_max.style.bottom = \"22px\") : (this._removeClass(this.tooltip_max, \"bs-tooltip-top\"), this._addClass(this.tooltip_max, \"bs-tooltip-bottom\"), this.tooltip_max.style.top = this.tooltip_min.style.top, this.tooltip_max.style.bottom = \"\") : q.right > r.left ? (this._removeClass(this.tooltip_max, \"bs-tooltip-top\"), this._addClass(this.tooltip_max, \"bs-tooltip-bottom\"), this.tooltip_max.style.top = \"18px\") : (this._removeClass(this.tooltip_max, \"bs-tooltip-bottom\"), this._addClass(this.tooltip_max, \"bs-tooltip-top\"), this.tooltip_max.style.top = this.tooltip_min.style.top);\n        }\n      },\n      _createHighlightRange: function _createHighlightRange(a, b) {\n        return this._isHighlightRange(a, b) ? a > b ? {\n          start: b,\n          size: a - b\n        } : {\n          start: a,\n          size: b - a\n        } : null;\n      },\n      _isHighlightRange: function _isHighlightRange(a, b) {\n        return a >= 0 && 100 >= a && b >= 0 && 100 >= b ? !0 : !1;\n      },\n      _resize: function _resize(a) {\n        this._state.offset = this._offset(this.sliderElem), this._state.size = this.sliderElem[this.sizePos], this._layout();\n      },\n      _removeProperty: function _removeProperty(a, b) {\n        a.style.removeProperty ? a.style.removeProperty(b) : a.style.removeAttribute(b);\n      },\n      _mousedown: function _mousedown(a) {\n        if (!this._state.enabled) return !1;\n        a.preventDefault && a.preventDefault(), this._state.offset = this._offset(this.sliderElem), this._state.size = this.sliderElem[this.sizePos];\n        var b = this._getPercentage(a);\n        if (this.options.range) {\n          var c = Math.abs(this._state.percentage[0] - b),\n            d = Math.abs(this._state.percentage[1] - b);\n          this._state.dragged = d > c ? 0 : 1, this._adjustPercentageForRangeSliders(b);\n        } else this._state.dragged = 0;\n        this._state.percentage[this._state.dragged] = b, this.touchCapable && (document.removeEventListener(\"touchmove\", this.mousemove, !1), document.removeEventListener(\"touchend\", this.mouseup, !1)), this.mousemove && document.removeEventListener(\"mousemove\", this.mousemove, !1), this.mouseup && document.removeEventListener(\"mouseup\", this.mouseup, !1), this.mousemove = this._mousemove.bind(this), this.mouseup = this._mouseup.bind(this), this.touchCapable && (document.addEventListener(\"touchmove\", this.mousemove, !1), document.addEventListener(\"touchend\", this.mouseup, !1)), document.addEventListener(\"mousemove\", this.mousemove, !1), document.addEventListener(\"mouseup\", this.mouseup, !1), this._state.inDrag = !0;\n        var e = this._calculateValue();\n        return this._trigger(\"slideStart\", e), this.setValue(e, !1, !0), a.returnValue = !1, this.options.focus && this._triggerFocusOnHandle(this._state.dragged), !0;\n      },\n      _touchstart: function _touchstart(a) {\n        this._mousedown(a);\n      },\n      _triggerFocusOnHandle: function _triggerFocusOnHandle(a) {\n        0 === a && this.handle1.focus(), 1 === a && this.handle2.focus();\n      },\n      _keydown: function _keydown(a, b) {\n        if (!this._state.enabled) return !1;\n        var c;\n        switch (b.keyCode) {\n          case 37:\n          case 40:\n            c = -1;\n            break;\n          case 39:\n          case 38:\n            c = 1;\n        }\n        if (c) {\n          if (this.options.natural_arrow_keys) {\n            var d = \"horizontal\" === this.options.orientation,\n              e = \"vertical\" === this.options.orientation,\n              f = this.options.rtl,\n              g = this.options.reversed;\n            d ? f ? g || (c = -c) : g && (c = -c) : e && (g || (c = -c));\n          }\n          var h;\n          if (this.ticksAreValid && this.options.lock_to_ticks) {\n            var i = void 0;\n            i = this.options.ticks.indexOf(this._state.value[a]), -1 === i && (i = 0, window.console.warn(\"(lock_to_ticks) _keydown: index should not be -1\")), i += c, i = Math.max(0, Math.min(this.options.ticks.length - 1, i)), h = this.options.ticks[i];\n          } else h = this._state.value[a] + c * this.options.step;\n          var j = this._toPercentage(h);\n          if (this._state.keyCtrl = a, this.options.range) {\n            this._adjustPercentageForRangeSliders(j);\n            var k = this._state.keyCtrl ? this._state.value[0] : h,\n              l = this._state.keyCtrl ? h : this._state.value[1];\n            h = [Math.max(this.options.min, Math.min(this.options.max, k)), Math.max(this.options.min, Math.min(this.options.max, l))];\n          } else h = Math.max(this.options.min, Math.min(this.options.max, h));\n          return this._trigger(\"slideStart\", h), this.setValue(h, !0, !0), this._trigger(\"slideStop\", h), this._pauseEvent(b), delete this._state.keyCtrl, !1;\n        }\n      },\n      _pauseEvent: function _pauseEvent(a) {\n        a.stopPropagation && a.stopPropagation(), a.preventDefault && a.preventDefault(), a.cancelBubble = !0, a.returnValue = !1;\n      },\n      _mousemove: function _mousemove(a) {\n        if (!this._state.enabled) return !1;\n        var b = this._getPercentage(a);\n        this._adjustPercentageForRangeSliders(b), this._state.percentage[this._state.dragged] = b;\n        var c = this._calculateValue(!0);\n        return this.setValue(c, !0, !0), !1;\n      },\n      _touchmove: function _touchmove(a) {\n        void 0 !== a.changedTouches && a.preventDefault && a.preventDefault();\n      },\n      _adjustPercentageForRangeSliders: function _adjustPercentageForRangeSliders(a) {\n        if (this.options.range) {\n          var b = this._getNumDigitsAfterDecimalPlace(a);\n          b = b ? b - 1 : 0;\n          var c = this._applyToFixedAndParseFloat(a, b);\n          0 === this._state.dragged && this._applyToFixedAndParseFloat(this._state.percentage[1], b) < c ? (this._state.percentage[0] = this._state.percentage[1], this._state.dragged = 1) : 1 === this._state.dragged && this._applyToFixedAndParseFloat(this._state.percentage[0], b) > c ? (this._state.percentage[1] = this._state.percentage[0], this._state.dragged = 0) : 0 === this._state.keyCtrl && this._toPercentage(this._state.value[1]) < a ? (this._state.percentage[0] = this._state.percentage[1], this._state.keyCtrl = 1, this.handle2.focus()) : 1 === this._state.keyCtrl && this._toPercentage(this._state.value[0]) > a && (this._state.percentage[1] = this._state.percentage[0], this._state.keyCtrl = 0, this.handle1.focus());\n        }\n      },\n      _mouseup: function _mouseup(a) {\n        if (!this._state.enabled) return !1;\n        var b = this._getPercentage(a);\n        this._adjustPercentageForRangeSliders(b), this._state.percentage[this._state.dragged] = b, this.touchCapable && (document.removeEventListener(\"touchmove\", this.mousemove, !1), document.removeEventListener(\"touchend\", this.mouseup, !1)), document.removeEventListener(\"mousemove\", this.mousemove, !1), document.removeEventListener(\"mouseup\", this.mouseup, !1), this._state.inDrag = !1, this._state.over === !1 && this._hideTooltip();\n        var c = this._calculateValue(!0);\n        return this.setValue(c, !1, !0), this._trigger(\"slideStop\", c), this._state.dragged = null, !1;\n      },\n      _setValues: function _setValues(a, b) {\n        var c = 0 === a ? 0 : 100;\n        this._state.percentage[a] !== c && (b.data[a] = this._toValue(this._state.percentage[a]), b.data[a] = this._applyPrecision(b.data[a]));\n      },\n      _calculateValue: function _calculateValue(a) {\n        var b = {};\n        return this.options.range ? (b.data = [this.options.min, this.options.max], this._setValues(0, b), this._setValues(1, b), a && (b.data[0] = this._snapToClosestTick(b.data[0]), b.data[1] = this._snapToClosestTick(b.data[1]))) : (b.data = this._toValue(this._state.percentage[0]), b.data = parseFloat(b.data), b.data = this._applyPrecision(b.data), a && (b.data = this._snapToClosestTick(b.data))), b.data;\n      },\n      _snapToClosestTick: function _snapToClosestTick(a) {\n        for (var b = [a, 1 / 0], c = 0; c < this.options.ticks.length; c++) {\n          var d = Math.abs(this.options.ticks[c] - a);\n          d <= b[1] && (b = [this.options.ticks[c], d]);\n        }\n        return b[1] <= this.options.ticks_snap_bounds ? b[0] : a;\n      },\n      _applyPrecision: function _applyPrecision(a) {\n        var b = this.options.precision || this._getNumDigitsAfterDecimalPlace(this.options.step);\n        return this._applyToFixedAndParseFloat(a, b);\n      },\n      _getNumDigitsAfterDecimalPlace: function _getNumDigitsAfterDecimalPlace(a) {\n        var b = (\"\" + a).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n        return b ? Math.max(0, (b[1] ? b[1].length : 0) - (b[2] ? +b[2] : 0)) : 0;\n      },\n      _applyToFixedAndParseFloat: function _applyToFixedAndParseFloat(a, b) {\n        var c = a.toFixed(b);\n        return parseFloat(c);\n      },\n      _getPercentage: function _getPercentage(a) {\n        !this.touchCapable || \"touchstart\" !== a.type && \"touchmove\" !== a.type && \"touchend\" !== a.type || (a = a.changedTouches[0]);\n        var b = a[this.mousePos],\n          c = this._state.offset[this.stylePos],\n          d = b - c;\n        \"right\" === this.stylePos && (d = -d);\n        var e = d / this._state.size * 100;\n        return e = Math.round(e / this._state.percentage[2]) * this._state.percentage[2], this.options.reversed && (e = 100 - e), Math.max(0, Math.min(100, e));\n      },\n      _validateInputValue: function _validateInputValue(a) {\n        if (isNaN(+a)) {\n          if (Array.isArray(a)) return this._validateArray(a), a;\n          throw new Error(g.formatInvalidInputErrorMsg(a));\n        }\n        return +a;\n      },\n      _validateArray: function _validateArray(a) {\n        for (var b = 0; b < a.length; b++) {\n          var c = a[b];\n          if (\"number\" != typeof c) throw new Error(g.formatInvalidInputErrorMsg(c));\n        }\n      },\n      _setDataVal: function _setDataVal(a) {\n        this.element.setAttribute(\"data-value\", a), this.element.setAttribute(\"value\", a), this.element.value = a;\n      },\n      _trigger: function _trigger(b, c) {\n        c = c || 0 === c ? c : void 0;\n        var d = this.eventToCallbackMap[b];\n        if (d && d.length) for (var e = 0; e < d.length; e++) {\n          var f = d[e];\n          f(c);\n        }\n        a && this._triggerJQueryEvent(b, c);\n      },\n      _triggerJQueryEvent: function _triggerJQueryEvent(a, b) {\n        var c = {\n          type: a,\n          value: b\n        };\n        this.$element.trigger(c), this.$sliderElem.trigger(c);\n      },\n      _unbindJQueryEventHandlers: function _unbindJQueryEventHandlers() {\n        this.$element.off(), this.$sliderElem.off();\n      },\n      _setText: function _setText(a, b) {\n        \"undefined\" != typeof a.textContent ? a.textContent = b : \"undefined\" != typeof a.innerText && (a.innerText = b);\n      },\n      _removeClass: function _removeClass(a, b) {\n        for (var c = b.split(\" \"), d = a.className, e = 0; e < c.length; e++) {\n          var f = c[e],\n            g = new RegExp(\"(?:\\\\s|^)\" + f + \"(?:\\\\s|$)\");\n          d = d.replace(g, \" \");\n        }\n        a.className = d.trim();\n      },\n      _addClass: function _addClass(a, b) {\n        for (var c = b.split(\" \"), d = a.className, e = 0; e < c.length; e++) {\n          var f = c[e],\n            g = new RegExp(\"(?:\\\\s|^)\" + f + \"(?:\\\\s|$)\"),\n            h = g.test(d);\n          h || (d += \" \" + f);\n        }\n        a.className = d.trim();\n      },\n      _offsetLeft: function _offsetLeft(a) {\n        return a.getBoundingClientRect().left;\n      },\n      _offsetRight: function _offsetRight(a) {\n        return a.getBoundingClientRect().right;\n      },\n      _offsetTop: function _offsetTop(a) {\n        for (var b = a.offsetTop; (a = a.offsetParent) && !isNaN(a.offsetTop);) b += a.offsetTop, \"BODY\" !== a.tagName && (b -= a.scrollTop);\n        return b;\n      },\n      _offset: function _offset(a) {\n        return {\n          left: this._offsetLeft(a),\n          right: this._offsetRight(a),\n          top: this._offsetTop(a)\n        };\n      },\n      _css: function _css(b, c, d) {\n        if (a) a.style(b, c, d);else {\n          var e = c.replace(/^-ms-/, \"ms-\").replace(/-([\\da-z])/gi, function (a, b) {\n            return b.toUpperCase();\n          });\n          b.style[e] = d;\n        }\n      },\n      _toValue: function _toValue(a) {\n        return this.options.scale.toValue.apply(this, [a]);\n      },\n      _toPercentage: function _toPercentage(a) {\n        return this.options.scale.toPercentage.apply(this, [a]);\n      },\n      _setTooltipPosition: function _setTooltipPosition() {\n        var a = [this.tooltip, this.tooltip_min, this.tooltip_max];\n        if (\"vertical\" === this.options.orientation) {\n          var b;\n          b = this.options.tooltip_position ? this.options.tooltip_position : this.options.rtl ? \"left\" : \"right\";\n          var c = \"left\" === b ? \"right\" : \"left\";\n          a.forEach(function (a) {\n            this._addClass(a, \"bs-tooltip-\" + b), a.style[c] = \"100%\";\n          }.bind(this));\n        } else \"bottom\" === this.options.tooltip_position ? a.forEach(function (a) {\n          this._addClass(a, \"bs-tooltip-bottom\"), a.style.top = \"22px\";\n        }.bind(this)) : a.forEach(function (a) {\n          this._addClass(a, \"bs-tooltip-top\"), a.style.top = -this.tooltip.outerHeight - 14 + \"px\";\n        }.bind(this));\n      },\n      _getClosestTickIndex: function _getClosestTickIndex(a) {\n        for (var b = Math.abs(a - this.options.ticks[0]), c = 0, d = 0; d < this.options.ticks.length; ++d) {\n          var e = Math.abs(a - this.options.ticks[d]);\n          b > e && (b = e, c = d);\n        }\n        return c;\n      },\n      _setTickIndex: function _setTickIndex() {\n        this.ticksAreValid && (this._state.tickIndex = [this.options.ticks.indexOf(this._state.value[0]), this.options.ticks.indexOf(this._state.value[1])]);\n      }\n    }, a && a.fn && (a.fn.slider ? (windowIsDefined && window.console.warn(\"bootstrap-slider.js - WARNING: $.fn.slider namespace is already bound. Use the $.fn.bootstrapSlider namespace instead.\"), f = c) : (a.bridget(b, d), f = b), a.bridget(c, d), a(function () {\n      a(\"input[data-provide=slider]\")[f]();\n    }));\n  }(a), d;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/plugins/bootstrap-slider/bootstrap-slider.min.js\n");

/***/ }),

/***/ "./resources/plugins/select2/js/select2.full.min.js":
/*!**********************************************************!*\
  !*** ./resources/plugins/select2/js/select2.full.min.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/*! Select2 4.0.13 | https://github.com/select2/select2/blob/master/LICENSE.md */\n!function (n) {\n  \"function\" == typeof define && define.amd ? define([\"jquery\"], n) : \"object\" == (typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) && module.exports ? module.exports = function (e, t) {\n    return void 0 === t && (t = \"undefined\" != typeof window ? require(\"jquery\") : require(\"jquery\")(e)), n(t), t;\n  } : n(jQuery);\n}(function (d) {\n  var e = function () {\n      if (d && d.fn && d.fn.select2 && d.fn.select2.amd) var e = d.fn.select2.amd;\n      var t, n, i, h, o, _s, f, g, m, v, y, _, r, a, w, l;\n      function b(e, t) {\n        return r.call(e, t);\n      }\n      function c(e, t) {\n        var n,\n          i,\n          r,\n          o,\n          s,\n          a,\n          l,\n          c,\n          u,\n          d,\n          p,\n          h = t && t.split(\"/\"),\n          f = y.map,\n          g = f && f[\"*\"] || {};\n        if (e) {\n          for (s = (e = e.split(\"/\")).length - 1, y.nodeIdCompat && w.test(e[s]) && (e[s] = e[s].replace(w, \"\")), \".\" === e[0].charAt(0) && h && (e = h.slice(0, h.length - 1).concat(e)), u = 0; u < e.length; u++) if (\".\" === (p = e[u])) e.splice(u, 1), --u;else if (\"..\" === p) {\n            if (0 === u || 1 === u && \"..\" === e[2] || \"..\" === e[u - 1]) continue;\n            0 < u && (e.splice(u - 1, 2), u -= 2);\n          }\n          e = e.join(\"/\");\n        }\n        if ((h || g) && f) {\n          for (u = (n = e.split(\"/\")).length; 0 < u; --u) {\n            if (i = n.slice(0, u).join(\"/\"), h) for (d = h.length; 0 < d; --d) if (r = (r = f[h.slice(0, d).join(\"/\")]) && r[i]) {\n              o = r, a = u;\n              break;\n            }\n            if (o) break;\n            !l && g && g[i] && (l = g[i], c = u);\n          }\n          !o && l && (o = l, a = c), o && (n.splice(0, a, o), e = n.join(\"/\"));\n        }\n        return e;\n      }\n      function A(t, n) {\n        return function () {\n          var e = a.call(arguments, 0);\n          return \"string\" != typeof e[0] && 1 === e.length && e.push(null), _s.apply(h, e.concat([t, n]));\n        };\n      }\n      function x(t) {\n        return function (e) {\n          m[t] = e;\n        };\n      }\n      function D(e) {\n        if (b(v, e)) {\n          var t = v[e];\n          delete v[e], _[e] = !0, o.apply(h, t);\n        }\n        if (!b(m, e) && !b(_, e)) throw new Error(\"No \" + e);\n        return m[e];\n      }\n      function u(e) {\n        var t,\n          n = e ? e.indexOf(\"!\") : -1;\n        return -1 < n && (t = e.substring(0, n), e = e.substring(n + 1, e.length)), [t, e];\n      }\n      function S(e) {\n        return e ? u(e) : [];\n      }\n      return e && e.requirejs || (e ? n = e : e = {}, m = {}, v = {}, y = {}, _ = {}, r = Object.prototype.hasOwnProperty, a = [].slice, w = /\\.js$/, f = function f(e, t) {\n        var n,\n          i,\n          r = u(e),\n          o = r[0],\n          s = t[1];\n        return e = r[1], o && (n = D(o = c(o, s))), o ? e = n && n.normalize ? n.normalize(e, (i = s, function (e) {\n          return c(e, i);\n        })) : c(e, s) : (o = (r = u(e = c(e, s)))[0], e = r[1], o && (n = D(o))), {\n          f: o ? o + \"!\" + e : e,\n          n: e,\n          pr: o,\n          p: n\n        };\n      }, g = {\n        require: function require(e) {\n          return A(e);\n        },\n        exports: function exports(e) {\n          var t = m[e];\n          return void 0 !== t ? t : m[e] = {};\n        },\n        module: function module(e) {\n          return {\n            id: e,\n            uri: \"\",\n            exports: m[e],\n            config: (t = e, function () {\n              return y && y.config && y.config[t] || {};\n            })\n          };\n          var t;\n        }\n      }, o = function o(e, t, n, i) {\n        var r,\n          o,\n          s,\n          a,\n          l,\n          c,\n          u,\n          d = [],\n          p = _typeof(n);\n        if (c = S(i = i || e), \"undefined\" == p || \"function\" == p) {\n          for (t = !t.length && n.length ? [\"require\", \"exports\", \"module\"] : t, l = 0; l < t.length; l += 1) if (\"require\" === (o = (a = f(t[l], c)).f)) d[l] = g.require(e);else if (\"exports\" === o) d[l] = g.exports(e), u = !0;else if (\"module\" === o) r = d[l] = g.module(e);else if (b(m, o) || b(v, o) || b(_, o)) d[l] = D(o);else {\n            if (!a.p) throw new Error(e + \" missing \" + o);\n            a.p.load(a.n, A(i, !0), x(o), {}), d[l] = m[o];\n          }\n          s = n ? n.apply(m[e], d) : void 0, e && (r && r.exports !== h && r.exports !== m[e] ? m[e] = r.exports : s === h && u || (m[e] = s));\n        } else e && (m[e] = n);\n      }, t = n = _s = function s(e, t, n, i, r) {\n        if (\"string\" == typeof e) return g[e] ? g[e](t) : D(f(e, S(t)).f);\n        if (!e.splice) {\n          if ((y = e).deps && _s(y.deps, y.callback), !t) return;\n          t.splice ? (e = t, t = n, n = null) : e = h;\n        }\n        return t = t || function () {}, \"function\" == typeof n && (n = i, i = r), i ? o(h, e, t, n) : setTimeout(function () {\n          o(h, e, t, n);\n        }, 4), _s;\n      }, _s.config = function (e) {\n        return _s(e);\n      }, t._defined = m, (i = function i(e, t, n) {\n        if (\"string\" != typeof e) throw new Error(\"See almond README: incorrect module build, no module name\");\n        t.splice || (n = t, t = []), b(m, e) || b(v, e) || (v[e] = [e, t, n]);\n      }).amd = {\n        jQuery: !0\n      }, e.requirejs = t, e.require = n, e.define = i), e.define(\"almond\", function () {}), e.define(\"jquery\", [], function () {\n        var e = d || $;\n        return null == e && console && console.error && console.error(\"Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page.\"), e;\n      }), e.define(\"select2/utils\", [\"jquery\"], function (o) {\n        var r = {};\n        function u(e) {\n          var t = e.prototype,\n            n = [];\n          for (var i in t) {\n            \"function\" == typeof t[i] && \"constructor\" !== i && n.push(i);\n          }\n          return n;\n        }\n        r.Extend = function (e, t) {\n          var n = {}.hasOwnProperty;\n          function i() {\n            this.constructor = e;\n          }\n          for (var r in t) n.call(t, r) && (e[r] = t[r]);\n          return i.prototype = t.prototype, e.prototype = new i(), e.__super__ = t.prototype, e;\n        }, r.Decorate = function (i, r) {\n          var e = u(r),\n            t = u(i);\n          function o() {\n            var e = Array.prototype.unshift,\n              t = r.prototype.constructor.length,\n              n = i.prototype.constructor;\n            0 < t && (e.call(arguments, i.prototype.constructor), n = r.prototype.constructor), n.apply(this, arguments);\n          }\n          r.displayName = i.displayName, o.prototype = new function () {\n            this.constructor = o;\n          }();\n          for (var n = 0; n < t.length; n++) {\n            var s = t[n];\n            o.prototype[s] = i.prototype[s];\n          }\n          function a(e) {\n            var t = function t() {};\n            e in o.prototype && (t = o.prototype[e]);\n            var n = r.prototype[e];\n            return function () {\n              return Array.prototype.unshift.call(arguments, t), n.apply(this, arguments);\n            };\n          }\n          for (var l = 0; l < e.length; l++) {\n            var c = e[l];\n            o.prototype[c] = a(c);\n          }\n          return o;\n        };\n        function e() {\n          this.listeners = {};\n        }\n        e.prototype.on = function (e, t) {\n          this.listeners = this.listeners || {}, e in this.listeners ? this.listeners[e].push(t) : this.listeners[e] = [t];\n        }, e.prototype.trigger = function (e) {\n          var t = Array.prototype.slice,\n            n = t.call(arguments, 1);\n          this.listeners = this.listeners || {}, null == n && (n = []), 0 === n.length && n.push({}), (n[0]._type = e) in this.listeners && this.invoke(this.listeners[e], t.call(arguments, 1)), \"*\" in this.listeners && this.invoke(this.listeners[\"*\"], arguments);\n        }, e.prototype.invoke = function (e, t) {\n          for (var n = 0, i = e.length; n < i; n++) e[n].apply(this, t);\n        }, r.Observable = e, r.generateChars = function (e) {\n          for (var t = \"\", n = 0; n < e; n++) {\n            t += Math.floor(36 * Math.random()).toString(36);\n          }\n          return t;\n        }, r.bind = function (e, t) {\n          return function () {\n            e.apply(t, arguments);\n          };\n        }, r._convertData = function (e) {\n          for (var t in e) {\n            var n = t.split(\"-\"),\n              i = e;\n            if (1 !== n.length) {\n              for (var r = 0; r < n.length; r++) {\n                var o = n[r];\n                (o = o.substring(0, 1).toLowerCase() + o.substring(1)) in i || (i[o] = {}), r == n.length - 1 && (i[o] = e[t]), i = i[o];\n              }\n              delete e[t];\n            }\n          }\n          return e;\n        }, r.hasScroll = function (e, t) {\n          var n = o(t),\n            i = t.style.overflowX,\n            r = t.style.overflowY;\n          return (i !== r || \"hidden\" !== r && \"visible\" !== r) && (\"scroll\" === i || \"scroll\" === r || n.innerHeight() < t.scrollHeight || n.innerWidth() < t.scrollWidth);\n        }, r.escapeMarkup = function (e) {\n          var t = {\n            \"\\\\\": \"&#92;\",\n            \"&\": \"&amp;\",\n            \"<\": \"&lt;\",\n            \">\": \"&gt;\",\n            '\"': \"&quot;\",\n            \"'\": \"&#39;\",\n            \"/\": \"&#47;\"\n          };\n          return \"string\" != typeof e ? e : String(e).replace(/[&<>\"'\\/\\\\]/g, function (e) {\n            return t[e];\n          });\n        }, r.appendMany = function (e, t) {\n          if (\"1.7\" === o.fn.jquery.substr(0, 3)) {\n            var n = o();\n            o.map(t, function (e) {\n              n = n.add(e);\n            }), t = n;\n          }\n          e.append(t);\n        }, r.__cache = {};\n        var n = 0;\n        return r.GetUniqueElementId = function (e) {\n          var t = e.getAttribute(\"data-select2-id\");\n          return null == t && (e.id ? (t = e.id, e.setAttribute(\"data-select2-id\", t)) : (e.setAttribute(\"data-select2-id\", ++n), t = n.toString())), t;\n        }, r.StoreData = function (e, t, n) {\n          var i = r.GetUniqueElementId(e);\n          r.__cache[i] || (r.__cache[i] = {}), r.__cache[i][t] = n;\n        }, r.GetData = function (e, t) {\n          var n = r.GetUniqueElementId(e);\n          return t ? r.__cache[n] && null != r.__cache[n][t] ? r.__cache[n][t] : o(e).data(t) : r.__cache[n];\n        }, r.RemoveData = function (e) {\n          var t = r.GetUniqueElementId(e);\n          null != r.__cache[t] && delete r.__cache[t], e.removeAttribute(\"data-select2-id\");\n        }, r;\n      }), e.define(\"select2/results\", [\"jquery\", \"./utils\"], function (h, f) {\n        function i(e, t, n) {\n          this.$element = e, this.data = n, this.options = t, i.__super__.constructor.call(this);\n        }\n        return f.Extend(i, f.Observable), i.prototype.render = function () {\n          var e = h('<ul class=\"select2-results__options\" role=\"listbox\"></ul>');\n          return this.options.get(\"multiple\") && e.attr(\"aria-multiselectable\", \"true\"), this.$results = e;\n        }, i.prototype.clear = function () {\n          this.$results.empty();\n        }, i.prototype.displayMessage = function (e) {\n          var t = this.options.get(\"escapeMarkup\");\n          this.clear(), this.hideLoading();\n          var n = h('<li role=\"alert\" aria-live=\"assertive\" class=\"select2-results__option\"></li>'),\n            i = this.options.get(\"translations\").get(e.message);\n          n.append(t(i(e.args))), n[0].className += \" select2-results__message\", this.$results.append(n);\n        }, i.prototype.hideMessages = function () {\n          this.$results.find(\".select2-results__message\").remove();\n        }, i.prototype.append = function (e) {\n          this.hideLoading();\n          var t = [];\n          if (null != e.results && 0 !== e.results.length) {\n            e.results = this.sort(e.results);\n            for (var n = 0; n < e.results.length; n++) {\n              var i = e.results[n],\n                r = this.option(i);\n              t.push(r);\n            }\n            this.$results.append(t);\n          } else 0 === this.$results.children().length && this.trigger(\"results:message\", {\n            message: \"noResults\"\n          });\n        }, i.prototype.position = function (e, t) {\n          t.find(\".select2-results\").append(e);\n        }, i.prototype.sort = function (e) {\n          return this.options.get(\"sorter\")(e);\n        }, i.prototype.highlightFirstItem = function () {\n          var e = this.$results.find(\".select2-results__option[aria-selected]\"),\n            t = e.filter(\"[aria-selected=true]\");\n          0 < t.length ? t.first().trigger(\"mouseenter\") : e.first().trigger(\"mouseenter\"), this.ensureHighlightVisible();\n        }, i.prototype.setClasses = function () {\n          var t = this;\n          this.data.current(function (e) {\n            var i = h.map(e, function (e) {\n              return e.id.toString();\n            });\n            t.$results.find(\".select2-results__option[aria-selected]\").each(function () {\n              var e = h(this),\n                t = f.GetData(this, \"data\"),\n                n = \"\" + t.id;\n              null != t.element && t.element.selected || null == t.element && -1 < h.inArray(n, i) ? e.attr(\"aria-selected\", \"true\") : e.attr(\"aria-selected\", \"false\");\n            });\n          });\n        }, i.prototype.showLoading = function (e) {\n          this.hideLoading();\n          var t = {\n              disabled: !0,\n              loading: !0,\n              text: this.options.get(\"translations\").get(\"searching\")(e)\n            },\n            n = this.option(t);\n          n.className += \" loading-results\", this.$results.prepend(n);\n        }, i.prototype.hideLoading = function () {\n          this.$results.find(\".loading-results\").remove();\n        }, i.prototype.option = function (e) {\n          var t = document.createElement(\"li\");\n          t.className = \"select2-results__option\";\n          var n = {\n              role: \"option\",\n              \"aria-selected\": \"false\"\n            },\n            i = window.Element.prototype.matches || window.Element.prototype.msMatchesSelector || window.Element.prototype.webkitMatchesSelector;\n          for (var r in (null != e.element && i.call(e.element, \":disabled\") || null == e.element && e.disabled) && (delete n[\"aria-selected\"], n[\"aria-disabled\"] = \"true\"), null == e.id && delete n[\"aria-selected\"], null != e._resultId && (t.id = e._resultId), e.title && (t.title = e.title), e.children && (n.role = \"group\", n[\"aria-label\"] = e.text, delete n[\"aria-selected\"]), n) {\n            var o = n[r];\n            t.setAttribute(r, o);\n          }\n          if (e.children) {\n            var s = h(t),\n              a = document.createElement(\"strong\");\n            a.className = \"select2-results__group\";\n            h(a);\n            this.template(e, a);\n            for (var l = [], c = 0; c < e.children.length; c++) {\n              var u = e.children[c],\n                d = this.option(u);\n              l.push(d);\n            }\n            var p = h(\"<ul></ul>\", {\n              \"class\": \"select2-results__options select2-results__options--nested\"\n            });\n            p.append(l), s.append(a), s.append(p);\n          } else this.template(e, t);\n          return f.StoreData(t, \"data\", e), t;\n        }, i.prototype.bind = function (t, e) {\n          var l = this,\n            n = t.id + \"-results\";\n          this.$results.attr(\"id\", n), t.on(\"results:all\", function (e) {\n            l.clear(), l.append(e.data), t.isOpen() && (l.setClasses(), l.highlightFirstItem());\n          }), t.on(\"results:append\", function (e) {\n            l.append(e.data), t.isOpen() && l.setClasses();\n          }), t.on(\"query\", function (e) {\n            l.hideMessages(), l.showLoading(e);\n          }), t.on(\"select\", function () {\n            t.isOpen() && (l.setClasses(), l.options.get(\"scrollAfterSelect\") && l.highlightFirstItem());\n          }), t.on(\"unselect\", function () {\n            t.isOpen() && (l.setClasses(), l.options.get(\"scrollAfterSelect\") && l.highlightFirstItem());\n          }), t.on(\"open\", function () {\n            l.$results.attr(\"aria-expanded\", \"true\"), l.$results.attr(\"aria-hidden\", \"false\"), l.setClasses(), l.ensureHighlightVisible();\n          }), t.on(\"close\", function () {\n            l.$results.attr(\"aria-expanded\", \"false\"), l.$results.attr(\"aria-hidden\", \"true\"), l.$results.removeAttr(\"aria-activedescendant\");\n          }), t.on(\"results:toggle\", function () {\n            var e = l.getHighlightedResults();\n            0 !== e.length && e.trigger(\"mouseup\");\n          }), t.on(\"results:select\", function () {\n            var e = l.getHighlightedResults();\n            if (0 !== e.length) {\n              var t = f.GetData(e[0], \"data\");\n              \"true\" == e.attr(\"aria-selected\") ? l.trigger(\"close\", {}) : l.trigger(\"select\", {\n                data: t\n              });\n            }\n          }), t.on(\"results:previous\", function () {\n            var e = l.getHighlightedResults(),\n              t = l.$results.find(\"[aria-selected]\"),\n              n = t.index(e);\n            if (!(n <= 0)) {\n              var i = n - 1;\n              0 === e.length && (i = 0);\n              var r = t.eq(i);\n              r.trigger(\"mouseenter\");\n              var o = l.$results.offset().top,\n                s = r.offset().top,\n                a = l.$results.scrollTop() + (s - o);\n              0 === i ? l.$results.scrollTop(0) : s - o < 0 && l.$results.scrollTop(a);\n            }\n          }), t.on(\"results:next\", function () {\n            var e = l.getHighlightedResults(),\n              t = l.$results.find(\"[aria-selected]\"),\n              n = t.index(e) + 1;\n            if (!(n >= t.length)) {\n              var i = t.eq(n);\n              i.trigger(\"mouseenter\");\n              var r = l.$results.offset().top + l.$results.outerHeight(!1),\n                o = i.offset().top + i.outerHeight(!1),\n                s = l.$results.scrollTop() + o - r;\n              0 === n ? l.$results.scrollTop(0) : r < o && l.$results.scrollTop(s);\n            }\n          }), t.on(\"results:focus\", function (e) {\n            e.element.addClass(\"select2-results__option--highlighted\");\n          }), t.on(\"results:message\", function (e) {\n            l.displayMessage(e);\n          }), h.fn.mousewheel && this.$results.on(\"mousewheel\", function (e) {\n            var t = l.$results.scrollTop(),\n              n = l.$results.get(0).scrollHeight - t + e.deltaY,\n              i = 0 < e.deltaY && t - e.deltaY <= 0,\n              r = e.deltaY < 0 && n <= l.$results.height();\n            i ? (l.$results.scrollTop(0), e.preventDefault(), e.stopPropagation()) : r && (l.$results.scrollTop(l.$results.get(0).scrollHeight - l.$results.height()), e.preventDefault(), e.stopPropagation());\n          }), this.$results.on(\"mouseup\", \".select2-results__option[aria-selected]\", function (e) {\n            var t = h(this),\n              n = f.GetData(this, \"data\");\n            \"true\" !== t.attr(\"aria-selected\") ? l.trigger(\"select\", {\n              originalEvent: e,\n              data: n\n            }) : l.options.get(\"multiple\") ? l.trigger(\"unselect\", {\n              originalEvent: e,\n              data: n\n            }) : l.trigger(\"close\", {});\n          }), this.$results.on(\"mouseenter\", \".select2-results__option[aria-selected]\", function (e) {\n            var t = f.GetData(this, \"data\");\n            l.getHighlightedResults().removeClass(\"select2-results__option--highlighted\"), l.trigger(\"results:focus\", {\n              data: t,\n              element: h(this)\n            });\n          });\n        }, i.prototype.getHighlightedResults = function () {\n          return this.$results.find(\".select2-results__option--highlighted\");\n        }, i.prototype.destroy = function () {\n          this.$results.remove();\n        }, i.prototype.ensureHighlightVisible = function () {\n          var e = this.getHighlightedResults();\n          if (0 !== e.length) {\n            var t = this.$results.find(\"[aria-selected]\").index(e),\n              n = this.$results.offset().top,\n              i = e.offset().top,\n              r = this.$results.scrollTop() + (i - n),\n              o = i - n;\n            r -= 2 * e.outerHeight(!1), t <= 2 ? this.$results.scrollTop(0) : (o > this.$results.outerHeight() || o < 0) && this.$results.scrollTop(r);\n          }\n        }, i.prototype.template = function (e, t) {\n          var n = this.options.get(\"templateResult\"),\n            i = this.options.get(\"escapeMarkup\"),\n            r = n(e, t);\n          null == r ? t.style.display = \"none\" : \"string\" == typeof r ? t.innerHTML = i(r) : h(t).append(r);\n        }, i;\n      }), e.define(\"select2/keys\", [], function () {\n        return {\n          BACKSPACE: 8,\n          TAB: 9,\n          ENTER: 13,\n          SHIFT: 16,\n          CTRL: 17,\n          ALT: 18,\n          ESC: 27,\n          SPACE: 32,\n          PAGE_UP: 33,\n          PAGE_DOWN: 34,\n          END: 35,\n          HOME: 36,\n          LEFT: 37,\n          UP: 38,\n          RIGHT: 39,\n          DOWN: 40,\n          DELETE: 46\n        };\n      }), e.define(\"select2/selection/base\", [\"jquery\", \"../utils\", \"../keys\"], function (n, i, r) {\n        function o(e, t) {\n          this.$element = e, this.options = t, o.__super__.constructor.call(this);\n        }\n        return i.Extend(o, i.Observable), o.prototype.render = function () {\n          var e = n('<span class=\"select2-selection\" role=\"combobox\"  aria-haspopup=\"true\" aria-expanded=\"false\"></span>');\n          return this._tabindex = 0, null != i.GetData(this.$element[0], \"old-tabindex\") ? this._tabindex = i.GetData(this.$element[0], \"old-tabindex\") : null != this.$element.attr(\"tabindex\") && (this._tabindex = this.$element.attr(\"tabindex\")), e.attr(\"title\", this.$element.attr(\"title\")), e.attr(\"tabindex\", this._tabindex), e.attr(\"aria-disabled\", \"false\"), this.$selection = e;\n        }, o.prototype.bind = function (e, t) {\n          var n = this,\n            i = e.id + \"-results\";\n          this.container = e, this.$selection.on(\"focus\", function (e) {\n            n.trigger(\"focus\", e);\n          }), this.$selection.on(\"blur\", function (e) {\n            n._handleBlur(e);\n          }), this.$selection.on(\"keydown\", function (e) {\n            n.trigger(\"keypress\", e), e.which === r.SPACE && e.preventDefault();\n          }), e.on(\"results:focus\", function (e) {\n            n.$selection.attr(\"aria-activedescendant\", e.data._resultId);\n          }), e.on(\"selection:update\", function (e) {\n            n.update(e.data);\n          }), e.on(\"open\", function () {\n            n.$selection.attr(\"aria-expanded\", \"true\"), n.$selection.attr(\"aria-owns\", i), n._attachCloseHandler(e);\n          }), e.on(\"close\", function () {\n            n.$selection.attr(\"aria-expanded\", \"false\"), n.$selection.removeAttr(\"aria-activedescendant\"), n.$selection.removeAttr(\"aria-owns\"), n.$selection.trigger(\"focus\"), n._detachCloseHandler(e);\n          }), e.on(\"enable\", function () {\n            n.$selection.attr(\"tabindex\", n._tabindex), n.$selection.attr(\"aria-disabled\", \"false\");\n          }), e.on(\"disable\", function () {\n            n.$selection.attr(\"tabindex\", \"-1\"), n.$selection.attr(\"aria-disabled\", \"true\");\n          });\n        }, o.prototype._handleBlur = function (e) {\n          var t = this;\n          window.setTimeout(function () {\n            document.activeElement == t.$selection[0] || n.contains(t.$selection[0], document.activeElement) || t.trigger(\"blur\", e);\n          }, 1);\n        }, o.prototype._attachCloseHandler = function (e) {\n          n(document.body).on(\"mousedown.select2.\" + e.id, function (e) {\n            var t = n(e.target).closest(\".select2\");\n            n(\".select2.select2-container--open\").each(function () {\n              this != t[0] && i.GetData(this, \"element\").select2(\"close\");\n            });\n          });\n        }, o.prototype._detachCloseHandler = function (e) {\n          n(document.body).off(\"mousedown.select2.\" + e.id);\n        }, o.prototype.position = function (e, t) {\n          t.find(\".selection\").append(e);\n        }, o.prototype.destroy = function () {\n          this._detachCloseHandler(this.container);\n        }, o.prototype.update = function (e) {\n          throw new Error(\"The `update` method must be defined in child classes.\");\n        }, o.prototype.isEnabled = function () {\n          return !this.isDisabled();\n        }, o.prototype.isDisabled = function () {\n          return this.options.get(\"disabled\");\n        }, o;\n      }), e.define(\"select2/selection/single\", [\"jquery\", \"./base\", \"../utils\", \"../keys\"], function (e, t, n, i) {\n        function r() {\n          r.__super__.constructor.apply(this, arguments);\n        }\n        return n.Extend(r, t), r.prototype.render = function () {\n          var e = r.__super__.render.call(this);\n          return e.addClass(\"select2-selection--single\"), e.html('<span class=\"select2-selection__rendered\"></span><span class=\"select2-selection__arrow\" role=\"presentation\"><b role=\"presentation\"></b></span>'), e;\n        }, r.prototype.bind = function (t, e) {\n          var n = this;\n          r.__super__.bind.apply(this, arguments);\n          var i = t.id + \"-container\";\n          this.$selection.find(\".select2-selection__rendered\").attr(\"id\", i).attr(\"role\", \"textbox\").attr(\"aria-readonly\", \"true\"), this.$selection.attr(\"aria-labelledby\", i), this.$selection.on(\"mousedown\", function (e) {\n            1 === e.which && n.trigger(\"toggle\", {\n              originalEvent: e\n            });\n          }), this.$selection.on(\"focus\", function (e) {}), this.$selection.on(\"blur\", function (e) {}), t.on(\"focus\", function (e) {\n            t.isOpen() || n.$selection.trigger(\"focus\");\n          });\n        }, r.prototype.clear = function () {\n          var e = this.$selection.find(\".select2-selection__rendered\");\n          e.empty(), e.removeAttr(\"title\");\n        }, r.prototype.display = function (e, t) {\n          var n = this.options.get(\"templateSelection\");\n          return this.options.get(\"escapeMarkup\")(n(e, t));\n        }, r.prototype.selectionContainer = function () {\n          return e(\"<span></span>\");\n        }, r.prototype.update = function (e) {\n          if (0 !== e.length) {\n            var t = e[0],\n              n = this.$selection.find(\".select2-selection__rendered\"),\n              i = this.display(t, n);\n            n.empty().append(i);\n            var r = t.title || t.text;\n            r ? n.attr(\"title\", r) : n.removeAttr(\"title\");\n          } else this.clear();\n        }, r;\n      }), e.define(\"select2/selection/multiple\", [\"jquery\", \"./base\", \"../utils\"], function (r, e, l) {\n        function n(e, t) {\n          n.__super__.constructor.apply(this, arguments);\n        }\n        return l.Extend(n, e), n.prototype.render = function () {\n          var e = n.__super__.render.call(this);\n          return e.addClass(\"select2-selection--multiple\"), e.html('<ul class=\"select2-selection__rendered\"></ul>'), e;\n        }, n.prototype.bind = function (e, t) {\n          var i = this;\n          n.__super__.bind.apply(this, arguments), this.$selection.on(\"click\", function (e) {\n            i.trigger(\"toggle\", {\n              originalEvent: e\n            });\n          }), this.$selection.on(\"click\", \".select2-selection__choice__remove\", function (e) {\n            if (!i.isDisabled()) {\n              var t = r(this).parent(),\n                n = l.GetData(t[0], \"data\");\n              i.trigger(\"unselect\", {\n                originalEvent: e,\n                data: n\n              });\n            }\n          });\n        }, n.prototype.clear = function () {\n          var e = this.$selection.find(\".select2-selection__rendered\");\n          e.empty(), e.removeAttr(\"title\");\n        }, n.prototype.display = function (e, t) {\n          var n = this.options.get(\"templateSelection\");\n          return this.options.get(\"escapeMarkup\")(n(e, t));\n        }, n.prototype.selectionContainer = function () {\n          return r('<li class=\"select2-selection__choice\"><span class=\"select2-selection__choice__remove\" role=\"presentation\">&times;</span></li>');\n        }, n.prototype.update = function (e) {\n          if (this.clear(), 0 !== e.length) {\n            for (var t = [], n = 0; n < e.length; n++) {\n              var i = e[n],\n                r = this.selectionContainer(),\n                o = this.display(i, r);\n              r.append(o);\n              var s = i.title || i.text;\n              s && r.attr(\"title\", s), l.StoreData(r[0], \"data\", i), t.push(r);\n            }\n            var a = this.$selection.find(\".select2-selection__rendered\");\n            l.appendMany(a, t);\n          }\n        }, n;\n      }), e.define(\"select2/selection/placeholder\", [\"../utils\"], function (e) {\n        function t(e, t, n) {\n          this.placeholder = this.normalizePlaceholder(n.get(\"placeholder\")), e.call(this, t, n);\n        }\n        return t.prototype.normalizePlaceholder = function (e, t) {\n          return \"string\" == typeof t && (t = {\n            id: \"\",\n            text: t\n          }), t;\n        }, t.prototype.createPlaceholder = function (e, t) {\n          var n = this.selectionContainer();\n          return n.html(this.display(t)), n.addClass(\"select2-selection__placeholder\").removeClass(\"select2-selection__choice\"), n;\n        }, t.prototype.update = function (e, t) {\n          var n = 1 == t.length && t[0].id != this.placeholder.id;\n          if (1 < t.length || n) return e.call(this, t);\n          this.clear();\n          var i = this.createPlaceholder(this.placeholder);\n          this.$selection.find(\".select2-selection__rendered\").append(i);\n        }, t;\n      }), e.define(\"select2/selection/allowClear\", [\"jquery\", \"../keys\", \"../utils\"], function (r, i, a) {\n        function e() {}\n        return e.prototype.bind = function (e, t, n) {\n          var i = this;\n          e.call(this, t, n), null == this.placeholder && this.options.get(\"debug\") && window.console && console.error && console.error(\"Select2: The `allowClear` option should be used in combination with the `placeholder` option.\"), this.$selection.on(\"mousedown\", \".select2-selection__clear\", function (e) {\n            i._handleClear(e);\n          }), t.on(\"keypress\", function (e) {\n            i._handleKeyboardClear(e, t);\n          });\n        }, e.prototype._handleClear = function (e, t) {\n          if (!this.isDisabled()) {\n            var n = this.$selection.find(\".select2-selection__clear\");\n            if (0 !== n.length) {\n              t.stopPropagation();\n              var i = a.GetData(n[0], \"data\"),\n                r = this.$element.val();\n              this.$element.val(this.placeholder.id);\n              var o = {\n                data: i\n              };\n              if (this.trigger(\"clear\", o), o.prevented) this.$element.val(r);else {\n                for (var s = 0; s < i.length; s++) if (o = {\n                  data: i[s]\n                }, this.trigger(\"unselect\", o), o.prevented) return void this.$element.val(r);\n                this.$element.trigger(\"input\").trigger(\"change\"), this.trigger(\"toggle\", {});\n              }\n            }\n          }\n        }, e.prototype._handleKeyboardClear = function (e, t, n) {\n          n.isOpen() || t.which != i.DELETE && t.which != i.BACKSPACE || this._handleClear(t);\n        }, e.prototype.update = function (e, t) {\n          if (e.call(this, t), !(0 < this.$selection.find(\".select2-selection__placeholder\").length || 0 === t.length)) {\n            var n = this.options.get(\"translations\").get(\"removeAllItems\"),\n              i = r('<span class=\"select2-selection__clear\" title=\"' + n() + '\">&times;</span>');\n            a.StoreData(i[0], \"data\", t), this.$selection.find(\".select2-selection__rendered\").prepend(i);\n          }\n        }, e;\n      }), e.define(\"select2/selection/search\", [\"jquery\", \"../utils\", \"../keys\"], function (i, a, l) {\n        function e(e, t, n) {\n          e.call(this, t, n);\n        }\n        return e.prototype.render = function (e) {\n          var t = i('<li class=\"select2-search select2-search--inline\"><input class=\"select2-search__field\" type=\"search\" tabindex=\"-1\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" role=\"searchbox\" aria-autocomplete=\"list\" /></li>');\n          this.$searchContainer = t, this.$search = t.find(\"input\");\n          var n = e.call(this);\n          return this._transferTabIndex(), n;\n        }, e.prototype.bind = function (e, t, n) {\n          var i = this,\n            r = t.id + \"-results\";\n          e.call(this, t, n), t.on(\"open\", function () {\n            i.$search.attr(\"aria-controls\", r), i.$search.trigger(\"focus\");\n          }), t.on(\"close\", function () {\n            i.$search.val(\"\"), i.$search.removeAttr(\"aria-controls\"), i.$search.removeAttr(\"aria-activedescendant\"), i.$search.trigger(\"focus\");\n          }), t.on(\"enable\", function () {\n            i.$search.prop(\"disabled\", !1), i._transferTabIndex();\n          }), t.on(\"disable\", function () {\n            i.$search.prop(\"disabled\", !0);\n          }), t.on(\"focus\", function (e) {\n            i.$search.trigger(\"focus\");\n          }), t.on(\"results:focus\", function (e) {\n            e.data._resultId ? i.$search.attr(\"aria-activedescendant\", e.data._resultId) : i.$search.removeAttr(\"aria-activedescendant\");\n          }), this.$selection.on(\"focusin\", \".select2-search--inline\", function (e) {\n            i.trigger(\"focus\", e);\n          }), this.$selection.on(\"focusout\", \".select2-search--inline\", function (e) {\n            i._handleBlur(e);\n          }), this.$selection.on(\"keydown\", \".select2-search--inline\", function (e) {\n            if (e.stopPropagation(), i.trigger(\"keypress\", e), i._keyUpPrevented = e.isDefaultPrevented(), e.which === l.BACKSPACE && \"\" === i.$search.val()) {\n              var t = i.$searchContainer.prev(\".select2-selection__choice\");\n              if (0 < t.length) {\n                var n = a.GetData(t[0], \"data\");\n                i.searchRemoveChoice(n), e.preventDefault();\n              }\n            }\n          }), this.$selection.on(\"click\", \".select2-search--inline\", function (e) {\n            i.$search.val() && e.stopPropagation();\n          });\n          var o = document.documentMode,\n            s = o && o <= 11;\n          this.$selection.on(\"input.searchcheck\", \".select2-search--inline\", function (e) {\n            s ? i.$selection.off(\"input.search input.searchcheck\") : i.$selection.off(\"keyup.search\");\n          }), this.$selection.on(\"keyup.search input.search\", \".select2-search--inline\", function (e) {\n            if (s && \"input\" === e.type) i.$selection.off(\"input.search input.searchcheck\");else {\n              var t = e.which;\n              t != l.SHIFT && t != l.CTRL && t != l.ALT && t != l.TAB && i.handleSearch(e);\n            }\n          });\n        }, e.prototype._transferTabIndex = function (e) {\n          this.$search.attr(\"tabindex\", this.$selection.attr(\"tabindex\")), this.$selection.attr(\"tabindex\", \"-1\");\n        }, e.prototype.createPlaceholder = function (e, t) {\n          this.$search.attr(\"placeholder\", t.text);\n        }, e.prototype.update = function (e, t) {\n          var n = this.$search[0] == document.activeElement;\n          this.$search.attr(\"placeholder\", \"\"), e.call(this, t), this.$selection.find(\".select2-selection__rendered\").append(this.$searchContainer), this.resizeSearch(), n && this.$search.trigger(\"focus\");\n        }, e.prototype.handleSearch = function () {\n          if (this.resizeSearch(), !this._keyUpPrevented) {\n            var e = this.$search.val();\n            this.trigger(\"query\", {\n              term: e\n            });\n          }\n          this._keyUpPrevented = !1;\n        }, e.prototype.searchRemoveChoice = function (e, t) {\n          this.trigger(\"unselect\", {\n            data: t\n          }), this.$search.val(t.text), this.handleSearch();\n        }, e.prototype.resizeSearch = function () {\n          this.$search.css(\"width\", \"25px\");\n          var e = \"\";\n          \"\" !== this.$search.attr(\"placeholder\") ? e = this.$selection.find(\".select2-selection__rendered\").width() : e = .75 * (this.$search.val().length + 1) + \"em\";\n          this.$search.css(\"width\", e);\n        }, e;\n      }), e.define(\"select2/selection/eventRelay\", [\"jquery\"], function (s) {\n        function e() {}\n        return e.prototype.bind = function (e, t, n) {\n          var i = this,\n            r = [\"open\", \"opening\", \"close\", \"closing\", \"select\", \"selecting\", \"unselect\", \"unselecting\", \"clear\", \"clearing\"],\n            o = [\"opening\", \"closing\", \"selecting\", \"unselecting\", \"clearing\"];\n          e.call(this, t, n), t.on(\"*\", function (e, t) {\n            if (-1 !== s.inArray(e, r)) {\n              t = t || {};\n              var n = s.Event(\"select2:\" + e, {\n                params: t\n              });\n              i.$element.trigger(n), -1 !== s.inArray(e, o) && (t.prevented = n.isDefaultPrevented());\n            }\n          });\n        }, e;\n      }), e.define(\"select2/translation\", [\"jquery\", \"require\"], function (t, n) {\n        function i(e) {\n          this.dict = e || {};\n        }\n        return i.prototype.all = function () {\n          return this.dict;\n        }, i.prototype.get = function (e) {\n          return this.dict[e];\n        }, i.prototype.extend = function (e) {\n          this.dict = t.extend({}, e.all(), this.dict);\n        }, i._cache = {}, i.loadPath = function (e) {\n          if (!(e in i._cache)) {\n            var t = n(e);\n            i._cache[e] = t;\n          }\n          return new i(i._cache[e]);\n        }, i;\n      }), e.define(\"select2/diacritics\", [], function () {\n        return {\n          \"â¶\": \"A\",\n          \"ï¼¡\": \"A\",\n          \"Ã\": \"A\",\n          \"Ã\": \"A\",\n          \"Ã\": \"A\",\n          \"áº¦\": \"A\",\n          \"áº¤\": \"A\",\n          \"áºª\": \"A\",\n          \"áº¨\": \"A\",\n          \"Ã\": \"A\",\n          \"Ä\": \"A\",\n          \"Ä\": \"A\",\n          \"áº°\": \"A\",\n          \"áº®\": \"A\",\n          \"áº´\": \"A\",\n          \"áº²\": \"A\",\n          \"È¦\": \"A\",\n          \"Ç \": \"A\",\n          \"Ã\": \"A\",\n          \"Ç\": \"A\",\n          \"áº¢\": \"A\",\n          \"Ã\": \"A\",\n          \"Çº\": \"A\",\n          \"Ç\": \"A\",\n          \"È\": \"A\",\n          \"È\": \"A\",\n          \"áº \": \"A\",\n          \"áº¬\": \"A\",\n          \"áº¶\": \"A\",\n          \"á¸\": \"A\",\n          \"Ä\": \"A\",\n          \"Èº\": \"A\",\n          \"â±¯\": \"A\",\n          \"ê²\": \"AA\",\n          \"Ã\": \"AE\",\n          \"Ç¼\": \"AE\",\n          \"Ç¢\": \"AE\",\n          \"ê´\": \"AO\",\n          \"ê¶\": \"AU\",\n          \"ê¸\": \"AV\",\n          \"êº\": \"AV\",\n          \"ê¼\": \"AY\",\n          \"â·\": \"B\",\n          \"ï¼¢\": \"B\",\n          \"á¸\": \"B\",\n          \"á¸\": \"B\",\n          \"á¸\": \"B\",\n          \"É\": \"B\",\n          \"Æ\": \"B\",\n          \"Æ\": \"B\",\n          \"â¸\": \"C\",\n          \"ï¼£\": \"C\",\n          \"Ä\": \"C\",\n          \"Ä\": \"C\",\n          \"Ä\": \"C\",\n          \"Ä\": \"C\",\n          \"Ã\": \"C\",\n          \"á¸\": \"C\",\n          \"Æ\": \"C\",\n          \"È»\": \"C\",\n          \"ê¾\": \"C\",\n          \"â¹\": \"D\",\n          \"ï¼¤\": \"D\",\n          \"á¸\": \"D\",\n          \"Ä\": \"D\",\n          \"á¸\": \"D\",\n          \"á¸\": \"D\",\n          \"á¸\": \"D\",\n          \"á¸\": \"D\",\n          \"Ä\": \"D\",\n          \"Æ\": \"D\",\n          \"Æ\": \"D\",\n          \"Æ\": \"D\",\n          \"ê¹\": \"D\",\n          \"Ç±\": \"DZ\",\n          \"Ç\": \"DZ\",\n          \"Ç²\": \"Dz\",\n          \"Ç\": \"Dz\",\n          \"âº\": \"E\",\n          \"ï¼¥\": \"E\",\n          \"Ã\": \"E\",\n          \"Ã\": \"E\",\n          \"Ã\": \"E\",\n          \"á»\": \"E\",\n          \"áº¾\": \"E\",\n          \"á»\": \"E\",\n          \"á»\": \"E\",\n          \"áº¼\": \"E\",\n          \"Ä\": \"E\",\n          \"á¸\": \"E\",\n          \"á¸\": \"E\",\n          \"Ä\": \"E\",\n          \"Ä\": \"E\",\n          \"Ã\": \"E\",\n          \"áºº\": \"E\",\n          \"Ä\": \"E\",\n          \"È\": \"E\",\n          \"È\": \"E\",\n          \"áº¸\": \"E\",\n          \"á»\": \"E\",\n          \"È¨\": \"E\",\n          \"á¸\": \"E\",\n          \"Ä\": \"E\",\n          \"á¸\": \"E\",\n          \"á¸\": \"E\",\n          \"Æ\": \"E\",\n          \"Æ\": \"E\",\n          \"â»\": \"F\",\n          \"ï¼¦\": \"F\",\n          \"á¸\": \"F\",\n          \"Æ\": \"F\",\n          \"ê»\": \"F\",\n          \"â¼\": \"G\",\n          \"ï¼§\": \"G\",\n          \"Ç´\": \"G\",\n          \"Ä\": \"G\",\n          \"á¸ \": \"G\",\n          \"Ä\": \"G\",\n          \"Ä \": \"G\",\n          \"Ç¦\": \"G\",\n          \"Ä¢\": \"G\",\n          \"Ç¤\": \"G\",\n          \"Æ\": \"G\",\n          \"ê \": \"G\",\n          \"ê½\": \"G\",\n          \"ê¾\": \"G\",\n          \"â½\": \"H\",\n          \"ï¼¨\": \"H\",\n          \"Ä¤\": \"H\",\n          \"á¸¢\": \"H\",\n          \"á¸¦\": \"H\",\n          \"È\": \"H\",\n          \"á¸¤\": \"H\",\n          \"á¸¨\": \"H\",\n          \"á¸ª\": \"H\",\n          \"Ä¦\": \"H\",\n          \"â±§\": \"H\",\n          \"â±µ\": \"H\",\n          \"ê\": \"H\",\n          \"â¾\": \"I\",\n          \"ï¼©\": \"I\",\n          \"Ã\": \"I\",\n          \"Ã\": \"I\",\n          \"Ã\": \"I\",\n          \"Ä¨\": \"I\",\n          \"Äª\": \"I\",\n          \"Ä¬\": \"I\",\n          \"Ä°\": \"I\",\n          \"Ã\": \"I\",\n          \"á¸®\": \"I\",\n          \"á»\": \"I\",\n          \"Ç\": \"I\",\n          \"È\": \"I\",\n          \"È\": \"I\",\n          \"á»\": \"I\",\n          \"Ä®\": \"I\",\n          \"á¸¬\": \"I\",\n          \"Æ\": \"I\",\n          \"â¿\": \"J\",\n          \"ï¼ª\": \"J\",\n          \"Ä´\": \"J\",\n          \"É\": \"J\",\n          \"â\": \"K\",\n          \"ï¼«\": \"K\",\n          \"á¸°\": \"K\",\n          \"Ç¨\": \"K\",\n          \"á¸²\": \"K\",\n          \"Ä¶\": \"K\",\n          \"á¸´\": \"K\",\n          \"Æ\": \"K\",\n          \"â±©\": \"K\",\n          \"ê\": \"K\",\n          \"ê\": \"K\",\n          \"ê\": \"K\",\n          \"ê¢\": \"K\",\n          \"â\": \"L\",\n          \"ï¼¬\": \"L\",\n          \"Ä¿\": \"L\",\n          \"Ä¹\": \"L\",\n          \"Ä½\": \"L\",\n          \"á¸¶\": \"L\",\n          \"á¸¸\": \"L\",\n          \"Ä»\": \"L\",\n          \"á¸¼\": \"L\",\n          \"á¸º\": \"L\",\n          \"Å\": \"L\",\n          \"È½\": \"L\",\n          \"â±¢\": \"L\",\n          \"â± \": \"L\",\n          \"ê\": \"L\",\n          \"ê\": \"L\",\n          \"ê\": \"L\",\n          \"Ç\": \"LJ\",\n          \"Ç\": \"Lj\",\n          \"â\": \"M\",\n          \"ï¼­\": \"M\",\n          \"á¸¾\": \"M\",\n          \"á¹\": \"M\",\n          \"á¹\": \"M\",\n          \"â±®\": \"M\",\n          \"Æ\": \"M\",\n          \"â\": \"N\",\n          \"ï¼®\": \"N\",\n          \"Ç¸\": \"N\",\n          \"Å\": \"N\",\n          \"Ã\": \"N\",\n          \"á¹\": \"N\",\n          \"Å\": \"N\",\n          \"á¹\": \"N\",\n          \"Å\": \"N\",\n          \"á¹\": \"N\",\n          \"á¹\": \"N\",\n          \"È \": \"N\",\n          \"Æ\": \"N\",\n          \"ê\": \"N\",\n          \"ê¤\": \"N\",\n          \"Ç\": \"NJ\",\n          \"Ç\": \"Nj\",\n          \"â\": \"O\",\n          \"ï¼¯\": \"O\",\n          \"Ã\": \"O\",\n          \"Ã\": \"O\",\n          \"Ã\": \"O\",\n          \"á»\": \"O\",\n          \"á»\": \"O\",\n          \"á»\": \"O\",\n          \"á»\": \"O\",\n          \"Ã\": \"O\",\n          \"á¹\": \"O\",\n          \"È¬\": \"O\",\n          \"á¹\": \"O\",\n          \"Å\": \"O\",\n          \"á¹\": \"O\",\n          \"á¹\": \"O\",\n          \"Å\": \"O\",\n          \"È®\": \"O\",\n          \"È°\": \"O\",\n          \"Ã\": \"O\",\n          \"Èª\": \"O\",\n          \"á»\": \"O\",\n          \"Å\": \"O\",\n          \"Ç\": \"O\",\n          \"È\": \"O\",\n          \"È\": \"O\",\n          \"Æ \": \"O\",\n          \"á»\": \"O\",\n          \"á»\": \"O\",\n          \"á» \": \"O\",\n          \"á»\": \"O\",\n          \"á»¢\": \"O\",\n          \"á»\": \"O\",\n          \"á»\": \"O\",\n          \"Çª\": \"O\",\n          \"Ç¬\": \"O\",\n          \"Ã\": \"O\",\n          \"Ç¾\": \"O\",\n          \"Æ\": \"O\",\n          \"Æ\": \"O\",\n          \"ê\": \"O\",\n          \"ê\": \"O\",\n          \"Å\": \"OE\",\n          \"Æ¢\": \"OI\",\n          \"ê\": \"OO\",\n          \"È¢\": \"OU\",\n          \"â\": \"P\",\n          \"ï¼°\": \"P\",\n          \"á¹\": \"P\",\n          \"á¹\": \"P\",\n          \"Æ¤\": \"P\",\n          \"â±£\": \"P\",\n          \"ê\": \"P\",\n          \"ê\": \"P\",\n          \"ê\": \"P\",\n          \"â\": \"Q\",\n          \"ï¼±\": \"Q\",\n          \"ê\": \"Q\",\n          \"ê\": \"Q\",\n          \"É\": \"Q\",\n          \"â\": \"R\",\n          \"ï¼²\": \"R\",\n          \"Å\": \"R\",\n          \"á¹\": \"R\",\n          \"Å\": \"R\",\n          \"È\": \"R\",\n          \"È\": \"R\",\n          \"á¹\": \"R\",\n          \"á¹\": \"R\",\n          \"Å\": \"R\",\n          \"á¹\": \"R\",\n          \"É\": \"R\",\n          \"â±¤\": \"R\",\n          \"ê\": \"R\",\n          \"ê¦\": \"R\",\n          \"ê\": \"R\",\n          \"â\": \"S\",\n          \"ï¼³\": \"S\",\n          \"áº\": \"S\",\n          \"Å\": \"S\",\n          \"á¹¤\": \"S\",\n          \"Å\": \"S\",\n          \"á¹ \": \"S\",\n          \"Å \": \"S\",\n          \"á¹¦\": \"S\",\n          \"á¹¢\": \"S\",\n          \"á¹¨\": \"S\",\n          \"È\": \"S\",\n          \"Å\": \"S\",\n          \"â±¾\": \"S\",\n          \"ê¨\": \"S\",\n          \"ê\": \"S\",\n          \"â\": \"T\",\n          \"ï¼´\": \"T\",\n          \"á¹ª\": \"T\",\n          \"Å¤\": \"T\",\n          \"á¹¬\": \"T\",\n          \"È\": \"T\",\n          \"Å¢\": \"T\",\n          \"á¹°\": \"T\",\n          \"á¹®\": \"T\",\n          \"Å¦\": \"T\",\n          \"Æ¬\": \"T\",\n          \"Æ®\": \"T\",\n          \"È¾\": \"T\",\n          \"ê\": \"T\",\n          \"ê¨\": \"TZ\",\n          \"â\": \"U\",\n          \"ï¼µ\": \"U\",\n          \"Ã\": \"U\",\n          \"Ã\": \"U\",\n          \"Ã\": \"U\",\n          \"Å¨\": \"U\",\n          \"á¹¸\": \"U\",\n          \"Åª\": \"U\",\n          \"á¹º\": \"U\",\n          \"Å¬\": \"U\",\n          \"Ã\": \"U\",\n          \"Ç\": \"U\",\n          \"Ç\": \"U\",\n          \"Ç\": \"U\",\n          \"Ç\": \"U\",\n          \"á»¦\": \"U\",\n          \"Å®\": \"U\",\n          \"Å°\": \"U\",\n          \"Ç\": \"U\",\n          \"È\": \"U\",\n          \"È\": \"U\",\n          \"Æ¯\": \"U\",\n          \"á»ª\": \"U\",\n          \"á»¨\": \"U\",\n          \"á»®\": \"U\",\n          \"á»¬\": \"U\",\n          \"á»°\": \"U\",\n          \"á»¤\": \"U\",\n          \"á¹²\": \"U\",\n          \"Å²\": \"U\",\n          \"á¹¶\": \"U\",\n          \"á¹´\": \"U\",\n          \"É\": \"U\",\n          \"â\": \"V\",\n          \"ï¼¶\": \"V\",\n          \"á¹¼\": \"V\",\n          \"á¹¾\": \"V\",\n          \"Æ²\": \"V\",\n          \"ê\": \"V\",\n          \"É\": \"V\",\n          \"ê \": \"VY\",\n          \"â\": \"W\",\n          \"ï¼·\": \"W\",\n          \"áº\": \"W\",\n          \"áº\": \"W\",\n          \"Å´\": \"W\",\n          \"áº\": \"W\",\n          \"áº\": \"W\",\n          \"áº\": \"W\",\n          \"â±²\": \"W\",\n          \"â\": \"X\",\n          \"ï¼¸\": \"X\",\n          \"áº\": \"X\",\n          \"áº\": \"X\",\n          \"â\": \"Y\",\n          \"ï¼¹\": \"Y\",\n          \"á»²\": \"Y\",\n          \"Ã\": \"Y\",\n          \"Å¶\": \"Y\",\n          \"á»¸\": \"Y\",\n          \"È²\": \"Y\",\n          \"áº\": \"Y\",\n          \"Å¸\": \"Y\",\n          \"á»¶\": \"Y\",\n          \"á»´\": \"Y\",\n          \"Æ³\": \"Y\",\n          \"É\": \"Y\",\n          \"á»¾\": \"Y\",\n          \"â\": \"Z\",\n          \"ï¼º\": \"Z\",\n          \"Å¹\": \"Z\",\n          \"áº\": \"Z\",\n          \"Å»\": \"Z\",\n          \"Å½\": \"Z\",\n          \"áº\": \"Z\",\n          \"áº\": \"Z\",\n          \"Æµ\": \"Z\",\n          \"È¤\": \"Z\",\n          \"â±¿\": \"Z\",\n          \"â±«\": \"Z\",\n          \"ê¢\": \"Z\",\n          \"â\": \"a\",\n          \"ï½\": \"a\",\n          \"áº\": \"a\",\n          \"Ã \": \"a\",\n          \"Ã¡\": \"a\",\n          \"Ã¢\": \"a\",\n          \"áº§\": \"a\",\n          \"áº¥\": \"a\",\n          \"áº«\": \"a\",\n          \"áº©\": \"a\",\n          \"Ã£\": \"a\",\n          \"Ä\": \"a\",\n          \"Ä\": \"a\",\n          \"áº±\": \"a\",\n          \"áº¯\": \"a\",\n          \"áºµ\": \"a\",\n          \"áº³\": \"a\",\n          \"È§\": \"a\",\n          \"Ç¡\": \"a\",\n          \"Ã¤\": \"a\",\n          \"Ç\": \"a\",\n          \"áº£\": \"a\",\n          \"Ã¥\": \"a\",\n          \"Ç»\": \"a\",\n          \"Ç\": \"a\",\n          \"È\": \"a\",\n          \"È\": \"a\",\n          \"áº¡\": \"a\",\n          \"áº­\": \"a\",\n          \"áº·\": \"a\",\n          \"á¸\": \"a\",\n          \"Ä\": \"a\",\n          \"â±¥\": \"a\",\n          \"É\": \"a\",\n          \"ê³\": \"aa\",\n          \"Ã¦\": \"ae\",\n          \"Ç½\": \"ae\",\n          \"Ç£\": \"ae\",\n          \"êµ\": \"ao\",\n          \"ê·\": \"au\",\n          \"ê¹\": \"av\",\n          \"ê»\": \"av\",\n          \"ê½\": \"ay\",\n          \"â\": \"b\",\n          \"ï½\": \"b\",\n          \"á¸\": \"b\",\n          \"á¸\": \"b\",\n          \"á¸\": \"b\",\n          \"Æ\": \"b\",\n          \"Æ\": \"b\",\n          \"É\": \"b\",\n          \"â\": \"c\",\n          \"ï½\": \"c\",\n          \"Ä\": \"c\",\n          \"Ä\": \"c\",\n          \"Ä\": \"c\",\n          \"Ä\": \"c\",\n          \"Ã§\": \"c\",\n          \"á¸\": \"c\",\n          \"Æ\": \"c\",\n          \"È¼\": \"c\",\n          \"ê¿\": \"c\",\n          \"â\": \"c\",\n          \"â\": \"d\",\n          \"ï½\": \"d\",\n          \"á¸\": \"d\",\n          \"Ä\": \"d\",\n          \"á¸\": \"d\",\n          \"á¸\": \"d\",\n          \"á¸\": \"d\",\n          \"á¸\": \"d\",\n          \"Ä\": \"d\",\n          \"Æ\": \"d\",\n          \"É\": \"d\",\n          \"É\": \"d\",\n          \"êº\": \"d\",\n          \"Ç³\": \"dz\",\n          \"Ç\": \"dz\",\n          \"â\": \"e\",\n          \"ï½\": \"e\",\n          \"Ã¨\": \"e\",\n          \"Ã©\": \"e\",\n          \"Ãª\": \"e\",\n          \"á»\": \"e\",\n          \"áº¿\": \"e\",\n          \"á»\": \"e\",\n          \"á»\": \"e\",\n          \"áº½\": \"e\",\n          \"Ä\": \"e\",\n          \"á¸\": \"e\",\n          \"á¸\": \"e\",\n          \"Ä\": \"e\",\n          \"Ä\": \"e\",\n          \"Ã«\": \"e\",\n          \"áº»\": \"e\",\n          \"Ä\": \"e\",\n          \"È\": \"e\",\n          \"È\": \"e\",\n          \"áº¹\": \"e\",\n          \"á»\": \"e\",\n          \"È©\": \"e\",\n          \"á¸\": \"e\",\n          \"Ä\": \"e\",\n          \"á¸\": \"e\",\n          \"á¸\": \"e\",\n          \"É\": \"e\",\n          \"É\": \"e\",\n          \"Ç\": \"e\",\n          \"â\": \"f\",\n          \"ï½\": \"f\",\n          \"á¸\": \"f\",\n          \"Æ\": \"f\",\n          \"ê¼\": \"f\",\n          \"â\": \"g\",\n          \"ï½\": \"g\",\n          \"Çµ\": \"g\",\n          \"Ä\": \"g\",\n          \"á¸¡\": \"g\",\n          \"Ä\": \"g\",\n          \"Ä¡\": \"g\",\n          \"Ç§\": \"g\",\n          \"Ä£\": \"g\",\n          \"Ç¥\": \"g\",\n          \"É \": \"g\",\n          \"ê¡\": \"g\",\n          \"áµ¹\": \"g\",\n          \"ê¿\": \"g\",\n          \"â\": \"h\",\n          \"ï½\": \"h\",\n          \"Ä¥\": \"h\",\n          \"á¸£\": \"h\",\n          \"á¸§\": \"h\",\n          \"È\": \"h\",\n          \"á¸¥\": \"h\",\n          \"á¸©\": \"h\",\n          \"á¸«\": \"h\",\n          \"áº\": \"h\",\n          \"Ä§\": \"h\",\n          \"â±¨\": \"h\",\n          \"â±¶\": \"h\",\n          \"É¥\": \"h\",\n          \"Æ\": \"hv\",\n          \"â\": \"i\",\n          \"ï½\": \"i\",\n          \"Ã¬\": \"i\",\n          \"Ã­\": \"i\",\n          \"Ã®\": \"i\",\n          \"Ä©\": \"i\",\n          \"Ä«\": \"i\",\n          \"Ä­\": \"i\",\n          \"Ã¯\": \"i\",\n          \"á¸¯\": \"i\",\n          \"á»\": \"i\",\n          \"Ç\": \"i\",\n          \"È\": \"i\",\n          \"È\": \"i\",\n          \"á»\": \"i\",\n          \"Ä¯\": \"i\",\n          \"á¸­\": \"i\",\n          \"É¨\": \"i\",\n          \"Ä±\": \"i\",\n          \"â\": \"j\",\n          \"ï½\": \"j\",\n          \"Äµ\": \"j\",\n          \"Ç°\": \"j\",\n          \"É\": \"j\",\n          \"â\": \"k\",\n          \"ï½\": \"k\",\n          \"á¸±\": \"k\",\n          \"Ç©\": \"k\",\n          \"á¸³\": \"k\",\n          \"Ä·\": \"k\",\n          \"á¸µ\": \"k\",\n          \"Æ\": \"k\",\n          \"â±ª\": \"k\",\n          \"ê\": \"k\",\n          \"ê\": \"k\",\n          \"ê\": \"k\",\n          \"ê£\": \"k\",\n          \"â\": \"l\",\n          \"ï½\": \"l\",\n          \"Å\": \"l\",\n          \"Äº\": \"l\",\n          \"Ä¾\": \"l\",\n          \"á¸·\": \"l\",\n          \"á¸¹\": \"l\",\n          \"Ä¼\": \"l\",\n          \"á¸½\": \"l\",\n          \"á¸»\": \"l\",\n          \"Å¿\": \"l\",\n          \"Å\": \"l\",\n          \"Æ\": \"l\",\n          \"É«\": \"l\",\n          \"â±¡\": \"l\",\n          \"ê\": \"l\",\n          \"ê\": \"l\",\n          \"ê\": \"l\",\n          \"Ç\": \"lj\",\n          \"â\": \"m\",\n          \"ï½\": \"m\",\n          \"á¸¿\": \"m\",\n          \"á¹\": \"m\",\n          \"á¹\": \"m\",\n          \"É±\": \"m\",\n          \"É¯\": \"m\",\n          \"â\": \"n\",\n          \"ï½\": \"n\",\n          \"Ç¹\": \"n\",\n          \"Å\": \"n\",\n          \"Ã±\": \"n\",\n          \"á¹\": \"n\",\n          \"Å\": \"n\",\n          \"á¹\": \"n\",\n          \"Å\": \"n\",\n          \"á¹\": \"n\",\n          \"á¹\": \"n\",\n          \"Æ\": \"n\",\n          \"É²\": \"n\",\n          \"Å\": \"n\",\n          \"ê\": \"n\",\n          \"ê¥\": \"n\",\n          \"Ç\": \"nj\",\n          \"â\": \"o\",\n          \"ï½\": \"o\",\n          \"Ã²\": \"o\",\n          \"Ã³\": \"o\",\n          \"Ã´\": \"o\",\n          \"á»\": \"o\",\n          \"á»\": \"o\",\n          \"á»\": \"o\",\n          \"á»\": \"o\",\n          \"Ãµ\": \"o\",\n          \"á¹\": \"o\",\n          \"È­\": \"o\",\n          \"á¹\": \"o\",\n          \"Å\": \"o\",\n          \"á¹\": \"o\",\n          \"á¹\": \"o\",\n          \"Å\": \"o\",\n          \"È¯\": \"o\",\n          \"È±\": \"o\",\n          \"Ã¶\": \"o\",\n          \"È«\": \"o\",\n          \"á»\": \"o\",\n          \"Å\": \"o\",\n          \"Ç\": \"o\",\n          \"È\": \"o\",\n          \"È\": \"o\",\n          \"Æ¡\": \"o\",\n          \"á»\": \"o\",\n          \"á»\": \"o\",\n          \"á»¡\": \"o\",\n          \"á»\": \"o\",\n          \"á»£\": \"o\",\n          \"á»\": \"o\",\n          \"á»\": \"o\",\n          \"Ç«\": \"o\",\n          \"Ç­\": \"o\",\n          \"Ã¸\": \"o\",\n          \"Ç¿\": \"o\",\n          \"É\": \"o\",\n          \"ê\": \"o\",\n          \"ê\": \"o\",\n          \"Éµ\": \"o\",\n          \"Å\": \"oe\",\n          \"Æ£\": \"oi\",\n          \"È£\": \"ou\",\n          \"ê\": \"oo\",\n          \"â\": \"p\",\n          \"ï½\": \"p\",\n          \"á¹\": \"p\",\n          \"á¹\": \"p\",\n          \"Æ¥\": \"p\",\n          \"áµ½\": \"p\",\n          \"ê\": \"p\",\n          \"ê\": \"p\",\n          \"ê\": \"p\",\n          \"â \": \"q\",\n          \"ï½\": \"q\",\n          \"É\": \"q\",\n          \"ê\": \"q\",\n          \"ê\": \"q\",\n          \"â¡\": \"r\",\n          \"ï½\": \"r\",\n          \"Å\": \"r\",\n          \"á¹\": \"r\",\n          \"Å\": \"r\",\n          \"È\": \"r\",\n          \"È\": \"r\",\n          \"á¹\": \"r\",\n          \"á¹\": \"r\",\n          \"Å\": \"r\",\n          \"á¹\": \"r\",\n          \"É\": \"r\",\n          \"É½\": \"r\",\n          \"ê\": \"r\",\n          \"ê§\": \"r\",\n          \"ê\": \"r\",\n          \"â¢\": \"s\",\n          \"ï½\": \"s\",\n          \"Ã\": \"s\",\n          \"Å\": \"s\",\n          \"á¹¥\": \"s\",\n          \"Å\": \"s\",\n          \"á¹¡\": \"s\",\n          \"Å¡\": \"s\",\n          \"á¹§\": \"s\",\n          \"á¹£\": \"s\",\n          \"á¹©\": \"s\",\n          \"È\": \"s\",\n          \"Å\": \"s\",\n          \"È¿\": \"s\",\n          \"ê©\": \"s\",\n          \"ê\": \"s\",\n          \"áº\": \"s\",\n          \"â£\": \"t\",\n          \"ï½\": \"t\",\n          \"á¹«\": \"t\",\n          \"áº\": \"t\",\n          \"Å¥\": \"t\",\n          \"á¹­\": \"t\",\n          \"È\": \"t\",\n          \"Å£\": \"t\",\n          \"á¹±\": \"t\",\n          \"á¹¯\": \"t\",\n          \"Å§\": \"t\",\n          \"Æ­\": \"t\",\n          \"Ê\": \"t\",\n          \"â±¦\": \"t\",\n          \"ê\": \"t\",\n          \"ê©\": \"tz\",\n          \"â¤\": \"u\",\n          \"ï½\": \"u\",\n          \"Ã¹\": \"u\",\n          \"Ãº\": \"u\",\n          \"Ã»\": \"u\",\n          \"Å©\": \"u\",\n          \"á¹¹\": \"u\",\n          \"Å«\": \"u\",\n          \"á¹»\": \"u\",\n          \"Å­\": \"u\",\n          \"Ã¼\": \"u\",\n          \"Ç\": \"u\",\n          \"Ç\": \"u\",\n          \"Ç\": \"u\",\n          \"Ç\": \"u\",\n          \"á»§\": \"u\",\n          \"Å¯\": \"u\",\n          \"Å±\": \"u\",\n          \"Ç\": \"u\",\n          \"È\": \"u\",\n          \"È\": \"u\",\n          \"Æ°\": \"u\",\n          \"á»«\": \"u\",\n          \"á»©\": \"u\",\n          \"á»¯\": \"u\",\n          \"á»­\": \"u\",\n          \"á»±\": \"u\",\n          \"á»¥\": \"u\",\n          \"á¹³\": \"u\",\n          \"Å³\": \"u\",\n          \"á¹·\": \"u\",\n          \"á¹µ\": \"u\",\n          \"Ê\": \"u\",\n          \"â¥\": \"v\",\n          \"ï½\": \"v\",\n          \"á¹½\": \"v\",\n          \"á¹¿\": \"v\",\n          \"Ê\": \"v\",\n          \"ê\": \"v\",\n          \"Ê\": \"v\",\n          \"ê¡\": \"vy\",\n          \"â¦\": \"w\",\n          \"ï½\": \"w\",\n          \"áº\": \"w\",\n          \"áº\": \"w\",\n          \"Åµ\": \"w\",\n          \"áº\": \"w\",\n          \"áº\": \"w\",\n          \"áº\": \"w\",\n          \"áº\": \"w\",\n          \"â±³\": \"w\",\n          \"â§\": \"x\",\n          \"ï½\": \"x\",\n          \"áº\": \"x\",\n          \"áº\": \"x\",\n          \"â¨\": \"y\",\n          \"ï½\": \"y\",\n          \"á»³\": \"y\",\n          \"Ã½\": \"y\",\n          \"Å·\": \"y\",\n          \"á»¹\": \"y\",\n          \"È³\": \"y\",\n          \"áº\": \"y\",\n          \"Ã¿\": \"y\",\n          \"á»·\": \"y\",\n          \"áº\": \"y\",\n          \"á»µ\": \"y\",\n          \"Æ´\": \"y\",\n          \"É\": \"y\",\n          \"á»¿\": \"y\",\n          \"â©\": \"z\",\n          \"ï½\": \"z\",\n          \"Åº\": \"z\",\n          \"áº\": \"z\",\n          \"Å¼\": \"z\",\n          \"Å¾\": \"z\",\n          \"áº\": \"z\",\n          \"áº\": \"z\",\n          \"Æ¶\": \"z\",\n          \"È¥\": \"z\",\n          \"É\": \"z\",\n          \"â±¬\": \"z\",\n          \"ê£\": \"z\",\n          \"Î\": \"Î\",\n          \"Î\": \"Î\",\n          \"Î\": \"Î\",\n          \"Î\": \"Î\",\n          \"Îª\": \"Î\",\n          \"Î\": \"Î\",\n          \"Î\": \"Î¥\",\n          \"Î«\": \"Î¥\",\n          \"Î\": \"Î©\",\n          \"Î¬\": \"Î±\",\n          \"Î­\": \"Îµ\",\n          \"Î®\": \"Î·\",\n          \"Î¯\": \"Î¹\",\n          \"Ï\": \"Î¹\",\n          \"Î\": \"Î¹\",\n          \"Ï\": \"Î¿\",\n          \"Ï\": \"Ï\",\n          \"Ï\": \"Ï\",\n          \"Î°\": \"Ï\",\n          \"Ï\": \"Ï\",\n          \"Ï\": \"Ï\",\n          \"â\": \"'\"\n        };\n      }), e.define(\"select2/data/base\", [\"../utils\"], function (i) {\n        function n(e, t) {\n          n.__super__.constructor.call(this);\n        }\n        return i.Extend(n, i.Observable), n.prototype.current = function (e) {\n          throw new Error(\"The `current` method must be defined in child classes.\");\n        }, n.prototype.query = function (e, t) {\n          throw new Error(\"The `query` method must be defined in child classes.\");\n        }, n.prototype.bind = function (e, t) {}, n.prototype.destroy = function () {}, n.prototype.generateResultId = function (e, t) {\n          var n = e.id + \"-result-\";\n          return n += i.generateChars(4), null != t.id ? n += \"-\" + t.id.toString() : n += \"-\" + i.generateChars(4), n;\n        }, n;\n      }), e.define(\"select2/data/select\", [\"./base\", \"../utils\", \"jquery\"], function (e, a, l) {\n        function n(e, t) {\n          this.$element = e, this.options = t, n.__super__.constructor.call(this);\n        }\n        return a.Extend(n, e), n.prototype.current = function (e) {\n          var n = [],\n            i = this;\n          this.$element.find(\":selected\").each(function () {\n            var e = l(this),\n              t = i.item(e);\n            n.push(t);\n          }), e(n);\n        }, n.prototype.select = function (r) {\n          var o = this;\n          if (r.selected = !0, l(r.element).is(\"option\")) return r.element.selected = !0, void this.$element.trigger(\"input\").trigger(\"change\");\n          if (this.$element.prop(\"multiple\")) this.current(function (e) {\n            var t = [];\n            (r = [r]).push.apply(r, e);\n            for (var n = 0; n < r.length; n++) {\n              var i = r[n].id;\n              -1 === l.inArray(i, t) && t.push(i);\n            }\n            o.$element.val(t), o.$element.trigger(\"input\").trigger(\"change\");\n          });else {\n            var e = r.id;\n            this.$element.val(e), this.$element.trigger(\"input\").trigger(\"change\");\n          }\n        }, n.prototype.unselect = function (r) {\n          var o = this;\n          if (this.$element.prop(\"multiple\")) {\n            if (r.selected = !1, l(r.element).is(\"option\")) return r.element.selected = !1, void this.$element.trigger(\"input\").trigger(\"change\");\n            this.current(function (e) {\n              for (var t = [], n = 0; n < e.length; n++) {\n                var i = e[n].id;\n                i !== r.id && -1 === l.inArray(i, t) && t.push(i);\n              }\n              o.$element.val(t), o.$element.trigger(\"input\").trigger(\"change\");\n            });\n          }\n        }, n.prototype.bind = function (e, t) {\n          var n = this;\n          (this.container = e).on(\"select\", function (e) {\n            n.select(e.data);\n          }), e.on(\"unselect\", function (e) {\n            n.unselect(e.data);\n          });\n        }, n.prototype.destroy = function () {\n          this.$element.find(\"*\").each(function () {\n            a.RemoveData(this);\n          });\n        }, n.prototype.query = function (i, e) {\n          var r = [],\n            o = this;\n          this.$element.children().each(function () {\n            var e = l(this);\n            if (e.is(\"option\") || e.is(\"optgroup\")) {\n              var t = o.item(e),\n                n = o.matches(i, t);\n              null !== n && r.push(n);\n            }\n          }), e({\n            results: r\n          });\n        }, n.prototype.addOptions = function (e) {\n          a.appendMany(this.$element, e);\n        }, n.prototype.option = function (e) {\n          var t;\n          e.children ? (t = document.createElement(\"optgroup\")).label = e.text : void 0 !== (t = document.createElement(\"option\")).textContent ? t.textContent = e.text : t.innerText = e.text, void 0 !== e.id && (t.value = e.id), e.disabled && (t.disabled = !0), e.selected && (t.selected = !0), e.title && (t.title = e.title);\n          var n = l(t),\n            i = this._normalizeItem(e);\n          return i.element = t, a.StoreData(t, \"data\", i), n;\n        }, n.prototype.item = function (e) {\n          var t = {};\n          if (null != (t = a.GetData(e[0], \"data\"))) return t;\n          if (e.is(\"option\")) t = {\n            id: e.val(),\n            text: e.text(),\n            disabled: e.prop(\"disabled\"),\n            selected: e.prop(\"selected\"),\n            title: e.prop(\"title\")\n          };else if (e.is(\"optgroup\")) {\n            t = {\n              text: e.prop(\"label\"),\n              children: [],\n              title: e.prop(\"title\")\n            };\n            for (var n = e.children(\"option\"), i = [], r = 0; r < n.length; r++) {\n              var o = l(n[r]),\n                s = this.item(o);\n              i.push(s);\n            }\n            t.children = i;\n          }\n          return (t = this._normalizeItem(t)).element = e[0], a.StoreData(e[0], \"data\", t), t;\n        }, n.prototype._normalizeItem = function (e) {\n          e !== Object(e) && (e = {\n            id: e,\n            text: e\n          });\n          return null != (e = l.extend({}, {\n            text: \"\"\n          }, e)).id && (e.id = e.id.toString()), null != e.text && (e.text = e.text.toString()), null == e._resultId && e.id && null != this.container && (e._resultId = this.generateResultId(this.container, e)), l.extend({}, {\n            selected: !1,\n            disabled: !1\n          }, e);\n        }, n.prototype.matches = function (e, t) {\n          return this.options.get(\"matcher\")(e, t);\n        }, n;\n      }), e.define(\"select2/data/array\", [\"./select\", \"../utils\", \"jquery\"], function (e, f, g) {\n        function i(e, t) {\n          this._dataToConvert = t.get(\"data\") || [], i.__super__.constructor.call(this, e, t);\n        }\n        return f.Extend(i, e), i.prototype.bind = function (e, t) {\n          i.__super__.bind.call(this, e, t), this.addOptions(this.convertToOptions(this._dataToConvert));\n        }, i.prototype.select = function (n) {\n          var e = this.$element.find(\"option\").filter(function (e, t) {\n            return t.value == n.id.toString();\n          });\n          0 === e.length && (e = this.option(n), this.addOptions(e)), i.__super__.select.call(this, n);\n        }, i.prototype.convertToOptions = function (e) {\n          var t = this,\n            n = this.$element.find(\"option\"),\n            i = n.map(function () {\n              return t.item(g(this)).id;\n            }).get(),\n            r = [];\n          function o(e) {\n            return function () {\n              return g(this).val() == e.id;\n            };\n          }\n          for (var s = 0; s < e.length; s++) {\n            var a = this._normalizeItem(e[s]);\n            if (0 <= g.inArray(a.id, i)) {\n              var l = n.filter(o(a)),\n                c = this.item(l),\n                u = g.extend(!0, {}, a, c),\n                d = this.option(u);\n              l.replaceWith(d);\n            } else {\n              var p = this.option(a);\n              if (a.children) {\n                var h = this.convertToOptions(a.children);\n                f.appendMany(p, h);\n              }\n              r.push(p);\n            }\n          }\n          return r;\n        }, i;\n      }), e.define(\"select2/data/ajax\", [\"./array\", \"../utils\", \"jquery\"], function (e, t, o) {\n        function n(e, t) {\n          this.ajaxOptions = this._applyDefaults(t.get(\"ajax\")), null != this.ajaxOptions.processResults && (this.processResults = this.ajaxOptions.processResults), n.__super__.constructor.call(this, e, t);\n        }\n        return t.Extend(n, e), n.prototype._applyDefaults = function (e) {\n          var t = {\n            data: function data(e) {\n              return o.extend({}, e, {\n                q: e.term\n              });\n            },\n            transport: function transport(e, t, n) {\n              var i = o.ajax(e);\n              return i.then(t), i.fail(n), i;\n            }\n          };\n          return o.extend({}, t, e, !0);\n        }, n.prototype.processResults = function (e) {\n          return e;\n        }, n.prototype.query = function (n, i) {\n          var r = this;\n          null != this._request && (o.isFunction(this._request.abort) && this._request.abort(), this._request = null);\n          var t = o.extend({\n            type: \"GET\"\n          }, this.ajaxOptions);\n          function e() {\n            var e = t.transport(t, function (e) {\n              var t = r.processResults(e, n);\n              r.options.get(\"debug\") && window.console && console.error && (t && t.results && o.isArray(t.results) || console.error(\"Select2: The AJAX results did not return an array in the `results` key of the response.\")), i(t);\n            }, function () {\n              \"status\" in e && (0 === e.status || \"0\" === e.status) || r.trigger(\"results:message\", {\n                message: \"errorLoading\"\n              });\n            });\n            r._request = e;\n          }\n          \"function\" == typeof t.url && (t.url = t.url.call(this.$element, n)), \"function\" == typeof t.data && (t.data = t.data.call(this.$element, n)), this.ajaxOptions.delay && null != n.term ? (this._queryTimeout && window.clearTimeout(this._queryTimeout), this._queryTimeout = window.setTimeout(e, this.ajaxOptions.delay)) : e();\n        }, n;\n      }), e.define(\"select2/data/tags\", [\"jquery\"], function (u) {\n        function e(e, t, n) {\n          var i = n.get(\"tags\"),\n            r = n.get(\"createTag\");\n          void 0 !== r && (this.createTag = r);\n          var o = n.get(\"insertTag\");\n          if (void 0 !== o && (this.insertTag = o), e.call(this, t, n), u.isArray(i)) for (var s = 0; s < i.length; s++) {\n            var a = i[s],\n              l = this._normalizeItem(a),\n              c = this.option(l);\n            this.$element.append(c);\n          }\n        }\n        return e.prototype.query = function (e, c, u) {\n          var d = this;\n          this._removeOldTags(), null != c.term && null == c.page ? e.call(this, c, function e(t, n) {\n            for (var i = t.results, r = 0; r < i.length; r++) {\n              var o = i[r],\n                s = null != o.children && !e({\n                  results: o.children\n                }, !0);\n              if ((o.text || \"\").toUpperCase() === (c.term || \"\").toUpperCase() || s) return !n && (t.data = i, void u(t));\n            }\n            if (n) return !0;\n            var a = d.createTag(c);\n            if (null != a) {\n              var l = d.option(a);\n              l.attr(\"data-select2-tag\", !0), d.addOptions([l]), d.insertTag(i, a);\n            }\n            t.results = i, u(t);\n          }) : e.call(this, c, u);\n        }, e.prototype.createTag = function (e, t) {\n          var n = u.trim(t.term);\n          return \"\" === n ? null : {\n            id: n,\n            text: n\n          };\n        }, e.prototype.insertTag = function (e, t, n) {\n          t.unshift(n);\n        }, e.prototype._removeOldTags = function (e) {\n          this.$element.find(\"option[data-select2-tag]\").each(function () {\n            this.selected || u(this).remove();\n          });\n        }, e;\n      }), e.define(\"select2/data/tokenizer\", [\"jquery\"], function (d) {\n        function e(e, t, n) {\n          var i = n.get(\"tokenizer\");\n          void 0 !== i && (this.tokenizer = i), e.call(this, t, n);\n        }\n        return e.prototype.bind = function (e, t, n) {\n          e.call(this, t, n), this.$search = t.dropdown.$search || t.selection.$search || n.find(\".select2-search__field\");\n        }, e.prototype.query = function (e, t, n) {\n          var r = this;\n          t.term = t.term || \"\";\n          var i = this.tokenizer(t, this.options, function (e) {\n            var t,\n              n = r._normalizeItem(e);\n            if (!r.$element.find(\"option\").filter(function () {\n              return d(this).val() === n.id;\n            }).length) {\n              var i = r.option(n);\n              i.attr(\"data-select2-tag\", !0), r._removeOldTags(), r.addOptions([i]);\n            }\n            t = n, r.trigger(\"select\", {\n              data: t\n            });\n          });\n          i.term !== t.term && (this.$search.length && (this.$search.val(i.term), this.$search.trigger(\"focus\")), t.term = i.term), e.call(this, t, n);\n        }, e.prototype.tokenizer = function (e, t, n, i) {\n          for (var r = n.get(\"tokenSeparators\") || [], o = t.term, s = 0, a = this.createTag || function (e) {\n              return {\n                id: e.term,\n                text: e.term\n              };\n            }; s < o.length;) {\n            var l = o[s];\n            if (-1 !== d.inArray(l, r)) {\n              var c = o.substr(0, s),\n                u = a(d.extend({}, t, {\n                  term: c\n                }));\n              null != u ? (i(u), o = o.substr(s + 1) || \"\", s = 0) : s++;\n            } else s++;\n          }\n          return {\n            term: o\n          };\n        }, e;\n      }), e.define(\"select2/data/minimumInputLength\", [], function () {\n        function e(e, t, n) {\n          this.minimumInputLength = n.get(\"minimumInputLength\"), e.call(this, t, n);\n        }\n        return e.prototype.query = function (e, t, n) {\n          t.term = t.term || \"\", t.term.length < this.minimumInputLength ? this.trigger(\"results:message\", {\n            message: \"inputTooShort\",\n            args: {\n              minimum: this.minimumInputLength,\n              input: t.term,\n              params: t\n            }\n          }) : e.call(this, t, n);\n        }, e;\n      }), e.define(\"select2/data/maximumInputLength\", [], function () {\n        function e(e, t, n) {\n          this.maximumInputLength = n.get(\"maximumInputLength\"), e.call(this, t, n);\n        }\n        return e.prototype.query = function (e, t, n) {\n          t.term = t.term || \"\", 0 < this.maximumInputLength && t.term.length > this.maximumInputLength ? this.trigger(\"results:message\", {\n            message: \"inputTooLong\",\n            args: {\n              maximum: this.maximumInputLength,\n              input: t.term,\n              params: t\n            }\n          }) : e.call(this, t, n);\n        }, e;\n      }), e.define(\"select2/data/maximumSelectionLength\", [], function () {\n        function e(e, t, n) {\n          this.maximumSelectionLength = n.get(\"maximumSelectionLength\"), e.call(this, t, n);\n        }\n        return e.prototype.bind = function (e, t, n) {\n          var i = this;\n          e.call(this, t, n), t.on(\"select\", function () {\n            i._checkIfMaximumSelected();\n          });\n        }, e.prototype.query = function (e, t, n) {\n          var i = this;\n          this._checkIfMaximumSelected(function () {\n            e.call(i, t, n);\n          });\n        }, e.prototype._checkIfMaximumSelected = function (e, n) {\n          var i = this;\n          this.current(function (e) {\n            var t = null != e ? e.length : 0;\n            0 < i.maximumSelectionLength && t >= i.maximumSelectionLength ? i.trigger(\"results:message\", {\n              message: \"maximumSelected\",\n              args: {\n                maximum: i.maximumSelectionLength\n              }\n            }) : n && n();\n          });\n        }, e;\n      }), e.define(\"select2/dropdown\", [\"jquery\", \"./utils\"], function (t, e) {\n        function n(e, t) {\n          this.$element = e, this.options = t, n.__super__.constructor.call(this);\n        }\n        return e.Extend(n, e.Observable), n.prototype.render = function () {\n          var e = t('<span class=\"select2-dropdown\"><span class=\"select2-results\"></span></span>');\n          return e.attr(\"dir\", this.options.get(\"dir\")), this.$dropdown = e;\n        }, n.prototype.bind = function () {}, n.prototype.position = function (e, t) {}, n.prototype.destroy = function () {\n          this.$dropdown.remove();\n        }, n;\n      }), e.define(\"select2/dropdown/search\", [\"jquery\", \"../utils\"], function (o, e) {\n        function t() {}\n        return t.prototype.render = function (e) {\n          var t = e.call(this),\n            n = o('<span class=\"select2-search select2-search--dropdown\"><input class=\"select2-search__field\" type=\"search\" tabindex=\"-1\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" role=\"searchbox\" aria-autocomplete=\"list\" /></span>');\n          return this.$searchContainer = n, this.$search = n.find(\"input\"), t.prepend(n), t;\n        }, t.prototype.bind = function (e, t, n) {\n          var i = this,\n            r = t.id + \"-results\";\n          e.call(this, t, n), this.$search.on(\"keydown\", function (e) {\n            i.trigger(\"keypress\", e), i._keyUpPrevented = e.isDefaultPrevented();\n          }), this.$search.on(\"input\", function (e) {\n            o(this).off(\"keyup\");\n          }), this.$search.on(\"keyup input\", function (e) {\n            i.handleSearch(e);\n          }), t.on(\"open\", function () {\n            i.$search.attr(\"tabindex\", 0), i.$search.attr(\"aria-controls\", r), i.$search.trigger(\"focus\"), window.setTimeout(function () {\n              i.$search.trigger(\"focus\");\n            }, 0);\n          }), t.on(\"close\", function () {\n            i.$search.attr(\"tabindex\", -1), i.$search.removeAttr(\"aria-controls\"), i.$search.removeAttr(\"aria-activedescendant\"), i.$search.val(\"\"), i.$search.trigger(\"blur\");\n          }), t.on(\"focus\", function () {\n            t.isOpen() || i.$search.trigger(\"focus\");\n          }), t.on(\"results:all\", function (e) {\n            null != e.query.term && \"\" !== e.query.term || (i.showSearch(e) ? i.$searchContainer.removeClass(\"select2-search--hide\") : i.$searchContainer.addClass(\"select2-search--hide\"));\n          }), t.on(\"results:focus\", function (e) {\n            e.data._resultId ? i.$search.attr(\"aria-activedescendant\", e.data._resultId) : i.$search.removeAttr(\"aria-activedescendant\");\n          });\n        }, t.prototype.handleSearch = function (e) {\n          if (!this._keyUpPrevented) {\n            var t = this.$search.val();\n            this.trigger(\"query\", {\n              term: t\n            });\n          }\n          this._keyUpPrevented = !1;\n        }, t.prototype.showSearch = function (e, t) {\n          return !0;\n        }, t;\n      }), e.define(\"select2/dropdown/hidePlaceholder\", [], function () {\n        function e(e, t, n, i) {\n          this.placeholder = this.normalizePlaceholder(n.get(\"placeholder\")), e.call(this, t, n, i);\n        }\n        return e.prototype.append = function (e, t) {\n          t.results = this.removePlaceholder(t.results), e.call(this, t);\n        }, e.prototype.normalizePlaceholder = function (e, t) {\n          return \"string\" == typeof t && (t = {\n            id: \"\",\n            text: t\n          }), t;\n        }, e.prototype.removePlaceholder = function (e, t) {\n          for (var n = t.slice(0), i = t.length - 1; 0 <= i; i--) {\n            var r = t[i];\n            this.placeholder.id === r.id && n.splice(i, 1);\n          }\n          return n;\n        }, e;\n      }), e.define(\"select2/dropdown/infiniteScroll\", [\"jquery\"], function (n) {\n        function e(e, t, n, i) {\n          this.lastParams = {}, e.call(this, t, n, i), this.$loadingMore = this.createLoadingMore(), this.loading = !1;\n        }\n        return e.prototype.append = function (e, t) {\n          this.$loadingMore.remove(), this.loading = !1, e.call(this, t), this.showLoadingMore(t) && (this.$results.append(this.$loadingMore), this.loadMoreIfNeeded());\n        }, e.prototype.bind = function (e, t, n) {\n          var i = this;\n          e.call(this, t, n), t.on(\"query\", function (e) {\n            i.lastParams = e, i.loading = !0;\n          }), t.on(\"query:append\", function (e) {\n            i.lastParams = e, i.loading = !0;\n          }), this.$results.on(\"scroll\", this.loadMoreIfNeeded.bind(this));\n        }, e.prototype.loadMoreIfNeeded = function () {\n          var e = n.contains(document.documentElement, this.$loadingMore[0]);\n          if (!this.loading && e) {\n            var t = this.$results.offset().top + this.$results.outerHeight(!1);\n            this.$loadingMore.offset().top + this.$loadingMore.outerHeight(!1) <= t + 50 && this.loadMore();\n          }\n        }, e.prototype.loadMore = function () {\n          this.loading = !0;\n          var e = n.extend({}, {\n            page: 1\n          }, this.lastParams);\n          e.page++, this.trigger(\"query:append\", e);\n        }, e.prototype.showLoadingMore = function (e, t) {\n          return t.pagination && t.pagination.more;\n        }, e.prototype.createLoadingMore = function () {\n          var e = n('<li class=\"select2-results__option select2-results__option--load-more\"role=\"option\" aria-disabled=\"true\"></li>'),\n            t = this.options.get(\"translations\").get(\"loadingMore\");\n          return e.html(t(this.lastParams)), e;\n        }, e;\n      }), e.define(\"select2/dropdown/attachBody\", [\"jquery\", \"../utils\"], function (f, a) {\n        function e(e, t, n) {\n          this.$dropdownParent = f(n.get(\"dropdownParent\") || document.body), e.call(this, t, n);\n        }\n        return e.prototype.bind = function (e, t, n) {\n          var i = this;\n          e.call(this, t, n), t.on(\"open\", function () {\n            i._showDropdown(), i._attachPositioningHandler(t), i._bindContainerResultHandlers(t);\n          }), t.on(\"close\", function () {\n            i._hideDropdown(), i._detachPositioningHandler(t);\n          }), this.$dropdownContainer.on(\"mousedown\", function (e) {\n            e.stopPropagation();\n          });\n        }, e.prototype.destroy = function (e) {\n          e.call(this), this.$dropdownContainer.remove();\n        }, e.prototype.position = function (e, t, n) {\n          t.attr(\"class\", n.attr(\"class\")), t.removeClass(\"select2\"), t.addClass(\"select2-container--open\"), t.css({\n            position: \"absolute\",\n            top: -999999\n          }), this.$container = n;\n        }, e.prototype.render = function (e) {\n          var t = f(\"<span></span>\"),\n            n = e.call(this);\n          return t.append(n), this.$dropdownContainer = t;\n        }, e.prototype._hideDropdown = function (e) {\n          this.$dropdownContainer.detach();\n        }, e.prototype._bindContainerResultHandlers = function (e, t) {\n          if (!this._containerResultsHandlersBound) {\n            var n = this;\n            t.on(\"results:all\", function () {\n              n._positionDropdown(), n._resizeDropdown();\n            }), t.on(\"results:append\", function () {\n              n._positionDropdown(), n._resizeDropdown();\n            }), t.on(\"results:message\", function () {\n              n._positionDropdown(), n._resizeDropdown();\n            }), t.on(\"select\", function () {\n              n._positionDropdown(), n._resizeDropdown();\n            }), t.on(\"unselect\", function () {\n              n._positionDropdown(), n._resizeDropdown();\n            }), this._containerResultsHandlersBound = !0;\n          }\n        }, e.prototype._attachPositioningHandler = function (e, t) {\n          var n = this,\n            i = \"scroll.select2.\" + t.id,\n            r = \"resize.select2.\" + t.id,\n            o = \"orientationchange.select2.\" + t.id,\n            s = this.$container.parents().filter(a.hasScroll);\n          s.each(function () {\n            a.StoreData(this, \"select2-scroll-position\", {\n              x: f(this).scrollLeft(),\n              y: f(this).scrollTop()\n            });\n          }), s.on(i, function (e) {\n            var t = a.GetData(this, \"select2-scroll-position\");\n            f(this).scrollTop(t.y);\n          }), f(window).on(i + \" \" + r + \" \" + o, function (e) {\n            n._positionDropdown(), n._resizeDropdown();\n          });\n        }, e.prototype._detachPositioningHandler = function (e, t) {\n          var n = \"scroll.select2.\" + t.id,\n            i = \"resize.select2.\" + t.id,\n            r = \"orientationchange.select2.\" + t.id;\n          this.$container.parents().filter(a.hasScroll).off(n), f(window).off(n + \" \" + i + \" \" + r);\n        }, e.prototype._positionDropdown = function () {\n          var e = f(window),\n            t = this.$dropdown.hasClass(\"select2-dropdown--above\"),\n            n = this.$dropdown.hasClass(\"select2-dropdown--below\"),\n            i = null,\n            r = this.$container.offset();\n          r.bottom = r.top + this.$container.outerHeight(!1);\n          var o = {\n            height: this.$container.outerHeight(!1)\n          };\n          o.top = r.top, o.bottom = r.top + o.height;\n          var s = this.$dropdown.outerHeight(!1),\n            a = e.scrollTop(),\n            l = e.scrollTop() + e.height(),\n            c = a < r.top - s,\n            u = l > r.bottom + s,\n            d = {\n              left: r.left,\n              top: o.bottom\n            },\n            p = this.$dropdownParent;\n          \"static\" === p.css(\"position\") && (p = p.offsetParent());\n          var h = {\n            top: 0,\n            left: 0\n          };\n          (f.contains(document.body, p[0]) || p[0].isConnected) && (h = p.offset()), d.top -= h.top, d.left -= h.left, t || n || (i = \"below\"), u || !c || t ? !c && u && t && (i = \"below\") : i = \"above\", (\"above\" == i || t && \"below\" !== i) && (d.top = o.top - h.top - s), null != i && (this.$dropdown.removeClass(\"select2-dropdown--below select2-dropdown--above\").addClass(\"select2-dropdown--\" + i), this.$container.removeClass(\"select2-container--below select2-container--above\").addClass(\"select2-container--\" + i)), this.$dropdownContainer.css(d);\n        }, e.prototype._resizeDropdown = function () {\n          var e = {\n            width: this.$container.outerWidth(!1) + \"px\"\n          };\n          this.options.get(\"dropdownAutoWidth\") && (e.minWidth = e.width, e.position = \"relative\", e.width = \"auto\"), this.$dropdown.css(e);\n        }, e.prototype._showDropdown = function (e) {\n          this.$dropdownContainer.appendTo(this.$dropdownParent), this._positionDropdown(), this._resizeDropdown();\n        }, e;\n      }), e.define(\"select2/dropdown/minimumResultsForSearch\", [], function () {\n        function e(e, t, n, i) {\n          this.minimumResultsForSearch = n.get(\"minimumResultsForSearch\"), this.minimumResultsForSearch < 0 && (this.minimumResultsForSearch = 1 / 0), e.call(this, t, n, i);\n        }\n        return e.prototype.showSearch = function (e, t) {\n          return !(function e(t) {\n            for (var n = 0, i = 0; i < t.length; i++) {\n              var r = t[i];\n              r.children ? n += e(r.children) : n++;\n            }\n            return n;\n          }(t.data.results) < this.minimumResultsForSearch) && e.call(this, t);\n        }, e;\n      }), e.define(\"select2/dropdown/selectOnClose\", [\"../utils\"], function (o) {\n        function e() {}\n        return e.prototype.bind = function (e, t, n) {\n          var i = this;\n          e.call(this, t, n), t.on(\"close\", function (e) {\n            i._handleSelectOnClose(e);\n          });\n        }, e.prototype._handleSelectOnClose = function (e, t) {\n          if (t && null != t.originalSelect2Event) {\n            var n = t.originalSelect2Event;\n            if (\"select\" === n._type || \"unselect\" === n._type) return;\n          }\n          var i = this.getHighlightedResults();\n          if (!(i.length < 1)) {\n            var r = o.GetData(i[0], \"data\");\n            null != r.element && r.element.selected || null == r.element && r.selected || this.trigger(\"select\", {\n              data: r\n            });\n          }\n        }, e;\n      }), e.define(\"select2/dropdown/closeOnSelect\", [], function () {\n        function e() {}\n        return e.prototype.bind = function (e, t, n) {\n          var i = this;\n          e.call(this, t, n), t.on(\"select\", function (e) {\n            i._selectTriggered(e);\n          }), t.on(\"unselect\", function (e) {\n            i._selectTriggered(e);\n          });\n        }, e.prototype._selectTriggered = function (e, t) {\n          var n = t.originalEvent;\n          n && (n.ctrlKey || n.metaKey) || this.trigger(\"close\", {\n            originalEvent: n,\n            originalSelect2Event: t\n          });\n        }, e;\n      }), e.define(\"select2/i18n/en\", [], function () {\n        return {\n          errorLoading: function errorLoading() {\n            return \"The results could not be loaded.\";\n          },\n          inputTooLong: function inputTooLong(e) {\n            var t = e.input.length - e.maximum,\n              n = \"Please delete \" + t + \" character\";\n            return 1 != t && (n += \"s\"), n;\n          },\n          inputTooShort: function inputTooShort(e) {\n            return \"Please enter \" + (e.minimum - e.input.length) + \" or more characters\";\n          },\n          loadingMore: function loadingMore() {\n            return \"Loading more resultsâ¦\";\n          },\n          maximumSelected: function maximumSelected(e) {\n            var t = \"You can only select \" + e.maximum + \" item\";\n            return 1 != e.maximum && (t += \"s\"), t;\n          },\n          noResults: function noResults() {\n            return \"No results found\";\n          },\n          searching: function searching() {\n            return \"Searchingâ¦\";\n          },\n          removeAllItems: function removeAllItems() {\n            return \"Remove all items\";\n          }\n        };\n      }), e.define(\"select2/defaults\", [\"jquery\", \"require\", \"./results\", \"./selection/single\", \"./selection/multiple\", \"./selection/placeholder\", \"./selection/allowClear\", \"./selection/search\", \"./selection/eventRelay\", \"./utils\", \"./translation\", \"./diacritics\", \"./data/select\", \"./data/array\", \"./data/ajax\", \"./data/tags\", \"./data/tokenizer\", \"./data/minimumInputLength\", \"./data/maximumInputLength\", \"./data/maximumSelectionLength\", \"./dropdown\", \"./dropdown/search\", \"./dropdown/hidePlaceholder\", \"./dropdown/infiniteScroll\", \"./dropdown/attachBody\", \"./dropdown/minimumResultsForSearch\", \"./dropdown/selectOnClose\", \"./dropdown/closeOnSelect\", \"./i18n/en\"], function (c, u, d, p, h, f, g, m, v, y, s, t, _, w, $, b, A, x, D, S, C, E, O, T, q, j, L, I, e) {\n        function n() {\n          this.reset();\n        }\n        return n.prototype.apply = function (e) {\n          if (null == (e = c.extend(!0, {}, this.defaults, e)).dataAdapter) {\n            if (null != e.ajax ? e.dataAdapter = $ : null != e.data ? e.dataAdapter = w : e.dataAdapter = _, 0 < e.minimumInputLength && (e.dataAdapter = y.Decorate(e.dataAdapter, x)), 0 < e.maximumInputLength && (e.dataAdapter = y.Decorate(e.dataAdapter, D)), 0 < e.maximumSelectionLength && (e.dataAdapter = y.Decorate(e.dataAdapter, S)), e.tags && (e.dataAdapter = y.Decorate(e.dataAdapter, b)), null == e.tokenSeparators && null == e.tokenizer || (e.dataAdapter = y.Decorate(e.dataAdapter, A)), null != e.query) {\n              var t = u(e.amdBase + \"compat/query\");\n              e.dataAdapter = y.Decorate(e.dataAdapter, t);\n            }\n            if (null != e.initSelection) {\n              var n = u(e.amdBase + \"compat/initSelection\");\n              e.dataAdapter = y.Decorate(e.dataAdapter, n);\n            }\n          }\n          if (null == e.resultsAdapter && (e.resultsAdapter = d, null != e.ajax && (e.resultsAdapter = y.Decorate(e.resultsAdapter, T)), null != e.placeholder && (e.resultsAdapter = y.Decorate(e.resultsAdapter, O)), e.selectOnClose && (e.resultsAdapter = y.Decorate(e.resultsAdapter, L))), null == e.dropdownAdapter) {\n            if (e.multiple) e.dropdownAdapter = C;else {\n              var i = y.Decorate(C, E);\n              e.dropdownAdapter = i;\n            }\n            if (0 !== e.minimumResultsForSearch && (e.dropdownAdapter = y.Decorate(e.dropdownAdapter, j)), e.closeOnSelect && (e.dropdownAdapter = y.Decorate(e.dropdownAdapter, I)), null != e.dropdownCssClass || null != e.dropdownCss || null != e.adaptDropdownCssClass) {\n              var r = u(e.amdBase + \"compat/dropdownCss\");\n              e.dropdownAdapter = y.Decorate(e.dropdownAdapter, r);\n            }\n            e.dropdownAdapter = y.Decorate(e.dropdownAdapter, q);\n          }\n          if (null == e.selectionAdapter) {\n            if (e.multiple ? e.selectionAdapter = h : e.selectionAdapter = p, null != e.placeholder && (e.selectionAdapter = y.Decorate(e.selectionAdapter, f)), e.allowClear && (e.selectionAdapter = y.Decorate(e.selectionAdapter, g)), e.multiple && (e.selectionAdapter = y.Decorate(e.selectionAdapter, m)), null != e.containerCssClass || null != e.containerCss || null != e.adaptContainerCssClass) {\n              var o = u(e.amdBase + \"compat/containerCss\");\n              e.selectionAdapter = y.Decorate(e.selectionAdapter, o);\n            }\n            e.selectionAdapter = y.Decorate(e.selectionAdapter, v);\n          }\n          e.language = this._resolveLanguage(e.language), e.language.push(\"en\");\n          for (var s = [], a = 0; a < e.language.length; a++) {\n            var l = e.language[a];\n            -1 === s.indexOf(l) && s.push(l);\n          }\n          return e.language = s, e.translations = this._processTranslations(e.language, e.debug), e;\n        }, n.prototype.reset = function () {\n          function a(e) {\n            return e.replace(/[^\\u0000-\\u007E]/g, function (e) {\n              return t[e] || e;\n            });\n          }\n          this.defaults = {\n            amdBase: \"./\",\n            amdLanguageBase: \"./i18n/\",\n            closeOnSelect: !0,\n            debug: !1,\n            dropdownAutoWidth: !1,\n            escapeMarkup: y.escapeMarkup,\n            language: {},\n            matcher: function e(t, n) {\n              if (\"\" === c.trim(t.term)) return n;\n              if (n.children && 0 < n.children.length) {\n                for (var i = c.extend(!0, {}, n), r = n.children.length - 1; 0 <= r; r--) null == e(t, n.children[r]) && i.children.splice(r, 1);\n                return 0 < i.children.length ? i : e(t, i);\n              }\n              var o = a(n.text).toUpperCase(),\n                s = a(t.term).toUpperCase();\n              return -1 < o.indexOf(s) ? n : null;\n            },\n            minimumInputLength: 0,\n            maximumInputLength: 0,\n            maximumSelectionLength: 0,\n            minimumResultsForSearch: 0,\n            selectOnClose: !1,\n            scrollAfterSelect: !1,\n            sorter: function sorter(e) {\n              return e;\n            },\n            templateResult: function templateResult(e) {\n              return e.text;\n            },\n            templateSelection: function templateSelection(e) {\n              return e.text;\n            },\n            theme: \"default\",\n            width: \"resolve\"\n          };\n        }, n.prototype.applyFromElement = function (e, t) {\n          var n = e.language,\n            i = this.defaults.language,\n            r = t.prop(\"lang\"),\n            o = t.closest(\"[lang]\").prop(\"lang\"),\n            s = Array.prototype.concat.call(this._resolveLanguage(r), this._resolveLanguage(n), this._resolveLanguage(i), this._resolveLanguage(o));\n          return e.language = s, e;\n        }, n.prototype._resolveLanguage = function (e) {\n          if (!e) return [];\n          if (c.isEmptyObject(e)) return [];\n          if (c.isPlainObject(e)) return [e];\n          var t;\n          t = c.isArray(e) ? e : [e];\n          for (var n = [], i = 0; i < t.length; i++) if (n.push(t[i]), \"string\" == typeof t[i] && 0 < t[i].indexOf(\"-\")) {\n            var r = t[i].split(\"-\")[0];\n            n.push(r);\n          }\n          return n;\n        }, n.prototype._processTranslations = function (e, t) {\n          for (var n = new s(), i = 0; i < e.length; i++) {\n            var r = new s(),\n              o = e[i];\n            if (\"string\" == typeof o) try {\n              r = s.loadPath(o);\n            } catch (e) {\n              try {\n                o = this.defaults.amdLanguageBase + o, r = s.loadPath(o);\n              } catch (e) {\n                t && window.console && console.warn && console.warn('Select2: The language file for \"' + o + '\" could not be automatically loaded. A fallback will be used instead.');\n              }\n            } else r = c.isPlainObject(o) ? new s(o) : o;\n            n.extend(r);\n          }\n          return n;\n        }, n.prototype.set = function (e, t) {\n          var n = {};\n          n[c.camelCase(e)] = t;\n          var i = y._convertData(n);\n          c.extend(!0, this.defaults, i);\n        }, new n();\n      }), e.define(\"select2/options\", [\"require\", \"jquery\", \"./defaults\", \"./utils\"], function (i, d, r, p) {\n        function e(e, t) {\n          if (this.options = e, null != t && this.fromElement(t), null != t && (this.options = r.applyFromElement(this.options, t)), this.options = r.apply(this.options), t && t.is(\"input\")) {\n            var n = i(this.get(\"amdBase\") + \"compat/inputData\");\n            this.options.dataAdapter = p.Decorate(this.options.dataAdapter, n);\n          }\n        }\n        return e.prototype.fromElement = function (e) {\n          var t = [\"select2\"];\n          null == this.options.multiple && (this.options.multiple = e.prop(\"multiple\")), null == this.options.disabled && (this.options.disabled = e.prop(\"disabled\")), null == this.options.dir && (e.prop(\"dir\") ? this.options.dir = e.prop(\"dir\") : e.closest(\"[dir]\").prop(\"dir\") ? this.options.dir = e.closest(\"[dir]\").prop(\"dir\") : this.options.dir = \"ltr\"), e.prop(\"disabled\", this.options.disabled), e.prop(\"multiple\", this.options.multiple), p.GetData(e[0], \"select2Tags\") && (this.options.debug && window.console && console.warn && console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags=\"true\"` attributes and will be removed in future versions of Select2.'), p.StoreData(e[0], \"data\", p.GetData(e[0], \"select2Tags\")), p.StoreData(e[0], \"tags\", !0)), p.GetData(e[0], \"ajaxUrl\") && (this.options.debug && window.console && console.warn && console.warn(\"Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2.\"), e.attr(\"ajax--url\", p.GetData(e[0], \"ajaxUrl\")), p.StoreData(e[0], \"ajax-Url\", p.GetData(e[0], \"ajaxUrl\")));\n          var n = {};\n          function i(e, t) {\n            return t.toUpperCase();\n          }\n          for (var r = 0; r < e[0].attributes.length; r++) {\n            var o = e[0].attributes[r].name,\n              s = \"data-\";\n            if (o.substr(0, s.length) == s) {\n              var a = o.substring(s.length),\n                l = p.GetData(e[0], a);\n              n[a.replace(/-([a-z])/g, i)] = l;\n            }\n          }\n          d.fn.jquery && \"1.\" == d.fn.jquery.substr(0, 2) && e[0].dataset && (n = d.extend(!0, {}, e[0].dataset, n));\n          var c = d.extend(!0, {}, p.GetData(e[0]), n);\n          for (var u in c = p._convertData(c)) -1 < d.inArray(u, t) || (d.isPlainObject(this.options[u]) ? d.extend(this.options[u], c[u]) : this.options[u] = c[u]);\n          return this;\n        }, e.prototype.get = function (e) {\n          return this.options[e];\n        }, e.prototype.set = function (e, t) {\n          this.options[e] = t;\n        }, e;\n      }), e.define(\"select2/core\", [\"jquery\", \"./options\", \"./utils\", \"./keys\"], function (o, c, u, i) {\n        var d = function d(e, t) {\n          null != u.GetData(e[0], \"select2\") && u.GetData(e[0], \"select2\").destroy(), this.$element = e, this.id = this._generateId(e), t = t || {}, this.options = new c(t, e), d.__super__.constructor.call(this);\n          var n = e.attr(\"tabindex\") || 0;\n          u.StoreData(e[0], \"old-tabindex\", n), e.attr(\"tabindex\", \"-1\");\n          var i = this.options.get(\"dataAdapter\");\n          this.dataAdapter = new i(e, this.options);\n          var r = this.render();\n          this._placeContainer(r);\n          var o = this.options.get(\"selectionAdapter\");\n          this.selection = new o(e, this.options), this.$selection = this.selection.render(), this.selection.position(this.$selection, r);\n          var s = this.options.get(\"dropdownAdapter\");\n          this.dropdown = new s(e, this.options), this.$dropdown = this.dropdown.render(), this.dropdown.position(this.$dropdown, r);\n          var a = this.options.get(\"resultsAdapter\");\n          this.results = new a(e, this.options, this.dataAdapter), this.$results = this.results.render(), this.results.position(this.$results, this.$dropdown);\n          var l = this;\n          this._bindAdapters(), this._registerDomEvents(), this._registerDataEvents(), this._registerSelectionEvents(), this._registerDropdownEvents(), this._registerResultsEvents(), this._registerEvents(), this.dataAdapter.current(function (e) {\n            l.trigger(\"selection:update\", {\n              data: e\n            });\n          }), e.addClass(\"select2-hidden-accessible\"), e.attr(\"aria-hidden\", \"true\"), this._syncAttributes(), u.StoreData(e[0], \"select2\", this), e.data(\"select2\", this);\n        };\n        return u.Extend(d, u.Observable), d.prototype._generateId = function (e) {\n          return \"select2-\" + (null != e.attr(\"id\") ? e.attr(\"id\") : null != e.attr(\"name\") ? e.attr(\"name\") + \"-\" + u.generateChars(2) : u.generateChars(4)).replace(/(:|\\.|\\[|\\]|,)/g, \"\");\n        }, d.prototype._placeContainer = function (e) {\n          e.insertAfter(this.$element);\n          var t = this._resolveWidth(this.$element, this.options.get(\"width\"));\n          null != t && e.css(\"width\", t);\n        }, d.prototype._resolveWidth = function (e, t) {\n          var n = /^width:(([-+]?([0-9]*\\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;\n          if (\"resolve\" == t) {\n            var i = this._resolveWidth(e, \"style\");\n            return null != i ? i : this._resolveWidth(e, \"element\");\n          }\n          if (\"element\" == t) {\n            var r = e.outerWidth(!1);\n            return r <= 0 ? \"auto\" : r + \"px\";\n          }\n          if (\"style\" != t) return \"computedstyle\" != t ? t : window.getComputedStyle(e[0]).width;\n          var o = e.attr(\"style\");\n          if (\"string\" != typeof o) return null;\n          for (var s = o.split(\";\"), a = 0, l = s.length; a < l; a += 1) {\n            var c = s[a].replace(/\\s/g, \"\").match(n);\n            if (null !== c && 1 <= c.length) return c[1];\n          }\n          return null;\n        }, d.prototype._bindAdapters = function () {\n          this.dataAdapter.bind(this, this.$container), this.selection.bind(this, this.$container), this.dropdown.bind(this, this.$container), this.results.bind(this, this.$container);\n        }, d.prototype._registerDomEvents = function () {\n          var t = this;\n          this.$element.on(\"change.select2\", function () {\n            t.dataAdapter.current(function (e) {\n              t.trigger(\"selection:update\", {\n                data: e\n              });\n            });\n          }), this.$element.on(\"focus.select2\", function (e) {\n            t.trigger(\"focus\", e);\n          }), this._syncA = u.bind(this._syncAttributes, this), this._syncS = u.bind(this._syncSubtree, this), this.$element[0].attachEvent && this.$element[0].attachEvent(\"onpropertychange\", this._syncA);\n          var e = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;\n          null != e ? (this._observer = new e(function (e) {\n            t._syncA(), t._syncS(null, e);\n          }), this._observer.observe(this.$element[0], {\n            attributes: !0,\n            childList: !0,\n            subtree: !1\n          })) : this.$element[0].addEventListener && (this.$element[0].addEventListener(\"DOMAttrModified\", t._syncA, !1), this.$element[0].addEventListener(\"DOMNodeInserted\", t._syncS, !1), this.$element[0].addEventListener(\"DOMNodeRemoved\", t._syncS, !1));\n        }, d.prototype._registerDataEvents = function () {\n          var n = this;\n          this.dataAdapter.on(\"*\", function (e, t) {\n            n.trigger(e, t);\n          });\n        }, d.prototype._registerSelectionEvents = function () {\n          var n = this,\n            i = [\"toggle\", \"focus\"];\n          this.selection.on(\"toggle\", function () {\n            n.toggleDropdown();\n          }), this.selection.on(\"focus\", function (e) {\n            n.focus(e);\n          }), this.selection.on(\"*\", function (e, t) {\n            -1 === o.inArray(e, i) && n.trigger(e, t);\n          });\n        }, d.prototype._registerDropdownEvents = function () {\n          var n = this;\n          this.dropdown.on(\"*\", function (e, t) {\n            n.trigger(e, t);\n          });\n        }, d.prototype._registerResultsEvents = function () {\n          var n = this;\n          this.results.on(\"*\", function (e, t) {\n            n.trigger(e, t);\n          });\n        }, d.prototype._registerEvents = function () {\n          var n = this;\n          this.on(\"open\", function () {\n            n.$container.addClass(\"select2-container--open\");\n          }), this.on(\"close\", function () {\n            n.$container.removeClass(\"select2-container--open\");\n          }), this.on(\"enable\", function () {\n            n.$container.removeClass(\"select2-container--disabled\");\n          }), this.on(\"disable\", function () {\n            n.$container.addClass(\"select2-container--disabled\");\n          }), this.on(\"blur\", function () {\n            n.$container.removeClass(\"select2-container--focus\");\n          }), this.on(\"query\", function (t) {\n            n.isOpen() || n.trigger(\"open\", {}), this.dataAdapter.query(t, function (e) {\n              n.trigger(\"results:all\", {\n                data: e,\n                query: t\n              });\n            });\n          }), this.on(\"query:append\", function (t) {\n            this.dataAdapter.query(t, function (e) {\n              n.trigger(\"results:append\", {\n                data: e,\n                query: t\n              });\n            });\n          }), this.on(\"keypress\", function (e) {\n            var t = e.which;\n            n.isOpen() ? t === i.ESC || t === i.TAB || t === i.UP && e.altKey ? (n.close(e), e.preventDefault()) : t === i.ENTER ? (n.trigger(\"results:select\", {}), e.preventDefault()) : t === i.SPACE && e.ctrlKey ? (n.trigger(\"results:toggle\", {}), e.preventDefault()) : t === i.UP ? (n.trigger(\"results:previous\", {}), e.preventDefault()) : t === i.DOWN && (n.trigger(\"results:next\", {}), e.preventDefault()) : (t === i.ENTER || t === i.SPACE || t === i.DOWN && e.altKey) && (n.open(), e.preventDefault());\n          });\n        }, d.prototype._syncAttributes = function () {\n          this.options.set(\"disabled\", this.$element.prop(\"disabled\")), this.isDisabled() ? (this.isOpen() && this.close(), this.trigger(\"disable\", {})) : this.trigger(\"enable\", {});\n        }, d.prototype._isChangeMutation = function (e, t) {\n          var n = !1,\n            i = this;\n          if (!e || !e.target || \"OPTION\" === e.target.nodeName || \"OPTGROUP\" === e.target.nodeName) {\n            if (t) {\n              if (t.addedNodes && 0 < t.addedNodes.length) for (var r = 0; r < t.addedNodes.length; r++) {\n                t.addedNodes[r].selected && (n = !0);\n              } else t.removedNodes && 0 < t.removedNodes.length ? n = !0 : o.isArray(t) && o.each(t, function (e, t) {\n                if (i._isChangeMutation(e, t)) return !(n = !0);\n              });\n            } else n = !0;\n            return n;\n          }\n        }, d.prototype._syncSubtree = function (e, t) {\n          var n = this._isChangeMutation(e, t),\n            i = this;\n          n && this.dataAdapter.current(function (e) {\n            i.trigger(\"selection:update\", {\n              data: e\n            });\n          });\n        }, d.prototype.trigger = function (e, t) {\n          var n = d.__super__.trigger,\n            i = {\n              open: \"opening\",\n              close: \"closing\",\n              select: \"selecting\",\n              unselect: \"unselecting\",\n              clear: \"clearing\"\n            };\n          if (void 0 === t && (t = {}), e in i) {\n            var r = i[e],\n              o = {\n                prevented: !1,\n                name: e,\n                args: t\n              };\n            if (n.call(this, r, o), o.prevented) return void (t.prevented = !0);\n          }\n          n.call(this, e, t);\n        }, d.prototype.toggleDropdown = function () {\n          this.isDisabled() || (this.isOpen() ? this.close() : this.open());\n        }, d.prototype.open = function () {\n          this.isOpen() || this.isDisabled() || this.trigger(\"query\", {});\n        }, d.prototype.close = function (e) {\n          this.isOpen() && this.trigger(\"close\", {\n            originalEvent: e\n          });\n        }, d.prototype.isEnabled = function () {\n          return !this.isDisabled();\n        }, d.prototype.isDisabled = function () {\n          return this.options.get(\"disabled\");\n        }, d.prototype.isOpen = function () {\n          return this.$container.hasClass(\"select2-container--open\");\n        }, d.prototype.hasFocus = function () {\n          return this.$container.hasClass(\"select2-container--focus\");\n        }, d.prototype.focus = function (e) {\n          this.hasFocus() || (this.$container.addClass(\"select2-container--focus\"), this.trigger(\"focus\", {}));\n        }, d.prototype.enable = function (e) {\n          this.options.get(\"debug\") && window.console && console.warn && console.warn('Select2: The `select2(\"enable\")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop(\"disabled\") instead.'), null != e && 0 !== e.length || (e = [!0]);\n          var t = !e[0];\n          this.$element.prop(\"disabled\", t);\n        }, d.prototype.data = function () {\n          this.options.get(\"debug\") && 0 < arguments.length && window.console && console.warn && console.warn('Select2: Data can no longer be set using `select2(\"data\")`. You should consider setting the value instead using `$element.val()`.');\n          var t = [];\n          return this.dataAdapter.current(function (e) {\n            t = e;\n          }), t;\n        }, d.prototype.val = function (e) {\n          if (this.options.get(\"debug\") && window.console && console.warn && console.warn('Select2: The `select2(\"val\")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'), null == e || 0 === e.length) return this.$element.val();\n          var t = e[0];\n          o.isArray(t) && (t = o.map(t, function (e) {\n            return e.toString();\n          })), this.$element.val(t).trigger(\"input\").trigger(\"change\");\n        }, d.prototype.destroy = function () {\n          this.$container.remove(), this.$element[0].detachEvent && this.$element[0].detachEvent(\"onpropertychange\", this._syncA), null != this._observer ? (this._observer.disconnect(), this._observer = null) : this.$element[0].removeEventListener && (this.$element[0].removeEventListener(\"DOMAttrModified\", this._syncA, !1), this.$element[0].removeEventListener(\"DOMNodeInserted\", this._syncS, !1), this.$element[0].removeEventListener(\"DOMNodeRemoved\", this._syncS, !1)), this._syncA = null, this._syncS = null, this.$element.off(\".select2\"), this.$element.attr(\"tabindex\", u.GetData(this.$element[0], \"old-tabindex\")), this.$element.removeClass(\"select2-hidden-accessible\"), this.$element.attr(\"aria-hidden\", \"false\"), u.RemoveData(this.$element[0]), this.$element.removeData(\"select2\"), this.dataAdapter.destroy(), this.selection.destroy(), this.dropdown.destroy(), this.results.destroy(), this.dataAdapter = null, this.selection = null, this.dropdown = null, this.results = null;\n        }, d.prototype.render = function () {\n          var e = o('<span class=\"select2 select2-container\"><span class=\"selection\"></span><span class=\"dropdown-wrapper\" aria-hidden=\"true\"></span></span>');\n          return e.attr(\"dir\", this.options.get(\"dir\")), this.$container = e, this.$container.addClass(\"select2-container--\" + this.options.get(\"theme\")), u.StoreData(e[0], \"element\", this.$element), e;\n        }, d;\n      }), e.define(\"select2/compat/utils\", [\"jquery\"], function (s) {\n        return {\n          syncCssClasses: function syncCssClasses(e, t, n) {\n            var i,\n              r,\n              o = [];\n            (i = s.trim(e.attr(\"class\"))) && s((i = \"\" + i).split(/\\s+/)).each(function () {\n              0 === this.indexOf(\"select2-\") && o.push(this);\n            }), (i = s.trim(t.attr(\"class\"))) && s((i = \"\" + i).split(/\\s+/)).each(function () {\n              0 !== this.indexOf(\"select2-\") && null != (r = n(this)) && o.push(r);\n            }), e.attr(\"class\", o.join(\" \"));\n          }\n        };\n      }), e.define(\"select2/compat/containerCss\", [\"jquery\", \"./utils\"], function (s, a) {\n        function l(e) {\n          return null;\n        }\n        function e() {}\n        return e.prototype.render = function (e) {\n          var t = e.call(this),\n            n = this.options.get(\"containerCssClass\") || \"\";\n          s.isFunction(n) && (n = n(this.$element));\n          var i = this.options.get(\"adaptContainerCssClass\");\n          if (i = i || l, -1 !== n.indexOf(\":all:\")) {\n            n = n.replace(\":all:\", \"\");\n            var r = i;\n            i = function i(e) {\n              var t = r(e);\n              return null != t ? t + \" \" + e : e;\n            };\n          }\n          var o = this.options.get(\"containerCss\") || {};\n          return s.isFunction(o) && (o = o(this.$element)), a.syncCssClasses(t, this.$element, i), t.css(o), t.addClass(n), t;\n        }, e;\n      }), e.define(\"select2/compat/dropdownCss\", [\"jquery\", \"./utils\"], function (s, a) {\n        function l(e) {\n          return null;\n        }\n        function e() {}\n        return e.prototype.render = function (e) {\n          var t = e.call(this),\n            n = this.options.get(\"dropdownCssClass\") || \"\";\n          s.isFunction(n) && (n = n(this.$element));\n          var i = this.options.get(\"adaptDropdownCssClass\");\n          if (i = i || l, -1 !== n.indexOf(\":all:\")) {\n            n = n.replace(\":all:\", \"\");\n            var r = i;\n            i = function i(e) {\n              var t = r(e);\n              return null != t ? t + \" \" + e : e;\n            };\n          }\n          var o = this.options.get(\"dropdownCss\") || {};\n          return s.isFunction(o) && (o = o(this.$element)), a.syncCssClasses(t, this.$element, i), t.css(o), t.addClass(n), t;\n        }, e;\n      }), e.define(\"select2/compat/initSelection\", [\"jquery\"], function (i) {\n        function e(e, t, n) {\n          n.get(\"debug\") && window.console && console.warn && console.warn(\"Select2: The `initSelection` option has been deprecated in favor of a custom data adapter that overrides the `current` method. This method is now called multiple times instead of a single time when the instance is initialized. Support will be removed for the `initSelection` option in future versions of Select2\"), this.initSelection = n.get(\"initSelection\"), this._isInitialized = !1, e.call(this, t, n);\n        }\n        return e.prototype.current = function (e, t) {\n          var n = this;\n          this._isInitialized ? e.call(this, t) : this.initSelection.call(null, this.$element, function (e) {\n            n._isInitialized = !0, i.isArray(e) || (e = [e]), t(e);\n          });\n        }, e;\n      }), e.define(\"select2/compat/inputData\", [\"jquery\", \"../utils\"], function (s, i) {\n        function e(e, t, n) {\n          this._currentData = [], this._valueSeparator = n.get(\"valueSeparator\") || \",\", \"hidden\" === t.prop(\"type\") && n.get(\"debug\") && console && console.warn && console.warn(\"Select2: Using a hidden input with Select2 is no longer supported and may stop working in the future. It is recommended to use a `<select>` element instead.\"), e.call(this, t, n);\n        }\n        return e.prototype.current = function (e, t) {\n          function i(e, t) {\n            var n = [];\n            return e.selected || -1 !== s.inArray(e.id, t) ? (e.selected = !0, n.push(e)) : e.selected = !1, e.children && n.push.apply(n, i(e.children, t)), n;\n          }\n          for (var n = [], r = 0; r < this._currentData.length; r++) {\n            var o = this._currentData[r];\n            n.push.apply(n, i(o, this.$element.val().split(this._valueSeparator)));\n          }\n          t(n);\n        }, e.prototype.select = function (e, t) {\n          if (this.options.get(\"multiple\")) {\n            var n = this.$element.val();\n            n += this._valueSeparator + t.id, this.$element.val(n), this.$element.trigger(\"input\").trigger(\"change\");\n          } else this.current(function (e) {\n            s.map(e, function (e) {\n              e.selected = !1;\n            });\n          }), this.$element.val(t.id), this.$element.trigger(\"input\").trigger(\"change\");\n        }, e.prototype.unselect = function (e, r) {\n          var o = this;\n          r.selected = !1, this.current(function (e) {\n            for (var t = [], n = 0; n < e.length; n++) {\n              var i = e[n];\n              r.id != i.id && t.push(i.id);\n            }\n            o.$element.val(t.join(o._valueSeparator)), o.$element.trigger(\"input\").trigger(\"change\");\n          });\n        }, e.prototype.query = function (e, t, n) {\n          for (var i = [], r = 0; r < this._currentData.length; r++) {\n            var o = this._currentData[r],\n              s = this.matches(t, o);\n            null !== s && i.push(s);\n          }\n          n({\n            results: i\n          });\n        }, e.prototype.addOptions = function (e, t) {\n          var n = s.map(t, function (e) {\n            return i.GetData(e[0], \"data\");\n          });\n          this._currentData.push.apply(this._currentData, n);\n        }, e;\n      }), e.define(\"select2/compat/matcher\", [\"jquery\"], function (s) {\n        return function (o) {\n          return function (e, t) {\n            var n = s.extend(!0, {}, t);\n            if (null == e.term || \"\" === s.trim(e.term)) return n;\n            if (t.children) {\n              for (var i = t.children.length - 1; 0 <= i; i--) {\n                var r = t.children[i];\n                o(e.term, r.text, r) || n.children.splice(i, 1);\n              }\n              if (0 < n.children.length) return n;\n            }\n            return o(e.term, t.text, t) ? n : null;\n          };\n        };\n      }), e.define(\"select2/compat/query\", [], function () {\n        function e(e, t, n) {\n          n.get(\"debug\") && window.console && console.warn && console.warn(\"Select2: The `query` option has been deprecated in favor of a custom data adapter that overrides the `query` method. Support will be removed for the `query` option in future versions of Select2.\"), e.call(this, t, n);\n        }\n        return e.prototype.query = function (e, t, n) {\n          t.callback = n, this.options.get(\"query\").call(null, t);\n        }, e;\n      }), e.define(\"select2/dropdown/attachContainer\", [], function () {\n        function e(e, t, n) {\n          e.call(this, t, n);\n        }\n        return e.prototype.position = function (e, t, n) {\n          n.find(\".dropdown-wrapper\").append(t), t.addClass(\"select2-dropdown--below\"), n.addClass(\"select2-container--below\");\n        }, e;\n      }), e.define(\"select2/dropdown/stopPropagation\", [], function () {\n        function e() {}\n        return e.prototype.bind = function (e, t, n) {\n          e.call(this, t, n);\n          this.$dropdown.on([\"blur\", \"change\", \"click\", \"dblclick\", \"focus\", \"focusin\", \"focusout\", \"input\", \"keydown\", \"keyup\", \"keypress\", \"mousedown\", \"mouseenter\", \"mouseleave\", \"mousemove\", \"mouseover\", \"mouseup\", \"search\", \"touchend\", \"touchstart\"].join(\" \"), function (e) {\n            e.stopPropagation();\n          });\n        }, e;\n      }), e.define(\"select2/selection/stopPropagation\", [], function () {\n        function e() {}\n        return e.prototype.bind = function (e, t, n) {\n          e.call(this, t, n);\n          this.$selection.on([\"blur\", \"change\", \"click\", \"dblclick\", \"focus\", \"focusin\", \"focusout\", \"input\", \"keydown\", \"keyup\", \"keypress\", \"mousedown\", \"mouseenter\", \"mouseleave\", \"mousemove\", \"mouseover\", \"mouseup\", \"search\", \"touchend\", \"touchstart\"].join(\" \"), function (e) {\n            e.stopPropagation();\n          });\n        }, e;\n      }), l = function l(p) {\n        var h,\n          f,\n          e = [\"wheel\", \"mousewheel\", \"DOMMouseScroll\", \"MozMousePixelScroll\"],\n          t = \"onwheel\" in document || 9 <= document.documentMode ? [\"wheel\"] : [\"mousewheel\", \"DomMouseScroll\", \"MozMousePixelScroll\"],\n          g = Array.prototype.slice;\n        if (p.event.fixHooks) for (var n = e.length; n;) p.event.fixHooks[e[--n]] = p.event.mouseHooks;\n        var m = p.event.special.mousewheel = {\n          version: \"3.1.12\",\n          setup: function setup() {\n            if (this.addEventListener) for (var e = t.length; e;) this.addEventListener(t[--e], i, !1);else this.onmousewheel = i;\n            p.data(this, \"mousewheel-line-height\", m.getLineHeight(this)), p.data(this, \"mousewheel-page-height\", m.getPageHeight(this));\n          },\n          teardown: function teardown() {\n            if (this.removeEventListener) for (var e = t.length; e;) this.removeEventListener(t[--e], i, !1);else this.onmousewheel = null;\n            p.removeData(this, \"mousewheel-line-height\"), p.removeData(this, \"mousewheel-page-height\");\n          },\n          getLineHeight: function getLineHeight(e) {\n            var t = p(e),\n              n = t[\"offsetParent\" in p.fn ? \"offsetParent\" : \"parent\"]();\n            return n.length || (n = p(\"body\")), parseInt(n.css(\"fontSize\"), 10) || parseInt(t.css(\"fontSize\"), 10) || 16;\n          },\n          getPageHeight: function getPageHeight(e) {\n            return p(e).height();\n          },\n          settings: {\n            adjustOldDeltas: !0,\n            normalizeOffset: !0\n          }\n        };\n        function i(e) {\n          var t,\n            n = e || window.event,\n            i = g.call(arguments, 1),\n            r = 0,\n            o = 0,\n            s = 0,\n            a = 0,\n            l = 0;\n          if ((e = p.event.fix(n)).type = \"mousewheel\", \"detail\" in n && (s = -1 * n.detail), \"wheelDelta\" in n && (s = n.wheelDelta), \"wheelDeltaY\" in n && (s = n.wheelDeltaY), \"wheelDeltaX\" in n && (o = -1 * n.wheelDeltaX), \"axis\" in n && n.axis === n.HORIZONTAL_AXIS && (o = -1 * s, s = 0), r = 0 === s ? o : s, \"deltaY\" in n && (r = s = -1 * n.deltaY), \"deltaX\" in n && (o = n.deltaX, 0 === s && (r = -1 * o)), 0 !== s || 0 !== o) {\n            if (1 === n.deltaMode) {\n              var c = p.data(this, \"mousewheel-line-height\");\n              r *= c, s *= c, o *= c;\n            } else if (2 === n.deltaMode) {\n              var u = p.data(this, \"mousewheel-page-height\");\n              r *= u, s *= u, o *= u;\n            }\n            if (t = Math.max(Math.abs(s), Math.abs(o)), (!f || t < f) && y(n, f = t) && (f /= 40), y(n, t) && (r /= 40, o /= 40, s /= 40), r = Math[1 <= r ? \"floor\" : \"ceil\"](r / f), o = Math[1 <= o ? \"floor\" : \"ceil\"](o / f), s = Math[1 <= s ? \"floor\" : \"ceil\"](s / f), m.settings.normalizeOffset && this.getBoundingClientRect) {\n              var d = this.getBoundingClientRect();\n              a = e.clientX - d.left, l = e.clientY - d.top;\n            }\n            return e.deltaX = o, e.deltaY = s, e.deltaFactor = f, e.offsetX = a, e.offsetY = l, e.deltaMode = 0, i.unshift(e, r, o, s), h && clearTimeout(h), h = setTimeout(v, 200), (p.event.dispatch || p.event.handle).apply(this, i);\n          }\n        }\n        function v() {\n          f = null;\n        }\n        function y(e, t) {\n          return m.settings.adjustOldDeltas && \"mousewheel\" === e.type && t % 120 == 0;\n        }\n        p.fn.extend({\n          mousewheel: function mousewheel(e) {\n            return e ? this.bind(\"mousewheel\", e) : this.trigger(\"mousewheel\");\n          },\n          unmousewheel: function unmousewheel(e) {\n            return this.unbind(\"mousewheel\", e);\n          }\n        });\n      }, \"function\" == typeof e.define && e.define.amd ? e.define(\"jquery-mousewheel\", [\"jquery\"], l) : \"object\" == (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) ? module.exports = l : l(d), e.define(\"jquery.select2\", [\"jquery\", \"jquery-mousewheel\", \"./select2/core\", \"./select2/defaults\", \"./select2/utils\"], function (r, e, o, t, s) {\n        if (null == r.fn.select2) {\n          var a = [\"open\", \"close\", \"destroy\"];\n          r.fn.select2 = function (t) {\n            if (\"object\" == _typeof(t = t || {})) return this.each(function () {\n              var e = r.extend(!0, {}, t);\n              new o(r(this), e);\n            }), this;\n            if (\"string\" != typeof t) throw new Error(\"Invalid arguments for Select2: \" + t);\n            var n,\n              i = Array.prototype.slice.call(arguments, 1);\n            return this.each(function () {\n              var e = s.GetData(this, \"select2\");\n              null == e && window.console && console.error && console.error(\"The select2('\" + t + \"') method was called on an element that is not using Select2.\"), n = e[t].apply(e, i);\n            }), -1 < r.inArray(t, a) ? this : n;\n          };\n        }\n        return null == r.fn.select2.defaults && (r.fn.select2.defaults = t), o;\n      }), {\n        define: e.define,\n        require: e.require\n      };\n    }(),\n    t = e.require(\"jquery.select2\");\n  return d.fn.select2.amd = e, t;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/plugins/select2/js/select2.full.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/dist/js/app": 0,
/******/ 			"dist/css/app": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["dist/css/app"], () => (__webpack_require__("./resources/js/app.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["dist/css/app"], () => (__webpack_require__("./resources/sass/app.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;